sep=,
Prompt,Generated Code GPT-2,Generated Code BART,Generated Code Mistral,Actual Code
"This applet will reward you 1p for every 10 metres you cycle or run, from a pot of your choice, using Strava.",var distance = parseInt(Strava.newActivityByYou.DistanceM,var distance = parseInt(Strava.newActivityByYou.DistanceMeters); var amount = distance/1000; Monzo.potDeposit.setAmount(amount.toFixed(2));,"var meters = parseInt(Strava.newActivityByYou.DistanceMeters) var roundUp = Math.ceil(meters/100)  Monzo.potDeposit.setAmount(roundUp*1) Monzo.potDeposit.setPot(""Travel"") Monzo.potDeposit.setTag(""Strava"") Monzo.potDeposit.setNote(""Rewards for distance travelled using Strava"") Monzo.potDeposit.setAmountInAccountCurrency(1)  Monzo.potDeposit.setExclusive(true)",var distance = parseInt(Strava.newActivityByYou.DistanceMeters); var amount = distance/1000; Monzo.potWithdraw.setAmount(amount.toFixed(2));
Enter a description of your meal and the number of calories separated by a comma (or skip the description and just enter the calories count).,,"if (Evernote.newEating.DescriptionByYou.Text.indexOf(""MMMM"") < 0) {    Evernotes.sendRichNotification.skip(""No description"") }","let description = Trigger.EntryDescription let calories = parseInt(description.match(/(\d+) calories/)[1]); let totalCalories = parseInt(GoogleFit.readDailyTotalCalories.Value);  let message = ""Added to your Diet Diary."";  let newTotalCalories = totalCalories + calories;  let warningMessage = ""This meal will put you over your daily recommended calories!"";  let warningThreshold = 1500;  if (newTotalCalories > warningThreshold) {    GoogleFit.writeDailyTotalCalories.setDoNotSendNotification(warningMessage);    GoogleFit.writeDailyTotalCalories.setDoNotSendEmail(warningMessage); }  else {    DietDiary.createMeal.setMealDescription(description);    DietDiary.createMeal.setMealCalories(calories);    DietDiary.createMeal.setMealDate(GoogleFit.readDailyTotalCalories.StartTime);  }  DietDiary.createMeal.setMessage(message);
###
var message = ( description && description.length > 0 ) ? message : (""Skipping meal log as description is empty."");  DietDiary.createMeal.setMessage(message);  GoogleFit.writeDailyTotalCalories.setDoNotSendNotification(message);  GoogleFit.writeDailyTotalCalories.setDoNotSendEmail(message);","var values = DoNote.doNoteNewCommandCommon.NoteText.split("","", 2) if (values.length > 1) {   IosHealth.logCaloriesConsumed.setFoodDescription(values[0])   IosHealth.logCaloriesConsumed.setNumberOfCalories(values[1]) } else if (values.length > 0) {   IosHealth.logCaloriesConsumed.setNumberOfCalories(values[0]) } else {   IosHealth.logCaloriesConsumed.skip(""No data provided"") }"
"Turn on Wemo Switch After Garage Door Opens (After 5pm). Uses MyQ to detect garage door open and if it's after 5pm it will turn on Wemo switch; otherwise, it won't do anything.",var hour = Meta.triggerTime.hour()  if (hour < 22 ||,var timeOfDay = Meta.currentUserTime.hour()   if (timeOfDay > 17 || timeofDay < 5) {    WemoSwitch.attributeOnDiscrete.skip()  },var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay < 17) {   WemoSwitch.attributeActionWemoSwitch.skip(`Its too early to turn on your lights`)  } else {   WemoSwitch.turnOn  },"var hour     = Meta.currentUserTime.hour() if (hour < 17) {   WemoSwitch.attributeSocketOnDiscrete.skip(""not in hour timing"") }"
Turn on WeMo Smart Plug When Ring Detects Motion between 6PM and 6AM.,var timeOfDay = Meta.currentUserTime.hour();   if (,var timeOfDay = Meta.currentUserTime.hour()   if (timeOfDay >= 22 || timeOfSleep < 6 ) {    WemoSmartPlug.attributeLsOnDiscrete.skip()  },"if (Meta.currentUserTime.hour() < 18 || Meta.currentUserTime.hour() > 6) {  WemoSwitch.attributeOnDiscrete.skip(""Too Early"") } else {  WemoSwitch.attributeOnDiscrete.check(""Too Late"") }  var ringDetectsMotion = RingDetectsMotion.allDayInHistory.EmailDetectedMotion.replace(/\D/g,'').length  if (ringDetectsMotion < 1) {    WemoSwitch.attributeOnDiscrete.skip(""No Motion Detected"")  } else {    WemoSwitch.attributeOnDiscrete.check(""Motion Detected"")  }  RingDetectsMotion.allDayInHistory.EmailDetectedMotion.discard()  RingDetectsMotion.allDayInHistory.EmailGeofencingArrived.discard()  RingDetectsMotion.allDayInHistory.EmailGeofencingLeft.discard()",var timeOfDay = Meta.currentUserTime.hour() if (timeOfDay >= 18 || timeOfDay < 6 ) {  } else {  WemoSwitch.attributeSocketOnDiscrete.skip() }
This applet will add an iOS reminder to drink water whenever you buy a coffee. You'll get a notification two hours after you make the transaction.,var timeOfDay = Meta.currentUserTime.hour()   if (,"var timeOfDay = Meta.triggerTime.hour()   if (timeOfDay >= 22 || timeOfHour < 8 ) {    IfNotifications.sendNotification.skip(""Too late to drink; resume tomorrow"");  }","var triggerDrink = ""Coffee"";  if (Monzo.cardPurchase.CardCategory.CategoryName.toLowerCase() != triggerDrink) {    IfNotifications.createCalendarReminder.skip();  } else {    IfNotifications.createCalendarReminder.setMessage(""Drink a glass of water"");    IfNotifications.createCalendarReminder.setDate(parseFloat(Math.random()*24));  }","var reminderTime = Meta.triggerTime.add(2, 'h'); IosReminders.createReminderIosReminders.setAlarmDate(reminderTime.format(""M/DD/YYYY"") + "" at "" + reminderTime.format(""h:mm A""))"
"We got you, Dallas: this Applet sends you a Telegram message to the chat of your choosing when there's a DART rider alert during weekday commute hours (7-10am and 5-7pm).",var Hour = Meta.currentUserTime.hour() var Day = Meta.current,"var Hour = Meta.currentUserTime.hour() var Day    Hour <7 || (Hour > 10 && Hour < 17) || Hour > 19) {   Telegram.postToChannel.skip(""Outside of commuting hours"") }   if (Day == 6 || Day == 7){   IfNotifications.sendNotification.skip('Not a weekday') }","if (Meta.currentUserTime.locale('en').isoWeekday() < 6 && ((Meta.currentUserTime.hour() < 7 || Meta.currentUserTime.hour() > 10) || ((Meta.currentUserTime.hour() > 17) && (Meta.currentUserTime.hour() < 19)))) {    Telegram.sendMessage.skip(""Outside of commuting hours"") } else {    DART.ridersAlert.onRidersAlert.subscribe(   Telegram.sendMessage.setText(   Trigger.EntryMessage.Link.replace(/\/$/, """").replace(/https?:\/\/\S+/gm, """").replace(/\s/g, """") + ""\n"" +    Trigger.EntryMessage.Title)  }","var Hour = Meta.currentUserTime.hour() var Day = Meta.currentUserTime.day()   if (Hour <7 || (Hour > 10 && Hour < 17) || Hour > 19) {   Telegram.sendMessage.skip(""Outside of commuting hours"") }   if (Day == 6 || Day == 7) {   Telegram.sendMessage.skip(""Not a weekday"") }"
facebook only text post,var Seoul    = moment.tz(',"var text = FacebookPages.newStatusMessageByPage.Text.replace(/.*/g, """");   if(text.indexOf(text) < 0) {    IfNotifications.sendNotification.skip(""Not related to FacebookPages"") }","if (FacebookPages.newPageFeedEntryByPage.Text.match(/(text|texts?|article|post|blog|news|info|updates|entry|updates|entry|entry|entry|entry|entry|entry|entry|entry)/) {      Pocket.readItLater.setTags(""facebook,facebook_pages"")  } else {      Pocket.readItLater.setTags(""none"")    }   if (!FacebookPages.newPageFeedEntryByPage.Text.match(/(text|texts?|article|post|blog|news|info|updates|entry|updates|entry|entry|entry|entry|entry|entry|entry)/)) {      Pocket.readItLater.skip(""Not Text Post"")    }   }
###",Facebook.newStatusMessageByYou.From Facebook.newStatusMessageByYou.Message Facebook.newStatusMessageByYou.UpdatedAt
If doorbell rings beween 21h and 6h then toggle Hue lights on.,var timeOfDay = Meta.currentUserTime.hour()    if,var timeOfDay = Meta.currentUserTime.hour();   if (timeOfDay >= 21 || timeHour < 6) {   Hue.turnOnAllHue.skip()  },var hour = Meta.currentUserTime.hour()  if (hour < 17 || hour > 20) {    Hue.turnOnAllHue.skip()  } else {    Hue.turnOnAllHue.setDelay(10000)  }  Hue.turnOnAllHue.wait()  } else {    Hue.turnOnAllHue.skip()  },var TimeOfDay = Meta.currentUserTime.hour()  if (TimeOfDay >= 21 || TimeOfDay < 6){   } else {  Hue.toggleAllHue.skip()  }
Report today's rainfall amount from your WeatherFlow device to Netro. Netro will use it to update schedules.,if (parseInt(Netro.rainYesterdayAmount.MeasuredRainfallMM,if(parseFloat(Weather.currentWeather[0].rainfallMM)<7) {   Netro.setWeather.skip() },"var wunderground = { Hour: [], Day: [] };  var sunrise = moment(Weather.currentWeather[0].SunriseAt);  var sunset = moment(Weather.currentWeather[0].SunsetAt);   Wunderground.queryWeather.Weather.forEach(function (item, i) {    wunderground.Hour.push(item.Days[0].DateHour);    wunderground.Day.push(item.Days[0].Date);  });   if (wunderground.Hour.length && (wunderground.Hour[0] < sunrise.hour() || wunderground.Hour[0] > sunset.hour())) {    Netro.postToMyFeed.setMessage(""Rainfall data not available."");  } else if (wunderground.Day.length && (wunderground.Day[0] != sunrise.format('YYYY-MM-DD') || wunderground.Day[0] != sunset.format('YYYY-MM-DD'))) {    Netro.postToMyFeed.setMessage(""Rainfall data not available."");  } else {    var rainfall = Wunderground.queryWeather.Weather[0].PrecipTotalAmountIn.slice(0,2);  Netro.postToMyFeed.setMessage(""There was "" + rainfall + "" mm of rainfall today."");  }  Netro.postToMyFeed.publish();","Netro.reportWeather.setDate(Netatmo.rainTodayAmount.MeasuredAt) Netro.reportWeather.setRain(Netatmo.rainTodayAmount.MeasuredRainfallMM) Netro.reportWeather.setRainProb(""100"")"
Turn light on when arriving to an area between 7 pm and 7 am,var timeOfDay = Meta.currentUserTime,var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfNight < 7 ) {   Lifx.turnOn.skip() },if (Meta.currentUserTime.hour() < 19 && Meta.currentUserTime.hour() > 7 ) {     } else {    ArloLight.turnOn.skip()  },var timeOfDay = Meta.currentUserTime.hour();  if(timeOfDay>7||timeOfDay<19){Smartlife.turnOn.skip();}
"When you get a follower, you get the ULTRA notification event!",,"if (Twitter.newTweetByUser.Text.indexOf(""@"") === -1) {    IfNotifications.sendNotification.skip(""Not a follower"") }","if(Twitter.newFollower.ScreenName.indexOf(',') >=0 ){  Twitter.postNewTweet.setMessage(""Thanks for the follow!"")  }  else {  Twitter.postNewTweet.setMessage(""Thanks for the follow, "" + Twitter.newFollower.ScreenName + ""!"")  }  Twitter.postNewTweet.setSendInHours(24)
###","var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {      IfNotifications.sendNotification.skip(""Too late"") } else {      Feedly.createNewEntryFeedly.skip(""I already know"") }"
This applet will add items tagged as files in Pocket to a data.world dataset.,var pathMin : number = 4; var pathMax : number = 49; var,"const pairs = Object.getOwnPropertyNames(String(Pocket.newItemFromSearchStarts.Text).map(prop => prop + "" as files"") Datadotworld.appendToData.setPayload(pairs.join(""https:","var title = Trigger.EntryTitle  var match = title.match(/(.*) \(files\)/);  var fileName = match && match[1] || title;  Datadotworld.appendToDataSet.setDatasetId(""your-dataset-id-here"");  Datadotworld.appendToDataSet.setFileName(fileName);  Datadotworld.appendToDataSet.setTitle(title);  Datadotworld.appendToDataSet.setDescription(Trigger.EntryUrl);
###","let filename = Pocket.newTaggedItemPocket.Url if (filename.indexOf(""?"") != -1) {   filename = filename.substr(0, filename.indexOf(""?"")) } filename = filename.substr(filename.lastIndexOf(""/"")+1)  Datadotworld.uploadFile.setFileName(filename)"
Wireless Tag senses movement and turns on Hue lights when the time is between 7PM and 6AM,var hour = Meta.currentUserTime.hour()    if (,var timeOfDay = Meta.currentUserTime.hour()   if (timeOfDay > 18 || timeHour < 7) {    Hue.turnOnAllHue.skip()  },"var timeOfDay = Meta.currentUserTime.hour(); if (timeOfDay >= 19 || timeOfDay < 6) {   Hue.setBrightness.skip(); } else {   Hue.setBrightness.setBrightness(100); }    Wireless.notify.setMessage(Wireless.tagMovement.isDetected ? ""Lights on!"" : ""Lights off.""); } else {   Hue.setBrightness.skip();   Wireless.notify.skip(); }    Hue.setBrightness.skip();","var hour = Meta.currentUserTime.hour();      if (hour < 6) {    Hue.turnOnAllHue.skip(""Too early"")    } else {    }"
"This applet turns on a wemo switch when you come back home only in the case if the time is later than 6pm, otherwise it does not turn on the switch",var hour = Meta.currentUserTime.hour()  if (hour <,var timeOfDay = Meta.currentUserTime.hour()   if (timeOfDay >= 18 || timeOfDays < 6) {    } else{   AndroidDevice.switchAction.skip()  },"let sunrise = moment(Weather.currentWeather[0].SunriseAt),  let sunset = moment(Weather.currentWeather[0].SunsetAt),  let currentTime = Meta.currentUserTime;  let timeCheck = currentTime.isAfter(sunset.add(18, 'hours')) && currentTime.isBefore(sunrise.subtract(1, 'hour'));   WemoSwitch.turnOn.skipIfNot(timeCheck);
###","var timeOfDay = Meta.currentUserTime.hour();  if (timeOfDay > 18) {    } else {      WemoSwitch.attributeSocketToggleDiscrete.skip(""Toggle switch""); }"
This applet will send your robot back to the dock when you get home after 5pm.,var hour = Meta.triggerTime.hour()  var timeHour = 24,var timeOfDay = Meta.currentUserTime.hour()   if (timeOfDay > 17 || timeHour < 5) {    AndroidDevice.sendDeviceBack.skip()  },"if (Meta.currentUserTime.hour() < 17) {      Robot.returnHome.skip(""Not enough daylight to go home"");  }  else {      Robot.returnHome;    }",var timeOfDay = Meta.currentUserTime.hour();    if (timeOfDay > 0 && timeOfDay < 17) {    Irobot.dockRobot.skip()  }
This applet will append Reddit posts to a stream in a data.world dataset.,const tweet = (Twitter.newTweetByUser.Text as any) const pairs,"const pairs = Object.getOwnPropertyNames(Reddit.newPostByUser.Text).map(pairs.join(""|||"")) Datadotworld.appendToChannel.setPayload(""||\S+)/","if(Reddit.newPostInSubreddit.Link == "" "") {   Data.appendToDataset.setSkip() } else {   Data.appendToDataset.setPayload(Reddit.newPostInSubreddit.Title + ""|"" + Reddit.newPostInSubreddit.Link) }","const post = (Reddit.newPostFromSearchReddit as any) const pairs = Object.getOwnPropertyNames(post).map(prop => prop + ""||"" + post[prop]) Datadotworld.append.setPayload(pairs.join(""|||""))"
This Applet will send you an email when a light rail advisory is posted between 7-9am and 5-7pm on weekdays.,var Hour = Meta.currentUserTime.hour() var Day = Meta.current,"var Hour = Meta.currentUserTime.hour() var Day    Hour <7 || (Hour > 9 && Hour < 5) || Hour > 17) {   Email.sendMeEmail.skip(""Outside of commuting hours"") }   if (Day == 6 || Day == 7){   IfNotifications.sendNotification.skip('Not a weekday') }","var Hour = Meta.currentUserTime.hour() var Day = Meta.currentUserTime.day()   if (Hour <7 || (Hour > 9 && Hour < 17) || Hour > 19) {   Email.sendMeEmail.skip(`Outside of commuting hours`) }   if (Day == 6 || Day == 7) {   Email.sendMeEmail.skip(`Not a weekday`) }
###","var Hour = Meta.currentUserTime.hour() var Day = Meta.currentUserTime.day()  if (Day==6 || Day==7) {   Email.sendMeEmail.skip(""Not a weekday"") }  else if (Hour < 7 || (Hour > 9 && Hour < 5) || Hour > 19) {   Email.sendMeEmail.skip(""Not commuting hours"") }"
Time:  from 18:00 to 20:59 wDay: from Mon. to Fri. image upload to BOX,var timeOfDay = Meta.currentUserTime.hour()   if (,"var timeOfDay = Meta.currentUserTime.hour()    if (timeOfDay >= 20 || timeofDay < 9 ) {   AndroidMessages.sendAMessage.skip(""Too late"") }","var currentTime = Meta.triggerTime.hour()  if (currentTime > 21 || currentTime < 18) {    IfNotifications.sendNotification.skip(""Outside Office Hours"")  }  else {    }
###
var weekday = Meta.triggerTime.format('dddd').toLowerCase()  if (weekday != ""fri"") {    }  else {    }
###","var weekDay = Meta.currentUserTime.day();  var Hours = Meta.currentUserTime.hour();          var H_from = 18;   var H_to = 20;  var WD_from = 1;  var WD_to = 5;        if((Hours >= H_from && Hours <= H_to) && (weekDay >= WD_from && weekDay <= WD_to)){  	 }else{    var r = ""Hours:""+Hours+""/weekDay:""+weekDay+"" 	Box.uploadFileFromUrlBox.skip(r);  }"
"Whenever you get home, this Applet will automatically turn on your lights if it's dark outside.",let sunrise = moment(Weather.currentWeather[0].SunriseAt); let,let sunrise = moment(Weather.currentWeather[0].SunriseAt); if (sunrise && sunset) {    Lifx.turnOn.skip(`Its still daytime so we're leaving the lights off`); },"var sunrise = moment(Weather.currentWeather[0].SunriseAt);  var sunset = moment(Weather.currentWeather[0].SunsetAt);    var currentTime = Meta.currentUserTime;    if (currentTime.isBetween(sunrise.subtract(1,""hours""), sunset.add(1,""hours""))) {       Dycodemo.poweron.skip()    } else {        Dycodemo.poweron.setDelay(60)    }",let sunrise = moment(Weather.currentWeather[0].SunriseAt); let sunset = moment(Weather.currentWeather[0].SunsetAt); let currentTime = Meta.currentUserTime; let afterSunrise = currentTime.isAfter(sunrise); let beforeSunset = currentTime.isBefore(sunset);  if (afterSunrise && beforeSunset) {    Yeelight.onOff.skip(`Its still daytime so we're leaving the lights off`); }
When the user @QGdaAnitta tweets registration for a Good Music Ao Vivo you will be notified via notification of IFTTT and email.,var timeOfDay = Meta.currentUserTime.hour()  if (time,"if (Twitter.newTweetByUser.Text.indexOf(""Good Music"") === -1) {   IfNotifications.sendNotification.skip(""Not a Good Music User"") }","var registro = Twitter.newTweetByUser.Text; if (registro.indexOf(""Inscreva"") <0 && registro.indexOf(""Matriz"") <0 && registro.indexOf(""Liga"") <0 && registro.indexOf(""Nao"") <0 && registro.indexOf(""Melhor"") <0) {   Email.sendMeEmail.skip(); } else {   Email.sendMeEmail.setSubject(registro);   Email.sendMeEmail.appendToBody(registro); }","var texto = Twitter.newTweetByUser.Text.toLowerCase();   if (texto.indexOf(""inscrio"") === -1 || texto.indexOf(""msica boa ao vivo"") === -1) {      IfNotifications.sendNotification.skip(""Tute no foi sobre inscrio para o Msica Boa Ao Vivo"");       Email.sendMeEmail.skip(""Tute no foi sobre inscrio para o Msica Boa Ao Vivo""); }"
Keep a minimum steps goal updated. We'll add a 1 to your min-steps goal if you got >= 5000 steps on your regular steps goal today. Otherwise we add a 0 (so you know that the applet ran).,var goal = Meta.triggerTime.minute() if (goal >= 5000 && goal,if (parseInt(Monzo.steps.toLowerCase() >= 5000) {    Monzo.potDeposit.setAmount(amount.toFixed(2)); },"if (parseInt(Evernote.newNoteInNotebook.NoteContent.match(/\d+/)[0]) < 5000) {  Evernote.appendToNote.setMinSteps(parseInt(Evernote.appendToNote.MinSteps) + 0) } else { Evernote.appendToNote.setMinSteps(parseInt(Evernote.appendToNote.MinSteps) + 1) }
###","if(parseInt(Beeminder.datapointAdded.DatapointValue) < 5000){   Beeminder.addData.setDatapointValue(""0"");   Beeminder.addData.setDatapointComment(""Didn't pass 5000 steps today (""+ Beeminder.datapointAdded.DatapointValue+"")""); }"
This Applet sends you a notification from the IFTTT app when there's a service alert on the Rapid Ride C line between 7-10am.,var Hour = Meta.currentUserTime.hour() var Day = Meta.current,"var Hour = Meta.currentUserTime.hour()   if (Hour < 7 || Hour > 10) {   IfNotifications.sendNotification.skip(""Outside of commuting hours"") }",var Hour = Meta.currentUserTime.hour()  if (Hour <7 || (Hour > 10 && Hour < 17)) {   Ifttt.postToYourApplet.skip('Outside of commuting hours') }  else if (Hour > 17 || Hour < 7) {   Ifttt.postToYourApplet.skip('Not commuting hours') }  else {   RapidRideC.isThereAnAlert.then(function(isAlert) {     if (isAlert.ResultNumber > 0) {       Ifttt.postToYourApplet.setTitle(isAlert.AlertDesc)       Ifttt.postToYourApplet.setMessage(isAlert.AlertDesc)       Ifttt.postToYourApplet.setAppletId('NotificationApplet')       Ifttt.postToYourApplet.sendNotification.skip('Skipping because of alert')     }  })  },"var Hour = Meta.currentUserTime.hour()  if (Hour < 7 || Hour > 10) {   IfNotifications.sendNotification.skip(""Not during the morning commute"") }"
Lights up your favourite Hue Scene when you arrive home between 18:00 and 06:00,var timeOfDay = Meta.currentUserTime.hour();,var timeOfDay = Meta.currentUserTime.hour()   if (timeOfDay >= 18 || timeHour < 06) {   Hue.setSceneAllHue.skip()  },var timeOfDay = Meta.currentUserTime.hour();    if (timeOfDay < 18 || timeOfDay > 6) {     Hue.activateScene.skip();  } else {     Hue.activateScene.setScene('your-scene-name');  },var timeOfDay = Meta.currentUserTime.hour() if (timeOfDay >= 18 || timeOfDay < 6 ) {  } else {  Hue.setScene.skip() }
"This will automatically turn on the WiZ light(s) of your choice when you enter the area you have defined, unless it's currently sunny outside.",var,if (parseInt(Weather.currentWeather[0].SunriseAt);    !==SunsetAt) {   WiZLighting.attributeLsOnDiscrete.skip()  },if (Meta.currentUserTime.hour() < 7 || Meta.currentUserTime.hour() > 19) {   WiZ.turnOn.skip(); } else {   WiZ.turnOn.setEndTime(72); },let sunrise = moment(Weather.currentWeather[0].SunriseAt); let sunset = moment(Weather.currentWeather[0].SunsetAt); let currentTime = Meta.currentUserTime; let afterSunrise = currentTime.isAfter(sunrise); let beforeSunset = currentTime.isBefore(sunset);  if (afterSunrise && beforeSunset) {    Wiz.turnOn.skip(`Its still daytime so we're leaving the lights off`); }
Good morning Chicago! This Applet posts to a Cisco Spark room of your choosing when there's an alert affecting the yellow line during your weekday commute to work (7-10am).,var Hour = Meta.currentUserTime.hour() var Day = Meta.current,"var Hour = Meta.currentUserTime.hour() var Day    Hour <7 || (Hour > 10 && Hour < 17) || Hour > 19) {   Spark.postToChannel.skip(""Outside of morning commuting hours"") }   if (Day == 6 || Day == 7){   }  else {  }",if (Meta.currentUserTime.day() == 6 || Meta.currentUserTime.day() == 7) {   CiscoSpark.postToRoom.skip('Not a weekday') } else {   CiscoSpark.postToRoom.setSubject('A yellow line alert occurred during your commute')   CiscoSpark.postToRoom.setText('Alert:')   YellowLine.alertDuringWeekdayCommute.then(function(alert) {     CiscoSpark.postToRoom.appendText(alert.Description)   }) },"var Hour = Meta.currentUserTime.hour() var Day = Meta.currentUserTime.day()   if (Hour < 7 || Hour > 10) {   CiscoSpark.postAMessage.skip(""Outside of morning commuting hours"") }   if (Day == 6 || Day == 7) {   CiscoSpark.postAMessage.skip(""Not a weekday"") }"
This applet will append Medium bookmarks to a stream in a data.world dataset.,const title = Trigger.EntryTitle.toLowerCase() const keyword1 = ',"const pairs = Object.getOwnPropertyNames(Twitter.newTweetByUser.Text).map(prop => prop + ""||"" + pairs[prop]) Datadotworld.append.setPayload(pairs.join(""|||""))","var title = Trigger.EntryTitle.toLowerCase(); var searchTerm = 'medium.com/p/${title}'; var url = `https:${UrlFetcher.fetchUrl(searchTerm, {maxAgeSeconds: 300}).then(data => data.Link)}`; var dataset = 'https:${DataSet.getDataset('MediumLinkCollection').Url}'; Dataset.appendToDataset.setUrl(dataset).setPayload('{""EntryTitle"": ""${title}"", ""MediumLink"": ""${Url}""}')  .appendToDataset();
###","const bookmark = (Medium.postBookmarkedByYou as any) const pairs = Object.getOwnPropertyNames(bookmark).map(prop => prop + ""||"" + bookmark[prop]) Datadotworld.append.setPayload(pairs.join(""|||""))"
This applet will append new tweets by a specific user to a stream in a data.world dataset.,const tweet = (Twitter.newTweetByUser.Text as any) const pairs,"const tweet = Twitter.newTweetByUser.Text; const pairs = Object.getOwnPropertyNames(Twitter.newTweets).map(prop => prop + ""||"" + tweet[prop]) Datadotworld.append.setPayload(pairs.join(""|||""))","var username = ""solarstorms""  var tweet = Twitter.newTweetByUser.Text  var time = Meta.currentUserTime.format('YYYY-MM-DDTHH:mm:ss.sssZ')  var timestamp = time.replace(/T/, ' ').replace(/\..+/, '')  var data = {Username: username, Tweet: tweet, Timestamp: timestamp}  Data.appendToDataset.setData(JSON.stringify(data))  Data.appendToDataset.append()
###","const tweet = (Twitter.newTweetByUser as any) const pairs = Object.getOwnPropertyNames(tweet).map(prop => prop + ""||"" + tweet[prop]) Datadotworld.append.setPayload(pairs.join(""|||""))"
Report yesterday's rainfall measurement from your Netatmo device to Netro. Netro will use it to update schedules.,if (parseInt(Netro.rainYesterdayAmount.MeasuredRainfallMM,if (parseFloat(Netatmo.rainYesterdayMeasuredRainfall.RainfallMM)<0) {   Netro.setWeather.skip() },"var minute = Meta.triggerTime.minute()  var minuteString = minute.toString()  if(minute%30 > 0){    Netro.setSchedule.skip()  }else{    Netro.setSchedule.setMessage(""Rainfall: "" + Meta.currentUserTime + "" - "" + Meta.rainmm.RainmmDay.RainmmAmountLastHour[0].Amount.toFixed(2) + "" mm"")  }","Netro.reportWeather.setDate(Netatmo.rainYesterdayAmount.MeasuredAt) Netro.reportWeather.setRain(Netatmo.rainYesterdayAmount.MeasuredRainfallMM) Netro.reportWeather.setRainProb(""100"")"
Turn off your WeMo lights if you plug your phone in after 9 oclock,var timeOfDay = Meta.currentUserTime.hour();  if (,var timeOfDay = Meta.currentUserTime.hour();   if (timeOfDay > 22 || timeOfNight < 9 ) {    } else{   WemoLighting.plugAction.skip()  },"var hour = Meta.triggerTime.hour()  if (hour > 21) {    WemoSwitch.poweron.skip(""Too late"") } else {    WemoSwitch.poweron.skip(""I'm already home"") }","var timeOfDay = Meta.currentUserTime.hour();    if (timeOfDay < 21 && timeOfDay > 4) {    WemoSwitch.attributeSocketOffDiscrete.skip(""too early"");  }"
Turn on your Hue lights when a device connects to your Google Wifi network at night.,var timeOfDay = Meta.currentUserTime.hour()  if (time,var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay > 7 && timeOfNight < 19) {   Hue.turnOnAllHue.skip()  },"var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay > 7 && timeOfDay < 19) {    Hue.turnOnAllHue.skip(""Too early"")  } else {    Hue.turnOnAllHue.setColor(""Away"")  }",var sunDown = moment().hour(20).minute(0); var sunUp = moment().hour(5).minute(0); if (Meta.triggerTime.isAfter(sunUp) || Meta.triggerTime.isBefore(sunDown)) {   Hue.turnOnAllHue.skip(); }
"Save as you spend. Round up each purchase you make to the nearest 1, and add the difference to a pot of your choice!",const decimal = parseFloat,const decimal = parseInt(Monzo.cardPurchase.AmountDecimal); Monzo.potWithdraw.setAmount(decimal * 2),"if (parseFloat(Monzo.potDepositAmount) % 1 > 0) {  Monzo.roundUp.skip(""Not a whole number"")  } else {  Monzo.roundUp.setAmount(1).setPot(""1"")  }",var amount = parseFloat(Monzo.cardPurchase.AmountInAccountCurrency); var c = Math.ceil(amount); var remainder = c - amount; var roundedRemainder = remainder.toFixed(2); if (amount > 0 && remainder > 0) {   Monzo.potDeposit.setAmount(roundedRemainder); }
Turn light on if time is after 7pm or before 7am,var hour = Meta.currentUserTime.hour()  if (hour < 7,var timeOfDay = Meta.currentUserTime.hour()   if (timeOfDay >= 7 || timeofDay < 21) {   Lifx.turnOn.skip()  },"var timeOfDay = Meta.currentUserTime.hour();   if (timeOfDay <= 19 || timeOfDay >= 7 ) {   } else {  }
###
if (timeOfDay <= 19 || timeOfDay >= 7 ) {      Wyzecam.receiveMotionEvent.skip();  } else {      Wyzecam.receiveMotionEvent.setLightingMode(""off"");  }",if ((Meta.currentUserTime.hour() <= 19) || (Meta.currentUserTime.hour() >= 7)) {     WemoLightSwitch.attributeLsOnDiscrete.skip(); }
Post notes you create in Notebook as tweets,"if (Twitter.newTweetByUser.Text.indexOf(""@"") <","if (Trigger.Notebook.EntryTitle.indexOf(""Notebook"") < 0) {   Twitter.postNewTweet.skip(); }","if (Evernote.newNoteInNotebook.NoteTitle.length < 140) {   Twitter.postNewTweet.setTweet(""""+Evernote.newNoteInNotebook.NoteTitle+"""");  } else {   Twitter.postNewTweet.setTweet(""#Reminder: ""+Evernote.newNoteInNotebook.NoteTitle);  }  Twitter.postNewTweet.setHashtag(""#Post2Twitter"");","var htmlContent = Notebook.newTextNotecardInNotebook.NotecardHtmlContent; var text = htmlContent.replace(/<\/?[^>]+>/gi, "" ""); Twitter.postNewTweet.setTweet(text);"
"Whenever you come home, this Applet turns on your Govee lights unless it's currently sunny.",let sunrise = moment(Weather.currentWeather[0].SunriseAt); let,let sunrise = moment(Weather.currentWeather[0].SunriseAt); let sunset = moment(); let currentTime = Meta.currentUserTime; let afterSunrise = currentTime.isAfter(sunrise); let beforeSunset = currentWeather.isBefore(sunset);  if (afterSunrise && beforeSunsets) {   Govee.turnOnAllHue.skip(`Its still daytime so we're leaving the lights off`); },"var sunrise = moment(Weather.currentWeather[0].SunriseAt); var sunset = moment(Weather.currentWeather[0].SunsetAt); var currentTime = Meta.currentUserTime; var afterSunrise = currentTime.isAfter(sunrise); var beforeSunset = currentTime.isBefore(sunset);    if (afterSunrise && beforeSunset) {      Govee.poweron.skip(""Its still daytime so we're leaving the lights off"")    } else {      Govee.poweron.setColor(""#00ffff"")    }",let sunrise = moment(Weather.currentWeather[0].SunriseAt); let sunset = moment(Weather.currentWeather[0].SunsetAt); let currentTime = Meta.currentUserTime; let afterSunrise = currentTime.isAfter(sunrise); let beforeSunset = currentTime.isBefore(sunset);  if (afterSunrise && beforeSunset) {    Govee.lightBrightness.skip(`Its still daytime so we're leaving the lights off`); }
