Prompt,Generated Code GPT-2,Generated Code BART,Generated Code Mistral,Actual Code
"This applet will reward you 1p for every 10 metres you cycle or run, from a pot of your choice, using Strava.",var distance = Math.floor(Math.random() * distance/,var distance = parseInt(Strava.newActivityByYou.DistanceMeters); var amount = distance/1000; Monzo.potDeposit.setAmount(amount.toFixed(2));,"var distanceInFeet = Math.floor(parseFloat(Trigger.Distance) * 3280.84); var amountInPence = Math.floor(distanceInFeet / 100); Monzo.potDeposit.setAmount(amountInPence); Monzo.potDeposit.setTag(""Strava""); Monzo.potDeposit.setPotId(""5a5cbf9e20bb151a51b1aa14"");  Monzo.potDeposit.setNotifications.skip();  Monzo.potDeposit.setNotificationMessage.skip();  Monzo.potDeposit.setNotificationSound.skip();",var distance = parseInt(Strava.newActivityByYou.DistanceMeters); var amount = distance/1000; Monzo.potWithdraw.setAmount(amount.toFixed(2));
Enter a description of your meal and the number of calories separated by a comma (or skip the description and just enter the calories count).,var amount = Meta.triggerTime.amount  if (amount <,"if (Evernote.newEating.DescriptionByYou.Text.indexOf(""MMMM"") < 0) {    Evernotes.sendRichNotification.skip(""No description"") }","let calories = parseInt(Trigger.EntryDescription.split("","")[1].trim()); let description = Trigger.EntryDescription.split("","")[0]; let caloriesList = parseInt(Trello.createCardInList.ListId); if (calories > caloriesList) {   Trello.createCardInList.setDescription(description); } else {   Trello.createCardInList.setDescription(description + "" ("" + calories + "" calories)""); } Trello.createCardInList.setSkip(""Below calorie limit"");","var values = DoNote.doNoteNewCommandCommon.NoteText.split("","", 2) if (values.length > 1) {   IosHealth.logCaloriesConsumed.setFoodDescription(values[0])   IosHealth.logCaloriesConsumed.setNumberOfCalories(values[1]) } else if (values.length > 0) {   IosHealth.logCaloriesConsumed.setNumberOfCalories(values[0]) } else {   IosHealth.logCaloriesConsumed.skip(""No data provided"") }"
"Turn on Wemo Switch After Garage Door Opens (After 5pm). Uses MyQ to detect garage door open and if it's after 5pm it will turn on Wemo switch; otherwise, it won't do anything.",var hour = Meta.triggerTime.hour()   if (,var timeOfDay = Meta.currentUserTime.hour()   if (timeOfDay > 17 || timeofDay < 5) {    WemoSwitch.attributeOnDiscrete.skip()  },if (Meta.currentUserTime.hour() < 17) { WemoSwitch.attributeLightOnDiscrete.skip(); } else { WemoSwitch.attributeLightOnDiscrete.execute(); },"var hour     = Meta.currentUserTime.hour() if (hour < 17) {   WemoSwitch.attributeSocketOnDiscrete.skip(""not in hour timing"") }"
Turn on WeMo Smart Plug When Ring Detects Motion between 6PM and 6AM.,var timeOfDay = Meta.currentUserTime.hour(),var timeOfDay = Meta.currentUserTime.hour()   if (timeOfDay >= 22 || timeOfSleep < 6 ) {    WemoSmartPlug.attributeLsOnDiscrete.skip()  },var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay > 18 || timeOfDay < 6) {    WemoLighting.plugIn.skip()  } else {    WemoLighting.plugIn.hold()  },var timeOfDay = Meta.currentUserTime.hour() if (timeOfDay >= 18 || timeOfDay < 6 ) {  } else {  WemoSwitch.attributeSocketOnDiscrete.skip() }
This applet will add an iOS reminder to drink water whenever you buy a coffee. You'll get a notification two hours after you make the transaction.,var Hour = Meta.triggerTime.hour()    if,"var timeOfDay = Meta.triggerTime.hour()   if (timeOfDay >= 22 || timeOfHour < 8 ) {    IfNotifications.sendNotification.skip(""Too late to drink; resume tomorrow"");  }","if (Monzo.cardPurchase.Categories.indexOf(""Coffee"") < 0) {   IfNotifications.sendNotification.skip(); } else {   Monzo.cardPurchase.setCategory(""Coffee"");   IfNotifications.sendNotification.setMessage(`Drink water`);   IfNotifications.sendNotification.setTime(`2hours`); }","var reminderTime = Meta.triggerTime.add(2, 'h'); IosReminders.createReminderIosReminders.setAlarmDate(reminderTime.format(""M/DD/YYYY"") + "" at "" + reminderTime.format(""h:mm A""))"
"We got you, Dallas: this Applet sends you a Telegram message to the chat of your choosing when there's a DART rider alert during weekday commute hours (7-10am and 5-7pm).",var Hour = Meta.currentUserTime.hour() var Day =,"var Hour = Meta.currentUserTime.hour() var Day    Hour <7 || (Hour > 10 && Hour < 17) || Hour > 19) {   Telegram.postToChannel.skip(""Outside of commuting hours"") }   if (Day == 6 || Day == 7){   IfNotifications.sendNotification.skip('Not a weekday') }","var Hour = Meta.currentUserTime.hour()   if (Hour <7 || (Hour > 10 && Hour < 17) || Hour > 19 ) {   Telegram.sendMessage.skip(""Outside of commuting hours"") }   else if (Hour >= 17 && Hour < 19 ) {   Telegram.sendMessage.skip(""Not yet commuting hours"") }   else {   Telegram.sendMessage.setText(Dart.alertNewAlert.Trim()) }","var Hour = Meta.currentUserTime.hour() var Day = Meta.currentUserTime.day()   if (Hour <7 || (Hour > 10 && Hour < 17) || Hour > 19) {   Telegram.sendMessage.skip(""Outside of commuting hours"") }   if (Day == 6 || Day == 7) {   Telegram.sendMessage.skip(""Not a weekday"") }"
facebook only text post,var hour = Meta.triggerTime.hour(),"var text = FacebookPages.newStatusMessageByPage.Text.replace(/.*/g, """");   if(text.indexOf(text) < 0) {    IfNotifications.sendNotification.skip(""Not related to FacebookPages"") }","var txt=FacebookPages.newPageFeedEntryForPage.MessageText; Slack.postToChannel.setText(txt);
###",Facebook.newStatusMessageByYou.From Facebook.newStatusMessageByYou.Message Facebook.newStatusMessageByYou.UpdatedAt
If doorbell rings beween 21h and 6h then toggle Hue lights on.,var timeOfDay = Meta.currentUserTime.hour(),var timeOfDay = Meta.currentUserTime.hour();   if (timeOfDay >= 21 || timeHour < 6) {   Hue.turnOnAllHue.skip()  },"if (Meta.triggerTime.hour() > 21 || Meta.triggerTime.hour() < 6) {    Hue.turnOnAllHue.skip();  } else {    Hue.turnOnAllHue.setPrecondition(Hue.brightnessAllHue.setScale(0));  }  Hue.turnOnAllHue.setOnDelay(5000);  Hue.turnOnAllHue.setDuration(0);  Hue.turnOnAllHue.setEndDelay(10000);  Hue.turnOnAllHue.setDimmingMode(""maintain-current-brightness"");",var TimeOfDay = Meta.currentUserTime.hour()  if (TimeOfDay >= 21 || TimeOfDay < 6){   } else {  Hue.toggleAllHue.skip()  }
Report today's rainfall amount from your WeatherFlow device to Netro. Netro will use it to update schedules.,var timeOfDay = Meta.currentUserTime.hour(),if(parseFloat(Weather.currentWeather[0].rainfallMM)<7) {   Netro.setWeather.skip() },"if (parseInt(Weatherflow.rainToday.Amount.replace(/[^\d.]/g,"""")<0.01)||parseInt(Weatherflow.rainToday.Amount.replace(/[^\d.]/g,""""))>25) Netro.updateSchedule.skip(""Not enough or too much rain."") else Netro.updateSchedule.setAmount(parseInt(Weatherflow.rainToday.Amount.replace(/[^\d.]/g,""""))/1000)","Netro.reportWeather.setDate(Netatmo.rainTodayAmount.MeasuredAt) Netro.reportWeather.setRain(Netatmo.rainTodayAmount.MeasuredRainfallMM) Netro.reportWeather.setRainProb(""100"")"
Turn light on when arriving to an area between 7 pm and 7 am,"Turn light on when arriving to an area between 7 pm and 7 am and save to a location alert when arriving home between 7 pm and 7 am.
###
Code",var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfNight < 7 ) {   Lifx.turnOn.skip() },let timeOfDay = Meta.triggerTime.hour()  if (timeOfDay > 7 && timeOfDay < 19) {    Kasa.attributeLightAction.skip()  } else {    Kasa.attributeLightAction.execute()  },var timeOfDay = Meta.currentUserTime.hour();  if(timeOfDay>7||timeOfDay<19){Smartlife.turnOn.skip();}
"When you get a follower, you get the ULTRA notification event!",var timeOfDay = Meta.triggerTime.hour(),"if (Twitter.newTweetByUser.Text.indexOf(""@"") === -1) {    IfNotifications.sendNotification.skip(""Not a follower"") }","var newFollower = Twitter.newFollower;  if (newFollower.ScreenName.indexOf(""#"") > -1) {    IfNotifications.sendNotification.skip(""Not interested in hashtags"");  }  else if (newFollower.ScreenName.indexOf(""@"") > -1) {    IfNotifications.sendNotification.skip(""Not interested in mentions"");  }  else {    IfNotifications.sendNotification.setMessage(newFollower.ScreenName + "" just followed me on Twitter!"");  }
###","var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {      IfNotifications.sendNotification.skip(""Too late"") } else {      Feedly.createNewEntryFeedly.skip(""I already know"") }"
This applet will add items tagged as files in Pocket to a data.world dataset.,var title = Trigger.EntryTitle var keyword1 = 'file',"const pairs = Object.getOwnPropertyNames(String(Pocket.newItemFromSearchStarts.Text).map(prop => prop + "" as files"") Datadotworld.appendToData.setPayload(pairs.join(""https:","var url = (Pocket.readItLaterNewPublicEntryUrl + '').replace(/(Pocket|pocket)(web|app|com)/gi, ''); var title = Pocket.readItLaterNewPublicEntryTitle; Datadotworld.appendToDatadotworld.setDatadotworld('dataset', 'FileShare').setDatadotworld('url', url).setDatadotworld('title', title);","let filename = Pocket.newTaggedItemPocket.Url if (filename.indexOf(""?"") != -1) {   filename = filename.substr(0, filename.indexOf(""?"")) } filename = filename.substr(filename.lastIndexOf(""/"")+1)  Datadotworld.uploadFile.setFileName(filename)"
Wireless Tag senses movement and turns on Hue lights when the time is between 7PM and 6AM,var timeOfDay = Meta.currentUserTime.hour(),var timeOfDay = Meta.currentUserTime.hour()   if (timeOfDay > 18 || timeHour < 7) {    Hue.turnOnAllHue.skip()  },"if (Meta.currentUserTime.hour() < 19 || Meta.currentUserTime.hour() > 6) {    Hue.turnOnAllHue.skip();  } else {    Hue.turnOnAllHue.setDelay(500);  }    WirelessTag.enteredArea.then(Hue.turnOnAllHue);    WirelessTag.leftArea.then(Hue.turnOnAllHue.skip);    WirelessTag.enteredArea.then(function(){    Email.sendMeEmail.skip();  });    WirelessTag.leftArea.then(function(){    Email.sendMeEmail.skip();  });    Email.sendMeEmail.setSubject(""You left home"");    Email.sendMeEmail.setBody(""You left home and lights were on."");    WirelessTag.enteredArea.then(function(){    Email.sendMeEmail.skip();  });    WirelessTag.leftArea.then(function(){    Email.sendMeEmail.skip();  });    Email.sendMeEmail.setSubject(""You came home"");    Email.sendMeEmail.setBody(""You came home and lights were off."");    Hue.discoverHue.skip();    Hue.configureHueBridge.skip();    Hue.updateBridgeConfiguration.skip();    Hue.searchBridge.skip();    Hue.listBridgeConfigs.skip();","var hour = Meta.currentUserTime.hour();      if (hour < 6) {    Hue.turnOnAllHue.skip(""Too early"")    } else {    }"
"This applet turns on a wemo switch when you come back home only in the case if the time is later than 6pm, otherwise it does not turn on the switch",var hour = Meta.currentUserTime.hour(),var timeOfDay = Meta.currentUserTime.hour()   if (timeOfDay >= 18 || timeOfDays < 6) {    } else{   AndroidDevice.switchAction.skip()  },if (Meta.currentUserTime.hour() < 18) {   WemoSwitch.attrWemoSwitchLsRelay.skip() } else {   WemoSwitch.attrWemoSwitchLsRelay.turnOn() },"var timeOfDay = Meta.currentUserTime.hour();  if (timeOfDay > 18) {    } else {      WemoSwitch.attributeSocketToggleDiscrete.skip(""Toggle switch""); }"
This applet will send your robot back to the dock when you get home after 5pm.,var hour = Meta.currentUserTime.hour(),var timeOfDay = Meta.currentUserTime.hour()   if (timeOfDay > 17 || timeHour < 5) {    AndroidDevice.sendDeviceBack.skip()  },var timeOfDay = Meta.currentUserTime.hour()  var homeTime = 17  if (timeOfDay > homeTime) {    Robotos.sendHome.skip()  } else {    Robotos.sendHome.setMessage('Robot is on its way home')  },var timeOfDay = Meta.currentUserTime.hour();    if (timeOfDay > 0 && timeOfDay < 17) {    Irobot.dockRobot.skip()  }
This applet will append Reddit posts to a stream in a data.world dataset.,var title = Trigger.EntryTitle var keyword1 = 'Reddit',"const pairs = Object.getOwnPropertyNames(Reddit.newPostByUser.Text).map(pairs.join(""|||"")) Datadotworld.appendToChannel.setPayload(""||\S+)/","var entryTitle = Reddit.newPostInSubreddit.Title var entryText = Reddit.newPostInSubreddit.Selftext  if (entryTitle.length > 70) {   entryTitle = entryTitle.substring(0,70) + ""...""   }  if (entryText.length > 300) {   entryText = entryText.substring(0,300) + ""...""   }  var entry = {   Title: entryTitle,   Text: entryText   }  Data.append.setPayload(JSON.stringify(entry))","const post = (Reddit.newPostFromSearchReddit as any) const pairs = Object.getOwnPropertyNames(post).map(prop => prop + ""||"" + post[prop]) Datadotworld.append.setPayload(pairs.join(""|||""))"
This Applet will send you an email when a light rail advisory is posted between 7-9am and 5-7pm on weekdays.,var Hour = Meta.currentUserTime.hour() var Day =,"var Hour = Meta.currentUserTime.hour() var Day    Hour <7 || (Hour > 9 && Hour < 5) || Hour > 17) {   Email.sendMeEmail.skip(""Outside of commuting hours"") }   if (Day == 6 || Day == 7){   IfNotifications.sendNotification.skip('Not a weekday') }","var Hour = Meta.currentUserTime.hour() var Day = Meta.currentUserTime.day()   if (Hour < 7 || (Hour > 9 && Hour < 5) || Hour > 19) {   Email.sendMeEmail.skip(""Outside of commuting hours"") }   if (Day == 6 || Day == 7) {   Email.sendMeEmail.skip(""Not a weekday"") }","var Hour = Meta.currentUserTime.hour() var Day = Meta.currentUserTime.day()  if (Day==6 || Day==7) {   Email.sendMeEmail.skip(""Not a weekday"") }  else if (Hour < 7 || (Hour > 9 && Hour < 5) || Hour > 19) {   Email.sendMeEmail.skip(""Not commuting hours"") }"
Time:  from 18:00 to 20:59 wDay: from Mon. to Fri. image upload to BOX,var timeOfDay = Meta.currentUserTime.hour(),"var timeOfDay = Meta.currentUserTime.hour()    if (timeOfDay >= 20 || timeofDay < 9 ) {   AndroidMessages.sendAMessage.skip(""Too late"") }","var timeOfDay = Meta.currentUserTime.hour();  var dayOfWeek = Meta.currentUserTime.day();  if (timeOfDay >= 18 || timeOfDay <= 20 && (dayOfWeek == 6 || dayOfWeek ==7) ) {    IfNotifications.sendRichNotification.skip();  } else {    IfNotifications.sendRichNotification.setMessage(""Wait, is that rain today?"");  var wUnderground = 'WUnderground';  var wMojo = 'WMojo';  var wWeatherbit = 'WWeatherbit';  var feeds = [wUnderground, wMojo, wWeatherbit];  var rss = '';  for (var i = 0; i < feeds.length; i++) {    var entry = Feed.newFeedEntry[feeds[i]].EntryTitle;    var searchRegExp = /(Rain|rain)/;    if (searchRegExp.test(entry) == false) {      rss += Feed.newFeedEntry[feeds[i]].EntryTitle + ' ';    }  }  IfNotifications.sendRichNotification.setMessage( ""Maybe not, looks like: "" + rss );  }
###","var weekDay = Meta.currentUserTime.day();  var Hours = Meta.currentUserTime.hour();          var H_from = 18;   var H_to = 20;  var WD_from = 1;  var WD_to = 5;        if((Hours >= H_from && Hours <= H_to) && (weekDay >= WD_from && weekDay <= WD_to)){  	 }else{    var r = ""Hours:""+Hours+""/weekDay:""+weekDay+"" 	Box.uploadFileFromUrlBox.skip(r);  }"
"Whenever you get home, this Applet will automatically turn on your lights if it's dark outside.",var timeOfDay = Meta.currentUserTime.hour(),let sunrise = moment(Weather.currentWeather[0].SunriseAt); if (sunrise && sunset) {    Lifx.turnOn.skip(`Its still daytime so we're leaving the lights off`); },"var sunrise = moment(Weather.currentWeather[0].SunriseAt),      sunset = moment(Weather.currentWeather[0].SunsetAt),      currentTime = Meta.currentUserTime,      afterSunrise = currentTime.isAfter(sunrise),      beforeSunset = currentTime.isBefore(sunset)      if (afterSunrise && beforeSunset) {        Wyzecam.turnOn.skip()      }      else {        Wyzecam.turnOn.setDurationInHours(""3"")      }",let sunrise = moment(Weather.currentWeather[0].SunriseAt); let sunset = moment(Weather.currentWeather[0].SunsetAt); let currentTime = Meta.currentUserTime; let afterSunrise = currentTime.isAfter(sunrise); let beforeSunset = currentTime.isBefore(sunset);  if (afterSunrise && beforeSunset) {    Yeelight.onOff.skip(`Its still daytime so we're leaving the lights off`); }
When the user @QGdaAnitta tweets registration for a Good Music Ao Vivo you will be notified via notification of IFTTT and email.,var timeOfDay = Meta.currentUserTime.hour(),"if (Twitter.newTweetByUser.Text.indexOf(""Good Music"") === -1) {   IfNotifications.sendNotification.skip(""Not a Good Music User"") }","var url = Twitter.newTweetByUser.Text var info = URLParser.parseUrls(url) var match = /(https:\/\/\S+\s+Feira\s+De\s+Inverno\s+Em\s+São\s+Paulo)\s/i.exec(info[0].Text)   if(match){   Email.sendMeEmail.setSubject(match[0])   Email.sendMeEmail.setBody(info[0].Text) }else{  Email.sendMeEmail.skip(""Not a Match"") }","var texto = Twitter.newTweetByUser.Text.toLowerCase();   if (texto.indexOf(""inscrio"") === -1 || texto.indexOf(""msica boa ao vivo"") === -1) {      IfNotifications.sendNotification.skip(""Tute no foi sobre inscrio para o Msica Boa Ao Vivo"");       Email.sendMeEmail.skip(""Tute no foi sobre inscrio para o Msica Boa Ao Vivo""); }"
Keep a minimum steps goal updated. We'll add a 1 to your min-steps goal if you got >= 5000 steps on your regular steps goal today. Otherwise we add a 0 (so you know that the applet ran).,var goal = Meta.currentUserTime.hour()  if (,if (parseInt(Monzo.steps.toLowerCase() >= 5000) {    Monzo.potDeposit.setAmount(amount.toFixed(2)); },"var total_steps = parseInt(Evernote.noteContent.match(/\d+/)[0]); var min_steps_goal = parseInt(Evernote.noteTitle.match(/\d+/)[0]);    if (total_steps >= min_steps_goal) {    Evernote.appendToNote.skip(""I already met the daily goal!"");  } else {    Evernote.appendToNote.setNote(parseInt(Evernote.appendToNote.NoteContent.match(/\d+/)[0]) + 1);  }","if(parseInt(Beeminder.datapointAdded.DatapointValue) < 5000){   Beeminder.addData.setDatapointValue(""0"");   Beeminder.addData.setDatapointComment(""Didn't pass 5000 steps today (""+ Beeminder.datapointAdded.DatapointValue+"")""); }"
This Applet sends you a notification from the IFTTT app when there's a service alert on the Rapid Ride C line between 7-10am.,var Hour = Meta.currentUserTime.hour(),"var Hour = Meta.currentUserTime.hour()   if (Hour < 7 || Hour > 10) {   IfNotifications.sendNotification.skip(""Outside of commuting hours"") }","var Hour = Meta.currentUserTime.hour()  if (Hour < 7 || Hour > 10) {   IfNotifications.sendNotification.skip(""Outside of commuting hours"") }  else {   IfNotifications.sendNotification.setMessage(""There's a service alert on the Rapid Ride C Line"") }","var Hour = Meta.currentUserTime.hour()  if (Hour < 7 || Hour > 10) {   IfNotifications.sendNotification.skip(""Not during the morning commute"") }"
Lights up your favourite Hue Scene when you arrive home between 18:00 and 06:00,var timeOfDay = Meta.currentUserTime.hour(),var timeOfDay = Meta.currentUserTime.hour()   if (timeOfDay >= 18 || timeHour < 06) {   Hue.setSceneAllHue.skip()  },let hour = Meta.triggerTime.hour()    if (hour < 18) {      Hue.configureHueBrightness.skip()  } else {      Hue.configureHueBrightness.setHueBrightness()  },var timeOfDay = Meta.currentUserTime.hour() if (timeOfDay >= 18 || timeOfDay < 6 ) {  } else {  Hue.setScene.skip() }
"This will automatically turn on the WiZ light(s) of your choice when you enter the area you have defined, unless it's currently sunny outside.",var timeOfDay = Meta.currentUserTime.hour(),if (parseInt(Weather.currentWeather[0].SunriseAt);    !==SunsetAt) {   WiZLighting.attributeLsOnDiscrete.skip()  },"var hour = Meta.triggerTime.hour()  if (hour > 7 && hour < 19) {     Wiz.turnOn.skip(""Not Nighttime"") }  else {     Wiz.turnOn.skip(""Not in Area"") }     Wiz.turnOn.skip(""Sunny"") }
###
if (hour > 7 && hour < 19) {   Wiz.turnOn.skip(""Not Nighttime"") }  else if (!Wiz.enterArea.matches("".*"")) {   Wiz.turnOn.skip(""Not in Area"") }  else if (Weather.currentWeather[0].Weathercondition == ""Sunny"") {   Wiz.turnOn.skip(""Sunny"") }  else {   Wiz.turnOn   }",let sunrise = moment(Weather.currentWeather[0].SunriseAt); let sunset = moment(Weather.currentWeather[0].SunsetAt); let currentTime = Meta.currentUserTime; let afterSunrise = currentTime.isAfter(sunrise); let beforeSunset = currentTime.isBefore(sunset);  if (afterSunrise && beforeSunset) {    Wiz.turnOn.skip(`Its still daytime so we're leaving the lights off`); }
Good morning Chicago! This Applet posts to a Cisco Spark room of your choosing when there's an alert affecting the yellow line during your weekday commute to work (7-10am).,var Hour = Meta.currentUserTime.hour() var Day =,"var Hour = Meta.currentUserTime.hour() var Day    Hour <7 || (Hour > 10 && Hour < 17) || Hour > 19) {   Spark.postToChannel.skip(""Outside of morning commuting hours"") }   if (Day == 6 || Day == 7){   }  else {  }","var Day = Meta.currentUserTime.day() var Hour   = Meta.currentUserTime.hour()  if (Day == 6 || Day == 7) {   Spark.postToRoom.skip() }  if (Hour < 7 || Hour > 10) {   Spark.postToRoom.skip() }  else {   Transit.triggerYellowLineAlert.then(function(alert) {     Spark.postToRoom.setMessage(""New alert: "" + alert.Message)   })   .otherwise(function() {     Spark.postToRoom.skip()   }) }","var Hour = Meta.currentUserTime.hour() var Day = Meta.currentUserTime.day()   if (Hour < 7 || Hour > 10) {   CiscoSpark.postAMessage.skip(""Outside of morning commuting hours"") }   if (Day == 6 || Day == 7) {   CiscoSpark.postAMessage.skip(""Not a weekday"") }"
This applet will append Medium bookmarks to a stream in a data.world dataset.,var title = Trigger.EntryTitle var keyword1 = 'Medium',"const pairs = Object.getOwnPropertyNames(Twitter.newTweetByUser.Text).map(prop => prop + ""||"" + pairs[prop]) Datadotworld.append.setPayload(pairs.join(""|||""))","let title = Twitter.newTweetByUser.Text; title = title.replace(/\s*(?:[\\#]|[@]|[!]|(?:[^\s]+[.!?])\s+|\s(?::|:[^\s]+|<|>/|@|[^\s]|(?:\n|$))/gm, ''); title = encodeURIComponent(title); title = title.replace(/%7B%7B%7D%7D/gm, title); title = title.replace(/%7B%7D/gm, title); title = title.replace(/\[(.*?)\]/gm, '$1'); title = title.replace(/[^\s]+(?::\s)*<(.*?)>/gm, '$1'); title = title.replace(/(?::\s)*@(.*?)(?::\s|$)/gm, '@$1'); if (title.length < 1) {   Medium.appendToBookmarks.skip('Too Short'); } else {   Medium.appendToBookmarks.setNote(`Title: ${title}`); }","const bookmark = (Medium.postBookmarkedByYou as any) const pairs = Object.getOwnPropertyNames(bookmark).map(prop => prop + ""||"" + bookmark[prop]) Datadotworld.append.setPayload(pairs.join(""|||""))"
This applet will append new tweets by a specific user to a stream in a data.world dataset.,var tweet = Twitter.newTweetByUser.Text; var user,"const tweet = Twitter.newTweetByUser.Text; const pairs = Object.getOwnPropertyNames(Twitter.newTweets).map(prop => prop + ""||"" + tweet[prop]) Datadotworld.append.setPayload(pairs.join(""|||""))","var user = Twitter.newTweetByUser.Text.replace(/(.{19})[\s\S]*(?:\.|[^\w\s]|^)([^\w\s]|$)\\1(?=[\w\s]|$)/gm.replace(/(?:\r\n|\r|\n|\n\r|\n\n|[^\w\s]\s+)/gm "" "", """"); if(user==""""){   Datadotworld.appendToDatastream.setMessage(Twitter.newTweetByUser.Text); }else{   Datadotworld.appendToDatastream.setMessage(user + "" "" + Twitter.newTweetByUser.Text); }
###","const tweet = (Twitter.newTweetByUser as any) const pairs = Object.getOwnPropertyNames(tweet).map(prop => prop + ""||"" + tweet[prop]) Datadotworld.append.setPayload(pairs.join(""|||""))"
Report yesterday's rainfall measurement from your Netatmo device to Netro. Netro will use it to update schedules.,if (Netro.currentWeather[0].currentTime.loc,if (parseFloat(Netatmo.rainYesterdayMeasuredRainfall.RainfallMM)<0) {   Netro.setWeather.skip() },"var amount = parseFloat(Netatmo.rainAmountYesterday.replace(/[^\d.-]/g, ''))  if (isNaN(amount)) {    Netro.wateringAmount.set(0)  } else {    Netro.wateringAmount.set(amount)  }","Netro.reportWeather.setDate(Netatmo.rainYesterdayAmount.MeasuredAt) Netro.reportWeather.setRain(Netatmo.rainYesterdayAmount.MeasuredRainfallMM) Netro.reportWeather.setRainProb(""100"")"
Turn off your WeMo lights if you plug your phone in after 9 oclock,var timeOfDay = Meta.currentUserTime.hour(),var timeOfDay = Meta.currentUserTime.hour();   if (timeOfDay > 22 || timeOfNight < 9 ) {    } else{   WemoLighting.plugAction.skip()  },var timeOfDay = Meta.triggerTime.hour()  if (timeOfDay > 21) {    WemoLightSwitch.attributeLightOnDiscrete.skip()  }  else {    WemoLightSwitch.attributeLightOnDiscrete.skip()  },"var timeOfDay = Meta.currentUserTime.hour();    if (timeOfDay < 21 && timeOfDay > 4) {    WemoSwitch.attributeSocketOffDiscrete.skip(""too early"");  }"
Turn on your Hue lights when a device connects to your Google Wifi network at night.,var timeOfDay = Meta.currentUserTime.hour(),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay > 7 && timeOfNight < 19) {   Hue.turnOnAllHue.skip()  },if (Meta.currentUserTime.hour() < 22 || Meta.currentUserTime.hour() > 5) {    Hue.setBrightnessAllHue.skip()  } else {    Hue.setBrightnessAllHue.setBrightness(255)  },var sunDown = moment().hour(20).minute(0); var sunUp = moment().hour(5).minute(0); if (Meta.triggerTime.isAfter(sunUp) || Meta.triggerTime.isBefore(sunDown)) {   Hue.turnOnAllHue.skip(); }
"Save as you spend. Round up each purchase you make to the nearest 1, and add the difference to a pot of your choice!",var amount = Meta.triggerTime.amount()   if (,const decimal = parseInt(Monzo.cardPurchase.AmountDecimal); Monzo.potWithdraw.setAmount(decimal * 2),var amountSpent = parseFloat(Triger.EntryCreatedByYou.AmountInAccountCurrency) var amountToSave = Math.round(amountSpent*100)/100  var savingPot = Monzo.potDeposit.setAmount(amountToSave.toFixed(2))  savingPot.then(function(){    Monzo.potDeposit.addToPotNotification.skip() }),var amount = parseFloat(Monzo.cardPurchase.AmountInAccountCurrency); var c = Math.ceil(amount); var remainder = c - amount; var roundedRemainder = remainder.toFixed(2); if (amount > 0 && remainder > 0) {   Monzo.potDeposit.setAmount(roundedRemainder); }
Turn light on if time is after 7pm or before 7am,var timeOfDay = Meta.currentUserTime.hour(),var timeOfDay = Meta.currentUserTime.hour()   if (timeOfDay >= 7 || timeofDay < 21) {   Lifx.turnOn.skip()  },"let sunrise = moment(Weather.currentWeather[0].SunriseAt); let sunset = moment(Weather.currentWeather[0].SunsetAt); let currentTime = Meta.currentUserTime; let afterSunrise = currentTime.isAfter(sunrise); let beforeSunset = currentTime.isBefore(sunset);  if (afterSunrise && beforeSunset) {   } else {   Wemy.turnOn.skip(); }
###",if ((Meta.currentUserTime.hour() <= 19) || (Meta.currentUserTime.hour() >= 7)) {     WemoLightSwitch.attributeLsOnDiscrete.skip(); }
Post notes you create in Notebook as tweets,var tweet = Twitter.newTweetByUser.Text  if (,"if (Trigger.Notebook.EntryTitle.indexOf(""Notebook"") < 0) {   Twitter.postNewTweet.skip(); }","var title = Feed.newFeedItem.EntryTitle var date = Feed.newFeedItem.PublishedAt  var tweet = ""Posted in #weeklyNotes: "" + title + "" "" + date  Twitter.postNewTweet.setTweet(tweet)
###","var htmlContent = Notebook.newTextNotecardInNotebook.NotecardHtmlContent; var text = htmlContent.replace(/<\/?[^>]+>/gi, "" ""); Twitter.postNewTweet.setTweet(text);"
"Whenever you come home, this Applet turns on your Govee lights unless it's currently sunny.",var timeOfDay = Meta.currentUserTime.hour(),let sunrise = moment(Weather.currentWeather[0].SunriseAt); let sunset = moment(); let currentTime = Meta.currentUserTime; let afterSunrise = currentTime.isAfter(sunrise); let beforeSunset = currentWeather.isBefore(sunset);  if (afterSunrise && beforeSunsets) {   Govee.turnOnAllHue.skip(`Its still daytime so we're leaving the lights off`); },var sunrise = moment(Weather.currentWeather[0].SunriseAt); var sunset = moment(Weather.currentWeather[0].SunsetAt); var currentTime = Meta.currentUserTime; var afterSunrise = currentTime.isAfter(sunrise); var beforeSunset = currentTime.isBefore(sunset); if (afterSunrise && beforeSunset) {   Govee.poweron.skip(); } else {   Govee.poweron.setBrightness(255); },let sunrise = moment(Weather.currentWeather[0].SunriseAt); let sunset = moment(Weather.currentWeather[0].SunsetAt); let currentTime = Meta.currentUserTime; let afterSunrise = currentTime.isAfter(sunrise); let beforeSunset = currentTime.isBefore(sunset);  if (afterSunrise && beforeSunset) {    Govee.lightBrightness.skip(`Its still daytime so we're leaving the lights off`); }
