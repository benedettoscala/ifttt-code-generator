permission_df,filter_code
if New pink line alert (trigger_service: Chicago Transit Authority) then Post to channel (action_service: Slack),var Hour = Meta.currentUserTime.hour() var Day = Meta.currentUserTime.day()
if New bus advisory (trigger_service: NJ Transit) then Send a notification from the IFTTT app (action_service: Notifications),"var Hour = Meta.currentUserTime.hour() var Day = Meta.currentUserTime.day()  if (Day==6 || Day==7) {   IfNotifications.sendNotification.skip(""Not a weekday"") }  else if (Hour < 7 || (Hour > 9 && Hour < 5) || Hour > 19) {   IfNotifications.sendNotification.skip(""Not commuting hours"") }"
if New DART rider alert (trigger_service: DART) then Send a notification from the IFTTT app (action_service: Notifications),var Hour = Meta.currentUserTime.hour() var Day = Meta.currentUserTime.day()
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),"if (Twitter.newTweetByUser.Text.indexOf(""SNES"") < 0   && Twitter.newTweetByUser.Text.indexOf(""Super NES"") < 0   && Twitter.newTweetByUser.Text.indexOf(""Super Nintendo"") < 0) {     IfNotifications.sendNotification.skip() }"
if New feed item (trigger_service: RSS Feed) then Post a tweet (action_service: Twitter),"if(Feed.newFeedItem.EntryContent.indexOf(""@"") > 0)  {    Twitter.postNewTweet.skip();  }"
if Any card purchase (trigger_service: Monzo) then Move money out of a pot (action_service: Monzo),"if ( Monzo.cardPurchase.Category == ""Transport"" ) {    Monzo.potWithdraw.setAmount(Monzo.cardPurchase.AmountInAccountCurrency)  } else {    Monzo.potWithdraw.skip(""Not a Transport Purchase"")  }"
if Any card purchase (trigger_service: Monzo) then Move money out of a pot (action_service: Monzo),"if ( Monzo.cardPurchase.Category == ""Entertainment"" ) {    Monzo.potWithdraw.setAmount(Monzo.cardPurchase.AmountInAccountCurrency)  } else {    Monzo.potWithdraw.skip(""Not an Entertainment Purchase"")  }"
if Any card purchase (trigger_service: Monzo) then Move money out of a pot (action_service: Monzo),"if ( Monzo.cardPurchase.Category == ""Eating Out"" ) {    Monzo.potWithdraw.setAmount(Monzo.cardPurchase.AmountInAccountCurrency)  } else {    Monzo.potWithdraw.skip(""Not an Eating Out Purchase"")  }"
if Any card purchase (trigger_service: Monzo) then Move money out of a pot (action_service: Monzo),if (Monzo.cardPurchase.AccountCurrencyCode == Monzo.cardPurchase.LocalCurrencyCode) {   Monzo.potWithdraw.skip(); }  Monzo.potWithdraw.setAmount(Monzo.cardPurchase.AmountInAccountCurrency)
if Any card purchase (trigger_service: Monzo) then Move money out of a pot (action_service: Monzo),var Merchant = Monzo.cardPurchase.MerchantName  var Currency = Monzo.cardPurchase.LocalCurrencyCode  var ForeignMerchants = ['atm'];  var CurrencyCode = ['gbp'];
if Every day at (trigger_service: Date & Time) then Move money into a pot (action_service: Monzo),
if Any card purchase (trigger_service: Monzo) then Move money into a pot (action_service: Monzo),var amount = parseFloat(Monzo.cardPurchase.AmountInAccountCurrency); var c = Math.ceil(amount); var remainder = c - amount; var roundedRemainder = remainder.toFixed(2); if (amount > 0 && remainder > 0) {   Monzo.potDeposit.setAmount(roundedRemainder); }
if Any card purchase (trigger_service: Monzo) then Move money into a pot (action_service: Monzo),var amount = parseFloat(Monzo.cardPurchase.AmountInAccountCurrency); var remainder = (Math.ceil(amount*2)/2) - amount var roundedRemainder = remainder.toFixed(2); if (amount > 0 && remainder > 0) {   Monzo.potDeposit.setAmount(roundedRemainder); }
if Any card purchase (trigger_service: Monzo) then Move money into a pot (action_service: Monzo),"var saveAmount = 10 - parseInt(Monzo.cardPurchase.AmountInAccountCurrency.slice(-1))  Monzo.potDeposit.setAmount(""0.0"" + saveAmount.toString())"
if Every day at (trigger_service: Date & Time) then Move money into a pot (action_service: Monzo),var day_of_year = Meta.currentUserTime.format('DDD'); var amount = parseInt(day_of_year) / 100; Monzo.potDeposit.setAmount(amount.toFixed(2));
if New activity by you (trigger_service: Strava) then Move money out of a pot (action_service: Monzo),var distance = parseInt(Strava.newActivityByYou.DistanceMeters); var amount = distance/1000; Monzo.potWithdraw.setAmount(amount.toFixed(2));
if Card Spend Authorised (trigger_service: RoosterMoney) then Pot to pot transfer (action_service: RoosterMoney),const decimal = parseFloat(Roostermoney.cardSpend.SpendAmountDecimal); const rounded = Math.ceil(decimal * 10) / 10; const roundUp10p = ((rounded * 100) - (decimal * 100)) / 100; Roostermoney.transfer.setAmount(`${roundUp10p}`);
if New transfer (trigger_service: Stripe) then Move money into a pot (action_service: Monzo),Monzo.potDeposit.setAmount(String(parseFloat(Stripe.newTransfer.Amount) / 2))
if Current condition changes to (trigger_service: Weather Underground) then Change color (action_service: Philips Hue),let currentHour = Meta.currentUserTime.hour(); var day = Meta.currentUserTime.weekday();  if (currentHour < 5 || currentHour >= 9) {   Hue.setColorAllHue.skip()   IfNotifications.sendNotification.skip(); }  else if (day == 0) {
if New metro alert from King County Metro (trigger_service: King County Metro) then Post to channel (action_service: Slack),var Hour = Meta.currentUserTime.hour()
if New service alert on Rapid Ride A line (trigger_service: King County Metro) then Send me an email (action_service: Email),var Hour = Meta.currentUserTime.hour()
if New service alert on Rapid Ride C line (trigger_service: King County Metro) then Send a notification from the IFTTT app (action_service: Notifications),"var Hour = Meta.currentUserTime.hour()  if (Hour < 7 || Hour > 10) {   IfNotifications.sendNotification.skip(""Not during the morning commute"") }"
if New service alert on Rapid Ride E line (trigger_service: King County Metro) then Send a notification from the IFTTT app (action_service: Notifications),var Hour = Meta.currentUserTime.hour()
if New service alert on Rapid Ride B line (trigger_service: King County Metro) then Send me an SMS (action_service: SMS),var Hour = Meta.currentUserTime.hour()
if New service alert on Rapid Ride D line (trigger_service: King County Metro) then Post to channel (action_service: Slack),var Hour = Meta.currentUserTime.hour()
if Disconnects from a Bluetooth device (trigger_service: Android Device) then Set ringtone volume (action_service: Android Device),"if (Trigger.DeviceName.indexOf(""Gear"") == -1) {AndroidDevice.setDeviceVolume.skip(""Déconnection non due à la montre"")}"
if Event from search starts (trigger_service: Google Calendar) then Set thermostat comfort profile until next transition (action_service: ecobee),"if (GoogleCalendar.eventFromSearchStarts.Title.toUpperCase() != ""WORK"") {   Ecobee.climateNextTransition.skip() }"
if New tweet by a specific user (trigger_service: Twitter) then Save for later (action_service: Pocket),var linkRegex = /newsletter.*(https:\/\/\S+)/ var matchResult = linkRegex.exec(Twitter.newTweetByUser.Text);  if (matchResult && matchResult.length === 2) {   Pocket.readItLater.setUrl(matchResult[1]); } else {   Pocket.readItLater.skip('Likely not Money Stuff'); }
if Any card purchase at a merchant (trigger_service: Monzo) then Send a rich notification from the IFTTT app (action_service: Notifications),"var format = 'hh:mm:ss'    var beforeTime = moment('11:30:00', format);  var afterTime = moment('13:30:00', format);    if (Meta.triggerTime.isBetween(beforeTime, afterTime) && Meta.triggerTime.isoWeekday() < 6) {    var PMT = parseFloat(Monzo.cardPurchaseWithMerchant.AmountInAccountCurrency) * 20;    var r = 0.07;    var n = 12;    var t = 10;    var amount = PMT * ((Math.pow((1 + r/n),(n*t)) - 1) / (r/n)) * (1+r/n)    var url = ""https:"
if Any card purchase at a merchant (trigger_service: Monzo) then Send a rich notification from the IFTTT app (action_service: Notifications),"var format = 'hh:mm:ss'    var beforeTime = moment('11:30:00', format);  var afterTime = moment('13:30:00', format);    if (Meta.triggerTime.isBetween(beforeTime, afterTime) && Meta.triggerTime.isoWeekday() < 6) {    var amount = parseFloat(Monzo.cardPurchaseWithMerchant.AmountInAccountCurrency) * Math.pow(1.000191780821917808,3650);    var url = ""https:"
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if Any new note (trigger_service: Note widget) then Log sleep (action_service: iOS Health),"var values = DoNote.doNoteNewCommandCommon.NoteText.split("" "", 2) if (values.length > 1) {   IosHealth.logSleep.setAsleepAt(values[0])   IosHealth.logSleep.setDateSleepEnded(values[1]) } else {   IosHealth.logSleep.skip(""Enter time feel asleep and time awoke, separated by a space"") }"
if New file in your folder (trigger_service: Google Drive) then Post to channel (action_service: Slack),if (Trigger.Filename.match(/~\$/i)) {  Slack.postToChannel.skip('Temp File Was Skipped')  }
if Opened (trigger_service: SmartThings) then Call my phone (action_service: Phone Call (US only)),"var hour = Meta.currentUserTime.hour()  if (hour < 22 && hour > 6) {   PhoneCall.callMyPhone.skip(""Not during sleeping hours"") }  else{  }"
if Any new SMS received (trigger_service: Android SMS) then Post to channel (action_service: Slack),"var text = AndroidMessages.receivedAMessage.Text.replace(/잔액.*/g, """");  Slack.postToChannel.setMessage(text);"
if New story (trigger_service: Slashdot) then Send a notification from the IFTTT app (action_service: Notifications),"var title = Trigger.EntryTitle var subject = 'Ask Slashdot'  if (title.indexOf(subject) < 0) {    IfNotifications.sendNotification.skip(""Not an 'Ask Slashdot' article"") }"
if Every day of the week at (trigger_service: Date & Time) then List all tasks in a list (action_service: Google Tasks),"Slack.postToChannel.setTitle("":inbox_tray: Tasks for today"")  let message = """"; let today = Meta.currentUserTime;  GoogleTasks.listAllTasks.forEach(task => {   let task_due = moment(task.Due);   if (today.isSame(task_due, 'day')) {     message = message + `:black_square_button: *${task.Title}*\n_Notes:_ ${task.Notes}\n\n`;   } })  if (GoogleTasks.listAllTasks.length === 0) {     Slack.postToChannel.skip(); }  if (message.length === 0) {   message = ""No tasks are due today :party:"" }  Slack.postToChannel.setMessage(message);"
if New light rail advisory (trigger_service: NJ Transit) then Post to channel (action_service: Slack),"var Hour = Meta.currentUserTime.hour() var Day = Meta.currentUserTime.day()  if (Day==6 || Day==7) {   Slack.postToChannel.skip(""Not a weekday"") }  else if (Hour < 7 || Hour > 9) {   Slack.postToChannel.skip(""Not morning commute hours"") }"
if Every day of the week at (trigger_service: Date & Time) then Post to channel (action_service: Slack),
if Current temperature rises above (trigger_service: Weather Underground) then Activate Scene (action_service: Hunter Douglas PowerView),"var hour = Meta.currentUserTime.hour()     if (hour >= 8 && hour < 20) { (""Not nighttime"") }"
if New feed item (trigger_service: RSS Feed) then Send a notification from the IFTTT app (action_service: Notifications),const content = Feed.newFeedItem.EntryContent  IfNotifications.sendNotification.setMessage(   content
if New feed item (trigger_service: RSS Feed) then Send a notification from the IFTTT app (action_service: Notifications),const content = Feed.newFeedItem.EntryContent  IfNotifications.sendNotification.setMessage(   content
if New feed item (trigger_service: RSS Feed) then Send a notification from the IFTTT app (action_service: Notifications),const content = Feed.newFeedItem.EntryContent  IfNotifications.sendNotification.setMessage(   content
if New feed item (trigger_service: RSS Feed) then Send a notification from the IFTTT app (action_service: Notifications),const content = Feed.newFeedItem.EntryContent  IfNotifications.sendNotification.setMessage(   content
if New feed item (trigger_service: RSS Feed) then Send a notification from the IFTTT app (action_service: Notifications),const content = Feed.newFeedItem.EntryContent  IfNotifications.sendNotification.setMessage(   content
if New feed item (trigger_service: RSS Feed) then Send a notification from the IFTTT app (action_service: Notifications),const content = Feed.newFeedItem.EntryContent  IfNotifications.sendNotification.setMessage(   content
if Tomorrow's weather report (trigger_service: Weather Underground) then Send a notification from the IFTTT app (action_service: Notifications),if (parseInt(Weather.tomorrowsWeatherAtTime.LowTempFahrenheit) > 40) {    IfNotifications.sendNotification.skip();  }
if Today's rainfall measurement (trigger_service: Netatmo Weather Station) then do not water (action_service: Netro),if(parseFloat(Netatmo.rainTodayAmount.MeasuredRainfallMM)<5){   Netro.noWater.skip() }
if Button press (trigger_service: Button widget) then Send yourself an email (action_service: Gmail),
if Standby mode entered (trigger_service: WeMo Insight Switch) then Add row to spreadsheet (action_service: Google Sheets),"var event = 'Standby'  var sname = WemoInsightSwitch.attributeINSIGHTSTANDBYN.SwitchName  var eventAt = WemoInsightSwitch.attributeINSIGHTSTANDBYN.SwitchedToStandbyAt  var codeRanTime = Meta.currentUserTime.format('MMMM DD YYYY hh:mm:ss a')  var triggerTime = Meta.triggerTime.format('MMMM DD YYYY hh:mm:ss a')  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(sname + '|||' + event + '|||' + eventAt + '|||=DATEVALUE(SUBSTITUTE(""' + eventAt + '"","" at "","" ""))+TIMEVALUE(SUBSTITUTE(""' + eventAt + '"","" at "","" ""))|||' + codeRanTime + '|||=DATEVALUE(""' + codeRanTime + '"")+TIMEVALUE(""' + codeRanTime + '"")|||' + triggerTime + '|||=DATEVALUE(""' + triggerTime + '"")+TIMEVALUE(""' + triggerTime + '"")')"
if Switched on (trigger_service: WeMo Insight Switch) then Add row to spreadsheet (action_service: Google Sheets),"var event = 'On'  var sname = WemoInsightSwitch.attributeINSIGHTONN.SwitchName  var eventAt = WemoInsightSwitch.attributeINSIGHTONN.SwitchedOnAt  var codeRanTime = Meta.currentUserTime.format('MMMM DD YYYY hh:mm:ss a')  var triggerTime = Meta.triggerTime.format('MMMM DD YYYY hh:mm:ss a')  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(sname + '|||' + event + '|||' + eventAt + '|||=DATEVALUE(SUBSTITUTE(""' + eventAt + '"","" at "","" ""))+TIMEVALUE(SUBSTITUTE(""' + eventAt + '"","" at "","" ""))|||' + codeRanTime + '|||=DATEVALUE(""' + codeRanTime + '"")+TIMEVALUE(""' + codeRanTime + '"")|||' + triggerTime + '|||=DATEVALUE(""' + triggerTime + '"")+TIMEVALUE(""' + triggerTime + '"")')"
if Switched off (trigger_service: WeMo Insight Switch) then Add row to spreadsheet (action_service: Google Sheets),"var event = 'Off'  var sname = WemoInsightSwitch.attributeINSIGHTOFFN.SwitchName  var eventAt = WemoInsightSwitch.attributeINSIGHTOFFN.SwitchedOffAt  var codeRanTime = Meta.currentUserTime.format('MMMM DD YYYY hh:mm:ss a')  var triggerTime = Meta.triggerTime.format('MMMM DD YYYY hh:mm:ss a')  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(sname + '|||' + event + '|||' + eventAt + '|||=DATEVALUE(SUBSTITUTE(""' + eventAt + '"","" at "","" ""))+TIMEVALUE(SUBSTITUTE(""' + eventAt + '"","" at "","" ""))|||' + codeRanTime + '|||=DATEVALUE(""' + codeRanTime + '"")+TIMEVALUE(""' + codeRanTime + '"")|||' + triggerTime + '|||=DATEVALUE(""' + triggerTime + '"")+TIMEVALUE(""' + triggerTime + '"")')"
if Generate Detail Pet Activity Report (trigger_service: Link My Pet) then Quick add event (action_service: Google Calendar),var hour = Meta.triggerTime.hour()  var minute = Meta.triggerTime.minute()  var timeHour = 24    if(hour%timeHour > 0 && minute%15 > 0)    GoogleCalendar.quickAddEvent.skip()
if Generate Detail Pet Activity Report (trigger_service: Link My Pet) then Append to a text file (action_service: Dropbox),var hour = Meta.triggerTime.hour()  var timeHour = 24  var minute = Meta.triggerTime.minute()    if(hour%timeHour > 0 && minute%10 > 0 )    Dropbox.appendToTextFileDb.skip()
if Generate Detail Pet Activity Report (trigger_service: Link My Pet) then Add row to spreadsheet (action_service: Google Sheets),var hour = Meta.triggerTime.hour()  var hourString = hour.toString()        if(hour%24 > 0 )    GoogleSheets.appendToGoogleSpreadsheet.skip()
if Generate Pet Activity Report (trigger_service: Link My Pet) then Append to a document (action_service: Google Docs),var hour = Meta.triggerTime.hour()  var minute = Meta.triggerTime.minute()  var timeHour = 24    if(hour%timeHour > 0 && minute == 0)    GoogleDocs.appendToGoogleDoc.skip()
if Any card purchase (trigger_service: Monzo) then Create a detailed event (action_service: Google Calendar),var Address = Monzo.cardPurchase.MerchantAddress
if Any card purchase at a merchant (trigger_service: Monzo) then Add reminder to list (action_service: iOS Reminders),"var reminderTime = Meta.triggerTime.add(2, 'h'); IosReminders.createReminderIosReminders.setAlarmDate(reminderTime.format(""M/DD/YYYY"") + "" at "" + reminderTime.format(""h:mm A""))"
if New event added (trigger_service: Google Calendar) then Create calendar item (action_service: Office 365 Calendar),"if(GoogleCalendar.newEventAdded.Title.length > 0)    Office365Calendar.createNewCalendarItem.setSubject(GoogleCalendar.newEventAdded.Title)  else    Office365Calendar.createNewCalendarItem.setSubject(""Untitled Event"")  if(GoogleCalendar.newEventAdded.Where.length > 0)    Office365Calendar.createNewCalendarItem.setLocation(GoogleCalendar.newEventAdded.Where)  else    Office365Calendar.createNewCalendarItem.setLocation(""Location unrecorded"")    Office365Calendar.createNewCalendarItem.setBody(""GBS-related work."")  Office365Calendar.createNewCalendarItem.setTime(GoogleCalendar.newEventAdded.Starts)"
if New story on SFGATE homepage (trigger_service: SFGATE) then Add item to Reading List (action_service: iOS Reading List),"var title = Trigger.EntryTitle var subject = 'Mission'  if (title.indexOf(subject) < 0) {    IosReadingList.createReadingListItem.skip(""Not related to the Mission"") }"
if Any outgoing phone call ends (trigger_service: Android Phone Call) then Create a detailed event (action_service: Google Calendar),"var s_length = parseInt(AndroidPhone.placeAPhoneCall.CallLength);  var endTime = moment(moment(AndroidPhone.placeAPhoneCall.OccurredAt, 'MMMM dd, YYYY at hh:mmA').add(moment(AndroidPhone.placeAPhoneCall.CallLength, 'seconds')), 'MMMM dd, YYYY at hh:mmA').toString();  var min = moment(moment(AndroidPhone.placeAPhoneCall.OccurredAt, 'MMMM dd, YYYY at hh:mmA').add(1,'minutes'), 'MMMM dd, YYYY at hh:mmA').toString();    if(s_length>120){    GoogleCalendar.addDetailedEvent.setEndTime(endTime);  }else{    GoogleCalendar.addDetailedEvent.setEndTime(min);  }"
if Task completed (trigger_service: Remember The Milk) then Quick add event (action_service: Google Calendar),"if(Rememberthemilk.taskCompleted.Tags.indexOf(""trackthis"") === -1) {   GoogleCalendar.quickAddEvent.skip(); } else {   let timestamp = moment(Meta.triggerTime)                   .format('MMMM Do YYYY, h:mma');   let list = Rememberthemilk.taskCompleted.List;   let taskName = Rememberthemilk.taskCompleted.Name;   let taskLink = Rememberthemilk.taskCompleted.LinkToTask;   let taskText = `${list}"
if New event added (trigger_service: Google Calendar) then Create a calendar event (action_service: iOS Calendar),
if Any new note (trigger_service: Note widget) then Quick add event (action_service: Google Calendar),
if Tomorrow's weather report (trigger_service: Weather Underground) then Create a detailed event (action_service: Google Calendar),
if Any new note (trigger_service: Note widget) then Log calories consumed (action_service: iOS Health),"var values = DoNote.doNoteNewCommandCommon.NoteText.split("","", 2) if (values.length > 1) {   IosHealth.logCaloriesConsumed.setFoodDescription(values[0])   IosHealth.logCaloriesConsumed.setNumberOfCalories(values[1]) } else if (values.length > 0) {   IosHealth.logCaloriesConsumed.setNumberOfCalories(values[0]) } else {   IosHealth.logCaloriesConsumed.skip(""No data provided"") }"
if Any new note (trigger_service: Note widget) then Create a calendar event (action_service: iOS Calendar),
if Caavo search (trigger_service: Caavo) then Set thermostat hold for X hours (action_service: ecobee),"if (Caavo.voiceSearch.Text.toLowerCase().indexOf(""set the temperature"") < 0) {   Ecobee.holdHoldhours.skip(); }"
if Thermostat enters Smart Home/Away (trigger_service: ecobee) then Set Away (action_service: Aquanta),"var EventType = Ecobee.motionDetected.EventType.toLowerCase() if (EventType.indexOf(""away"") != -1) {   Aquanta.cancelAway.skip() } else if (EventType.indexOf(""home"") != -1) {   Aquanta.away.skip() }"
if New bus advisory (trigger_service: NJ Transit) then Send me an SMS (action_service: SMS),"var Hour = Meta.currentUserTime.hour() var Day = Meta.currentUserTime.day()  if (Day==6 || Day==7) {   Sms.sendMeText.skip(""Not a weekday"") }  else if (Hour < 7 || (Hour > 9 && Hour < 5) || Hour > 19) {   Sms.sendMeText.skip(""Not commuting hours"") }"
if Any new post in subreddit (trigger_service: reddit) then Push a link (action_service: Pushbullet),"if(Reddit.newPostInSubreddit.Title.indexOf(""Icon Pack"") === -1){    Pushbullet.sendLink.skip();  }  else{    Pushbullet.sendLink.setTitle(Reddit.newPostInSubreddit.Title);    Pushbullet.sendLink.setUrl(Reddit.newPostInSubreddit.PostURL);  }"
if You enter an area (trigger_service: Location) then List recommended shows (action_service: Trakt),var day = Meta.currentUserTime.day() var hour = Meta.currentUserTime.hour() let index = Math.floor((Math.random() * Trakt.recommendedShows.length)) if (day != 1) {   IfNotifications.sendRichNotification.skip() }  else if (hour > 16 && hour < 19) { IfNotifications.sendRichNotification.setLinkUrl(Trakt.recommendedShows[index].Trailer) IfNotifications.sendRichNotification.setTitle(`You made it through the work day!!`) IfNotifications.sendRichNotification.setMessage(`Put your feet up and relax with ${Trakt.recommendedShows[index].Title}!`) }
if You enter an area (trigger_service: Location) then Dock robot (action_service: iRobot),var timeOfDay = Meta.currentUserTime.hour();    if (timeOfDay > 0 && timeOfDay < 17) {    Irobot.dockRobot.skip()  }
if You exit an area (trigger_service: Location) then Send an SMS (action_service: Android SMS),"var timeOfDay = Meta.currentUserTime.hour();  if (timeOfDay < 17) {   AndroidMessages.sendAMessage.skip(""It's too early to be going home""); }"
if Your SkyBell HD‘s button was pressed (trigger_service: SkyBell HD) then Send me an email (action_service: Email),"var Day = Meta.currentUserTime.day() var  Hour   =    Meta.currentUserTime.hour()  if (Day = 6) {   Skybell.record60sOfVideo.skip(""Not a weekday"")   Email.sendMeEmail.skip(""Not a weekday"") }  else if (Day = 7) {   Skybell.record60sOfVideo.skip(""Not a weekday"")   Email.sendMeEmail.skip(""Not a weekday"") }  else if (Hour > 17 || Hour < 9) {   Skybell.record60sOfVideo.skip(""Not a weekday"")   Email.sendMeEmail.skip(""Not a weekday"") }"
if Motion detected (trigger_service: Arlo) then Start recording (action_service: Arlo),"var Day = Meta.currentUserTime.day() var  Hour   =    Meta.currentUserTime.hour()  if (Day = 6) {   Arlo.record.skip(""Not a weekday"") }  if (Day = 7) {   Arlo.record.skip(""Not a weekday"") }  if (Hour > 17 || Hour < 9) {   Arlo.record.skip(""Not working hours"") }"
if You exit an area (trigger_service: Location) then Send an email (action_service: Gmail),"var timeOfDay = Meta.currentUserTime.hour();  if (timeOfDay > 11 || timeOfDay < 15) {   Gmail.sendAnEmail.setBody(""Hey baby, I'm leaving for lunch!"");   Gmail.sendAnEmail.setSubject(""""); } else {   Gmail.sendAnEmail.setBody(""Hey baby, I'm leaving work now!"");   Gmail.sendAnEmail.setSubject(""""); }"
if New event added (trigger_service: Google Calendar) then Send a notification from the IFTTT app (action_service: Notifications),
if You enter an area (trigger_service: Location) then Send an SMS (action_service: Android SMS),var timeOfDay = Meta.currentUserTime.hour() var dayOfWeek = Meta.currentUserTime.isoWeekday()  if (!((timeOfDay >= 15 && timeOfDay <= 20 ) && (dayOfWeek >= 1 && dayOfWeek <= 5))) {
if You enter an area (trigger_service: Location) then Save toward a goal (action_service: Qapital),var timeOfDay = Meta.triggerTime.minute() if (timeOfDay >= 0905 || timeOfDay <= 0855) Qapital.saveTowardGoal.skip
if Lock unlocked by specific person (trigger_service: August) then Start playback (action_service: Spotify),let currentHour = Meta.currentUserTime.hour();  if (currentHour < 16 || currentHour >= 19) { Spotify.startPlayback.skip(); }
if New yellow line alert (trigger_service: Chicago Transit Authority) then Post a message to a Spark room (action_service: Webex),var Hour = Meta.currentUserTime.hour() var Day = Meta.currentUserTime.day()
if Current temperature rises above (trigger_service: Weather Underground) then Turn on (action_service: WeMo Smart Plug),var dayOfWeek = Meta.currentUserTime.isoWeekday() var timeOfDay = Meta.currentUserTime.hour() if (dayOfWeek < 6) {   if (timeOfDay >= 18 && timeOfDay <= 8) {
if Current condition changes to (trigger_service: Weather Underground) then Turn on (action_service: WeMo Insight Switch),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay > 18 || timeOfDay < 8) {   WemoInsightSwitch.attributeInsightOnDiscrete.skip()   WemoLighting.groupLedTurnOn.skip()   WemoLighting.groupLedBrightnessChange.skip()   WemoSwitch.attributeSocketOnDiscrete.skip()  }
if Movement is detected (trigger_service: Wireless Tag) then Turn on lights (action_service: Philips Hue),"var hour = Meta.currentUserTime.hour();      if (hour < 6) {    Hue.turnOnAllHue.skip(""Too early"")    } else {    }"
if New activity by you (trigger_service: Strava) then Move money into a pot (action_service: Monzo),var distance = parseInt(Strava.newActivityByYou.DistanceMeters); var amount = distance/1000; Monzo.potDeposit.setAmount(amount.toFixed(2));
if Any new photo by you (trigger_service: Instagram) then Create a photo post (action_service: Tumblr),"let postText;  let postTextonly;  let postTextonlyHeadline;  let posthashesonly;  let posthashesonlyLen;  let posthashesonlytext;  let posthashesonlytextkomma;  postText = Instagram.anyNewPhotoByYou.Caption;  var regexp = new RegExp('#([^\\s]*)', 'g');  postTextonly = postText.replace(regexp, '');  postTextonlyHeadline = postText.slice(0, 40)+' ...';  posthashesonly = postText.match(regexp);  posthashesonlyLen = posthashesonly.length;  posthashesonlytext = '';  let i;  for (i = 0; i < posthashesonlyLen; i++) {      posthashesonlytext += posthashesonly[i]+' ';  }  posthashesonlytextkomma = posthashesonlytext.replace(/ #/g,',');  posthashesonlytextkomma = posthashesonlytextkomma.replace('#','');  posthashesonlytextkomma = posthashesonlytextkomma.replace(' ','');"
if New tweet by a specific user (trigger_service: Twitter) then Send photo (action_service: Telegram),"var re_link_img = /pic\.twitter\.com\/([0-9a-zA-Z]*)/; var matches = re_link_img.exec(Twitter.newTweetByUser.TweetEmbedCode);  var txt = Twitter.newTweetByUser.Text || """" var created = Twitter.newTweetByUser.CreatedAt var author = Twitter.newTweetByUser.UserName var msg = txt + ""<br><br>"" + created + ""<br>"" + ""Author: "" + author  Telegram.sendPhoto.setCaption(msg)  if (matches)   Telegram.sendPhoto.setPhotoUrl(""https:"
if New photo post (trigger_service: Tumblr) then Add file from URL (action_service: Dropbox),
if New tweet by a specific user (trigger_service: Twitter) then Send message (action_service: Telegram),"var re_link_img = /pic\.twitter\.com\/([0-9a-zA-Z]*)/; var matches = re_link_img.exec(Twitter.newTweetByUser.TweetEmbedCode);  var txt = Twitter.newTweetByUser.Text || """" var created = Twitter.newTweetByUser.CreatedAt var author = Twitter.newTweetByUser.UserName var msg = txt + ""<br><br>"" + created + ""<br>"" + ""Author: "" + author  Telegram.sendMessage.setText(msg) Telegram.sendMessage.setIncludeWebPagePreview(""0"")  if (matches)   Telegram.sendMessage.skip()"
if Switched on (trigger_service: SmartThings) then List recommended movies (action_service: Trakt),"var Day = Meta.currentUserTime.day() var Hour = Meta.currentUserTime.hour() let optionOne = Math.floor((Math.random() * Trakt.recommendedMovies.length)) let optionTwo = Math.floor((Math.random() * Trakt.recommendedMovies.length)) let optionThree = Math.floor((Math.random() * Trakt.recommendedMovies.length)) if (Day != 6) {   IfNotifications.sendRichNotification.skip() } else if (Hour < 17) {   IfNotifications.sendRichNotification.skip() } else if (Hour >= 17) { IfNotifications.sendRichNotification.setMessage(`Ready for movie night? here are three movies to pick from: ${Trakt.recommendedMovies[optionOne].MovieTitle}, ${Trakt.recommendedMovies[optionTwo].MovieTitle}, or ${Trakt.recommendedMovies[optionThree].MovieTitle}`) }"
if Any new photo by you (trigger_service: Instagram) then Create a photo post (action_service: WordPress),"let postText;  let postTextonly;  let postTextonlyHeadline;  let posthashesonly;  let posthashesonlyLen;  let posthashesonlytext;  let posthashesonlytextkomma;  postText = Instagram.anyNewPhotoByYou.Caption;  var regexp = new RegExp('#([^\\s]*)', 'g');  postTextonly = postText.replace(regexp, '');  postTextonlyHeadline = postText.slice(0, 40)+' ...';  posthashesonly = postText.match(regexp);  posthashesonlyLen = posthashesonly.length;  posthashesonlytext = '';  let i;  for (i = 0; i < posthashesonlyLen; i++) {      posthashesonlytext += posthashesonly[i]+' ';  }  posthashesonlytextkomma = posthashesonlytext.replace(/ #/g,',');  posthashesonlytextkomma = posthashesonlytextkomma.replace('#','');  posthashesonlytextkomma = posthashesonlytextkomma.replace(' ','');"
if You enter an area (trigger_service: Location) then Current weather (action_service: Weather Underground),if (Date.parse(Meta.currentUserTime.utc().format()) < Date.parse(Weather.currentWeather[0].SunsetAt)) { Lifx.turnOn.skip(); }
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if Today's weather report (trigger_service: Weather Underground) then Turn lights on (action_service: LIFX),
if New item tagged (trigger_service: Pocket) then Send message (action_service: Telegram),"var message = ""#Pocket item tagged:<br>"";    if(Pocket.newTaggedItemPocket.Title != """"){    message += (""<b>"" + Pocket.newTaggedItemPocket.Title + ""</b><br><br>"");  }    if(Pocket.newTaggedItemPocket.Url != """"){    message += (Pocket.newTaggedItemPocket.Url + ""<br><br>"");  }    if(Pocket.newTaggedItemPocket.Excerpt != """"){    message += (Pocket.newTaggedItemPocket.Excerpt + ""<br><br>"");  }    if(Pocket.newTaggedItemPocket.Tags != """"){    message += (""Tags: "" + Pocket.newTaggedItemPocket.Tags + ""<br>"");  }    if(Pocket.newTaggedItemPocket.AddedAt != """"){    message += (""on "" + Pocket.newTaggedItemPocket.AddedAt);  }    Telegram.sendMessage.setText(message);"
if Any new photo by you (trigger_service: Instagram) then Upload a photo from URL (action_service: Facebook Pages),"let postText;  let postTextonly;  let postTextonlyHeadline;  let posthashesonly;  let posthashesonlyLen;  let posthashesonlytext;  let posthashesonlytextkomma;  postText = Instagram.anyNewPhotoByYou.Caption;  var regexp = new RegExp('#([^\\s]*)', 'g');  postTextonly = postText.replace(regexp, '');  postTextonlyHeadline = postText.slice(0, 40)+' ...';  posthashesonly = postText.match(regexp);  posthashesonlyLen = posthashesonly.length;  posthashesonlytext = '';  let i;  for (i = 0; i < posthashesonlyLen; i++) {      posthashesonlytext += posthashesonly[i]+' ';  }  posthashesonlytextkomma = posthashesonlytext.replace(/ #/g,',');  posthashesonlytextkomma = posthashesonlytextkomma.replace('#','');  posthashesonlytextkomma = posthashesonlytextkomma.replace(' ','');"
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if Connects to a specific WiFi network (trigger_service: Android Device) then Turn lights on (action_service: LIFX),"var hh = Meta.currentUserTime.hour()  if ( hh <= 19 && hh >= 7 ){   Lifx.turnOn.skip(""Too early""); }"
if Any new photo by you (trigger_service: Instagram) then Upload a photo from URL (action_service: Facebook Pages),var timestamp = Meta.currentUserTime.format('MMMM YYYY');  var albumName = 'IFTTT Photos for ' + timestamp;   FacebookPages.createPhotoPage.setAlbum(albumName);
if New liked tweet by you (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by you (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by you (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 1000 || timeOfDay < 1000 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New follower (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New link by you (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New follower (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New Super Chat message (trigger_service: YouTube) then Change color (action_service: Philips Hue),"if (Youtube.newSuperchat.ColorTier == ""Light blue"")   {Hue.setColorAllHue.setColor(""#0092ff"")} if (Youtube.newSuperchat.ColorTier == ""Blue"")   {Hue.setColorAllHue.setColor(""#4148b2"")}"
if Any new item (trigger_service: Pocket) then Send message (action_service: Telegram),"var message = ""New #Pocket item:<br>"";    if(Pocket.newItemAddedPocket.Title != """"){    message += (""<b>"" + Pocket.newItemAddedPocket.Title + ""</b><br><br>"");  }    if(Pocket.newItemAddedPocket.Url != """"){    message += (Pocket.newItemAddedPocket.Url + ""<br><br>"");  }    if(Pocket.newItemAddedPocket.Excerpt != """"){    message += (Pocket.newItemAddedPocket.Excerpt + ""<br><br>"");  }    if(Pocket.newItemAddedPocket.Tags != """"){    message += (""Tags: "" + Pocket.newItemAddedPocket.Tags + ""<br>"");  }    if(Pocket.newItemAddedPocket.AddedAt != """"){    message += (""on "" + Pocket.newItemAddedPocket.AddedAt);  }    Telegram.sendMessage.setText(message);"
if New DART rider alert (trigger_service: DART) then Send message (action_service: Telegram),var Hour = Meta.currentUserTime.hour() var Day = Meta.currentUserTime.day()
if You exit an area (trigger_service: Location) then Send a rich notification from the IFTTT app (action_service: Notifications),"var timeOfDay = Meta.triggerTime.hour()  if (timeOfDay <= 11 ) {    IfNotifications.sendRichNotification.skip(""Te vroeg!"")    }"
if New public video from subscriptions (trigger_service: YouTube) then Create task (action_service: Todoist),"var url;    url=Youtube.newPublicVideoFromSubscriptions.Url  var ID;    url = url.replace(/(>|<)/gi,'').split(/(vi\/|v=|\/v\/|youtu\.be\/|\/embed\/)/);    if(url[2] !== undefined) {      ID = url[2].split(/[^0-9a-z_\-]/i);      ID = ID[0];    }    else {      ID = url;    }    Todoist.createTask.setTaskContent(""pt2:"
if Every hour at (trigger_service: Date & Time) then Close door (action_service: Gogogate),var hour     = Meta.triggerTime.hour()
if Device is plugged in (trigger_service: Android Battery) then Set ringtone volume (action_service: Android Device),"var timeOfDay = Meta.currentUserTime.hour();    if (timeOfDay < 7 || timeOfDay > 21) {    AndroidDevice.setDeviceVolume.skip(""After hours"")  }"
if Every hour at (trigger_service: Date & Time) then Send a notification from the IFTTT app (action_service: Notifications),"var triggers = [8, 10, 12, 14, 16, 18, 20, 22];  var hour = Meta.currentUserTime.hour()    if (triggers.indexOf(hour) <= -1) {    IfNotifications.sendNotification.skip()  }"
if Motion detected (trigger_service: Arlo) then Call my phone (action_service: Phone Call (US only)),var timeOfDay = Meta.currentUserTime.hour(); if (timeOfDay > 21 || timeOfDay < 7) {    } else {   PhoneCall.callMyPhone.skip(); }
if You enter an area (trigger_service: Location) then Turn 1-Channel Switch on or off (action_service: eWeLink Smart Home),var timeOfDay=Meta.currentUserTime.hour() if (timeOfDay>=7||timeOfDay<18){
if New feed item (trigger_service: RSS Feed) then Save an article for later (action_service: Feedly),"var timeOfDay = Meta.currentUserTime.hour();    if (timeOfDay > 22 || timeOfDay < 8) {    IfNotifications.sendNotification.skip(""Too late; saving to Feedly"");  } else {    Feedly.createNewEntryFeedly.skip(""Sending notification instead"");  }"
if You enter an area (trigger_service: Location) then Turn on (action_service: Smart Life),var timeOfDay = Meta.currentUserTime.hour();  if(timeOfDay>7||timeOfDay<19){Smartlife.turnOn.skip();}
if New feed item (trigger_service: RSS Feed) then Send a notification from the IFTTT app (action_service: Notifications),"var timeOfDay = Meta.currentUserTime.hour();  if (timeOfDay > 22 || timeOfDay < 8) {   IfNotifications.sendNotification.skip(""Too late; saving to Feedly""); } else {   Feedly.createNewEntryFeedly.skip(""Sending notification instead""); }"
if New tweet by you (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by you (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New feed item (trigger_service: RSS Feed) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New follower (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by you (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by you (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New email from (trigger_service: Office 365 Mail) then Post a message to a Spark room (action_service: Webex),"var confirmation_subject = ""URGENTE: Necessário confirmação para""  if (Office365Mail.newEmailFrom.Subject.substring(0, confirmation_subject.length) == confirmation_subject){    var room = Office365Mail.newEmailFrom.Subject.substring(confirmation_subject.length + 1,Office365Mail.newEmailFrom.Subject.length)    CiscoSpark.postAMessage.setText(""A sala "" + room +"" está reservada para a sua reunião! Efetue o check-in dentro de 5 minutos para manter a sua reserva."")  }else if(Office365Mail.newEmailFrom.Subject == ""Reunião Terminada""){    CiscoSpark.postAMessage.setText(""A sala reservada para a sua reunião foi cancelada por falta de check-in."")  }else{    CiscoSpark.postAMessage.skip()   }"
if Today's weather report (trigger_service: Weather Underground) then Send a notification from the IFTTT app (action_service: Notifications),"if(Weather.currentWeatherAtTime.TodaysCondition.toLowerCase().indexOf(""rain"") == -1 && Weather.currentWeatherAtTime.TodaysCondition.toLowerCase().indexOf(""thunderstorm"") == -1 && Weather.currentWeatherAtTime.TodaysCondition.toLowerCase().indexOf(""drizzle"") == -1 && Weather.currentWeatherAtTime.TodaysCondition.toLowerCase().indexOf(""snow"") == -1 && Weather.currentWeatherAtTime.TodaysCondition.toLowerCase().indexOf(""hail"") == -1) {   IfNotifications.sendNotification.skip(""Weather condition is "" + Weather.currentWeatherAtTime.TodaysCondition); }"
if New story (trigger_service: Slashdot) then Add to weekly email digest (action_service: Email Digest),"var title = Trigger.EntryTitle var subject = 'Apple'  if (title.indexOf(subject) < 0) {    EmailDigest.sendWeeklyEmail.skip(""Not related to Apple"") }"
if You enter an area (trigger_service: Location) then Turn lights on (action_service: LIFX),var hour = Meta.currentUserTime.hour()  if (hour < 20) {   Lifx.turnOn.skip() }
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),"var incomingTweet = Twitter.newTweetByUser.Text  if (incomingTweet.indexOf(""#ethereum"") == -1) {   IfNotifications.sendNotification.skip(""Not Interested"") }"
if You enter an area (trigger_service: Location) then Current weather (action_service: Weather Underground),let sunrise = moment(Weather.currentWeather[0].SunriseAt); let sunset = moment(Weather.currentWeather[0].SunsetAt); let currentTime = Meta.currentUserTime; let afterSunrise = currentTime.isAfter(sunrise); let beforeSunset = currentTime.isBefore(sunset);  if (afterSunrise && beforeSunset) {    Hue.turnOnAllHue.skip(`Its still daytime so we're leaving the lights off`); }
if New story (trigger_service: Slashdot) then Add to weekly email digest (action_service: Email Digest),"var title = Trigger.EntryTitle var subject1 = 'Google' var subject2 = 'Alphabet'  if (title.indexOf(subject1) < 0 && title.indexOf(subject2) < 0) {    EmailDigest.sendWeeklyEmail.skip(""Not related to Google"") }"
if New story (trigger_service: Slashdot) then Post a tweet (action_service: Twitter),"var title = Trigger.EntryTitle.toLowerCase() var keyword1 = 'climate' var keyword2 = 'climate change' var keyword3 = 'global warming'  if (title.indexOf(keyword1) < 0 && title.indexOf(keyword2) < 0 && title.indexOf(keyword3) < 0) {    Twitter.postNewTweet.skip(""Not related to climate science"") }"
if New Ring Detected (trigger_service: Ring) then Turn on lights (action_service: Philips Hue),var timeOfDay = Meta.currentUserTime.hour()    if (timeOfDay <= 22 || timeOfDay > 8 ) {
if Button press (trigger_service: Button widget) then List recommended movies (action_service: Trakt),let index = Math.floor((Math.random() * Trakt.recommendedMovies.length)) let selection = Trakt.recommendedMovies[index]  if (selection.MovieTrailer) {   IfNotifications.sendRichNotification.setMessage(`Your randomly selected movie is: ${selection.MovieTitle} (${selection.MovieYear}). Click to see the trailer`)   IfNotifications.sendRichNotification.setLinkUrl(selection.MovieTrailer) } else {   IfNotifications.sendRichNotification.setMessage(`Your randomly selected movie is: ${selection.MovieTitle} (${selection.MovieYear}).`) }
if Button press (trigger_service: Button widget) then List recommended shows (action_service: Trakt),let index = Math.floor((Math.random() * Trakt.recommendedShows.length)) let selection = Trakt.recommendedShows[index]  if (selection.Trailer) {   IfNotifications.sendRichNotification.setMessage(`Your randomly selected show is: ${selection.Title} (${selection.Year}). Click to see the trailer`)   IfNotifications.sendRichNotification.setLinkUrl(selection.Trailer) } else {   IfNotifications.sendRichNotification.setMessage(`Your randomly selected show is: ${selection.Title} (${selection.Year}).`) }
if Motion detected (trigger_service: Arlo) then Call my phone (action_service: Phone Call (US only)),var hour = Meta.triggerTime.hour(); if (hour > 8 && hour < 21) {   PhoneCall.callMyPhone.skip(); }
if Post bookmarked by you (trigger_service: Medium) then Append to a stream (action_service: data.world),"const bookmark = (Medium.postBookmarkedByYou as any) const pairs = Object.getOwnPropertyNames(bookmark).map(prop => prop + ""||"" + bookmark[prop]) Datadotworld.append.setPayload(pairs.join(""|||""))"
if New red line alert (trigger_service: Chicago Transit Authority) then Send a notification from the IFTTT app (action_service: Notifications),"var Day = Meta.currentUserTime.day() var Hour = Meta.currentUserTime.hour()  if (Day == 6 || Day ==7) {   IfNotifications.sendNotification.skip(""Not a weekday"") }  if (Hour < 7 || Hour > 9) {   IfNotifications.sendNotification.skip(""Not commuting hours"") }"
if New tweet from search (trigger_service: Twitter) then Send message (action_service: Telegram),
if New post from search (trigger_service: reddit) then Append to a stream (action_service: data.world),"const post = (Reddit.newPostFromSearchReddit as any) const pairs = Object.getOwnPropertyNames(post).map(prop => prop + ""||"" + post[prop]) Datadotworld.append.setPayload(pairs.join(""|||""))"
if You enter an area (trigger_service: Location) then Turn 1-Channel Switch on or off (action_service: eWeLink Smart Home),var timeOfDay = Meta.currentUserTime.hour();    if (timeOfDay > 18 || timeOfDay < 6) {      } else {    Ewelink.switchAction.skip();  }
if You enter an area (trigger_service: Location) then Current weather (action_service: Weather Underground),let sunrise = moment(Weather.currentWeather[0].SunriseAt); let sunset = moment(Weather.currentWeather[0].SunsetAt); let currentTime = Meta.currentUserTime; let afterSunrise = currentTime.isAfter(sunrise); let beforeSunset = currentTime.isBefore(sunset);  if (afterSunrise && beforeSunset) {    Wiz.turnOn.skip(`Its still daytime so we're leaving the lights off`); }
if You enter an area (trigger_service: Location) then Current weather (action_service: Weather Underground),let sunrise = moment(Weather.currentWeather[0].SunriseAt); let sunset = moment(Weather.currentWeather[0].SunsetAt); let currentTime = Meta.currentUserTime; let afterSunrise = currentTime.isAfter(sunrise); let beforeSunset = currentTime.isBefore(sunset);  if (afterSunrise && beforeSunset) {    Yeelight.onOff.skip(`Its still daytime so we're leaving the lights off`); }
if If CO2 Level Is Low (trigger_service: Green Light Signal) then Change color of lights (action_service: LIFX),"var co2Index = GreenLightSignal.co2Level.Co2Index   if (co2Index === ""low"" || co2Index === ""very low"") {​​​​    Lifx.color.setAdvancedOptions('color: #00e600; brightness: 1; transition_duration: 0')  }​​​​ else {​​​​    Lifx.color.setAdvancedOptions('color: #ffffff; brightness: 0; transition_duration: 0')  }​​​​"
if Door opened (trigger_service: MyQ) then Turn on (action_service: WeMo Smart Plug),"var hour     = Meta.currentUserTime.hour() if (hour < 17) {   WemoSwitch.attributeSocketOnDiscrete.skip(""not in hour timing"") }"
if New item tagged (trigger_service: Pocket) then Add file from URL (action_service: data.world),"let filename = Pocket.newTaggedItemPocket.Url if (filename.indexOf(""?"") != -1) {   filename = filename.substr(0, filename.indexOf(""?"")) } filename = filename.substr(filename.lastIndexOf(""/"")+1)  Datadotworld.uploadFile.setFileName(filename)"
if New tweet by a specific user (trigger_service: Twitter) then Save for later (action_service: Pocket),"var tweet = Twitter.newTweetByUser.Text;  var regex = /https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&"
if New tweet by a specific user (trigger_service: Twitter) then Append to a stream (action_service: data.world),"const tweet = (Twitter.newTweetByUser as any) const pairs = Object.getOwnPropertyNames(tweet).map(prop => prop + ""||"" + tweet[prop]) Datadotworld.append.setPayload(pairs.join(""|||""))"
if Today's weather report (trigger_service: Weather Underground) then Append to a stream (action_service: data.world),"const forecast = (Weather.currentWeatherAtTime as any) const pairs = Object.getOwnPropertyNames(forecast).map(prop => prop + ""||"" + forecast[prop]) Datadotworld.append.setPayload(pairs.join(""|||""))"
if New light rail advisory (trigger_service: NJ Transit) then Send me an email (action_service: Email),"var Hour = Meta.currentUserTime.hour() var Day = Meta.currentUserTime.day()  if (Day==6 || Day==7) {   Email.sendMeEmail.skip(""Not a weekday"") }  else if (Hour < 7 || (Hour > 9 && Hour < 5) || Hour > 19) {   Email.sendMeEmail.skip(""Not commuting hours"") }"
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),if(Twitter.newTweetByUser.Text.match(/M[5-9]\.\d quake/) === null){
if New DART rider alert (trigger_service: DART) then Send me an email (action_service: Email),var Hour = Meta.currentUserTime.hour() var Day = Meta.currentUserTime.day()
if You enter an area (trigger_service: Location) then Turn 1-Channel Switch on or off (action_service: eWeLink Smart Home),var timeOfDay = Meta.currentUserTime.hour();    if (timeOfDay > 16 || timeOfDay < 8) {      } else {    Ewelink.switchAction.skip();  }
if Any meeting ends (trigger_service: Zoom) then Robot Status (action_service: iRobot),var robot = Irobot.getCurrentStatus[0].CurrentStatus;  if (robot == 'running') {   Irobot.resumeRobot.skip() } else if (robot == 'stopped') {   Irobot.resumeRobot.skip() } else if (robot == 'stuck') {   Irobot.resumeRobot.skip() } else if (robot == 'docking') {   Irobot.resumeRobot.skip() } else if (robot == 'mid_mission_charging') {  Irobot.resumeRobot.skip()  } else if (robot == 'charging') {  Irobot.resumeRobot.skip() }
if You enter an area (trigger_service: Location) then Turn 1-Channel Plug on or off (action_service: eWeLink Smart Home),var timeOfDay = Meta.currentUserTime.hour();    if (timeOfDay > 18 || timeOfDay < 6) {      } else {    Ewelink.plugAction.skip();  }
if Every day of the week at (trigger_service: Date & Time) then List my most watched movies (action_service: Trakt),"const watchedMovies = Trakt.mostWatchedMovies.slice(0,9) let tweet = ""My top 10 most watched movies: <br/>""  watchedMovies.forEach((movie, index) => {   tweet += `${index+1}) ${movie.MovieTitle} (${movie.MovieYear})<br/>` })  Twitter.postNewTweet.setTweet(tweet)"
if New bus advisory (trigger_service: NJ Transit) then Send me an email (action_service: Email),"var Hour = Meta.currentUserTime.hour() var Day = Meta.currentUserTime.day()  if (Day == 6 || Day == 7) {   Email.sendMeEmail.skip(""Not a weekday"") }  else if (Hour < 7 || (Hour > 9 && Hour < 5) || Hour > 19) {   Email.sendMeEmail.skip(""Not commuting hours"") }"
if Yesterday's rainfall measurement (trigger_service: Netatmo Weather Station) then report weather (action_service: Netro),"Netro.reportWeather.setDate(Netatmo.rainYesterdayAmount.MeasuredAt) Netro.reportWeather.setRain(Netatmo.rainYesterdayAmount.MeasuredRainfallMM) Netro.reportWeather.setRainProb(""100"")"
if New tweet from search (trigger_service: Twitter) then Send message (action_service: Telegram),var actualDay = Meta.currentUserTime.isoWeekday(); var timeOfDay = Meta.currentUserTime.hour()  function process(){   if (timeOfDay >= 8 || timeOfDay <= 20 ) {
if Vehicle had unusual fuel economy (trigger_service: Bouncie) then History of closing prices (action_service: Finance),var treeQuantity = 0;
if New tweet from search (trigger_service: Twitter) then Send message (action_service: Telegram),var actualDay = Meta.currentUserTime.isoWeekday(); var timeOfDay = Meta.currentUserTime.hour()  function process(){   if (timeOfDay >= 8 || timeOfDay <= 20 ) {
if AQI from my device (trigger_service: Kaiterra) then Change color (action_service: Philips Hue),"let aqi = parseInt(Kaiterra.lasereggAqi.Aqi)  if (aqi >= 0 && aqi <= 50) {   Hue.setColorAllHue.setColor(""25aa68"") } else if (aqi > 50 && aqi <= 100) {   Hue.setColorAllHue.setColor(""ff9900"") } else if (aqi > 100 && aqi <= 150) {   Hue.setColorAllHue.setColor(""ff6600"") } else if (aqi > 150 && aqi <= 200) {   Hue.setColorAllHue.setColor(""e40000"") } else if (aqi > 200 && aqi <= 300) {   Hue.setColorAllHue.setColor(""ae0043"") } else {   Hue.setColorAllHue.setColor(""6c003b"")    }"
if You enter an area (trigger_service: Location) then Turn on (action_service: WeMo Light Switch),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 17 || timeOfDay < 7 ) {
if New Motion Detected (trigger_service: Ring) then Turn on (action_service: WeMo Smart Plug),var timeOfDay = Meta.currentUserTime.hour() if (timeOfDay >= 18 || timeOfDay < 6 ) {
if You enter or exit an area (trigger_service: Location) then Toggle on/off (action_service: WeMo Smart Plug),var timeOfDay = Meta.currentUserTime.hour();  if (timeOfDay > 18) {
if You enter an area (trigger_service: Location) then Turn 4-Channel Switch on or off (action_service: eWeLink Smart Home),var timeOfDay=Meta.currentUserTime.hour() if (timeOfDay>=7||timeOfDay<18){
if Device is plugged in (trigger_service: Android Battery) then Turn off (action_service: WeMo Smart Plug),"var timeOfDay = Meta.currentUserTime.hour();    if (timeOfDay < 21 && timeOfDay > 4) {    WemoSwitch.attributeSocketOffDiscrete.skip(""too early"");  }"
if Your water heater has exceeded its energy use threshold (trigger_service: Aquanta) then Set Away (action_service: Aquanta),"Aquanta.away.setEnd(String(23 - Meta.currentUserTime.hour()) + "" hours"")"
if Button press (trigger_service: Wink Relay) then Turn on (action_service: WeMo Light Switch),if ((Meta.currentUserTime.hour() <= 19) || (Meta.currentUserTime.hour() >= 7)) {     WemoLightSwitch.attributeLsOnDiscrete.skip(); }
if Any new photo (trigger_service: Camera widget) then Create a note (action_service: Evernote),DoCamera.doCameraNewPhoto.PublicPhotoURL  DoCamera.doCameraNewPhoto.ShareURL  DoCamera.doCameraNewPhoto.Latitude  DoCamera.doCameraNewPhoto.Longitude  DoCamera.doCameraNewPhoto.LocationMapImageURL  DoCamera.doCameraNewPhoto.OccurredAt
if Notification received (trigger_service: Android Device) then Set scene (action_service: Yeelight),var heure = Meta.currentUserTime.hour() if (heure < 8) {    if (heure > 0) {   Yeelight.setScene.skip()   } }
if Any new note (trigger_service: Note widget) then Create a note (action_service: Evernote),"var orig = DoNote.doNoteNewCommandCommon.OccurredAt  var time = orig.substr(-7)  var date = orig.substr(0, orig.length-7)  var hours = parseInt(time.substr(0, 2));    if(time.indexOf('AM') != -1 && hours == 12) {"
if New video posted by a channel you follow (trigger_service: Twitch) then Create task (action_service: Todoist),"var link_raw = Twitch.newVideoByChannelYouFollow.VideoUrl,        link_text = Twitch.newVideoByChannelYouFollow.VideoUrl        .replace('https:"
if New Text notecard in Notebook (trigger_service: Zoho Notebook) then Post a tweet (action_service: Twitter),"var htmlContent = Notebook.newTextNotecardInNotebook.NotecardHtmlContent; var text = htmlContent.replace(/<\/?[^>]+>/gi, "" ""); Twitter.postNewTweet.setTweet(text);"
if Any new note (trigger_service: Note widget) then Send message (action_service: Telegram),"var uri = DoNote.doNoteNewCommandCommon.NoteText; var encodedText = encodeURI(uri); Telegram.sendMessage.setText(""This link is to a Google search of applets:<br><br>&nbsp;&nbsp;&nbsp;""+ ""https:"
if sensor data (trigger_service: Netro) then do not water (action_service: Netro),if(parseInt(Netro.sensorData.Moisture)<80){   Netro.noWater.skip() }
if sensor data (trigger_service: Netro) then water (action_service: Netro),if(parseInt(Netro.sensorData.Moisture)>70){   Netro.water.skip() }
if sensor data (trigger_service: Netro) then do not water (action_service: Netro),if(parseInt(Netro.sensorData.Moisture)<90){   Netro.noWater.skip() }
if sensor data (trigger_service: Netro) then water (action_service: Netro),if(parseInt(Netro.sensorData.Moisture)>50){   Netro.water.skip() }
if sensor data (trigger_service: Netro) then water (action_service: Netro),if(parseInt(Netro.sensorData.Moisture)>80){   Netro.water.skip() }
if sensor data (trigger_service: Netro) then water (action_service: Netro),if(parseInt(Netro.sensorData.Moisture)>40){   Netro.water.skip() }
if sensor data (trigger_service: Netro) then water (action_service: Netro),if(parseInt(Netro.sensorData.Moisture)>60){   Netro.water.skip() }
if sensor data (trigger_service: Netro) then do not water (action_service: Netro),if(parseInt(Netro.sensorData.Moisture)<70){   Netro.noWater.skip() }
if Connects to a Bluetooth device (trigger_service: Android Device) then Play music (action_service: Android Device),"var btDeviceName = AndroidDevice.bluetoothConnected.DeviceName;    if (btDeviceName != ""Ford Audio"") {    AndroidDevice.playBestSong.skip(""Not Ford Audio device"")  }"
if Connects to a Bluetooth device (trigger_service: Android Device) then Set ringtone volume (action_service: Android Device),"if (Trigger.DeviceName.indexOf(""Gear"")==-1) {AndroidDevice.setDeviceVolume.skip(""Connection non due à la montre"")}"
if New tweet by a specific user (trigger_service: Twitter) then Post a tweet (action_service: Twitter),
if New tweet by a specific user (trigger_service: Twitter) then Post a tweet (action_service: Twitter),
if New tweet by a specific user (trigger_service: Twitter) then Post a tweet (action_service: Twitter),
if Any card purchase (trigger_service: Monzo) then Add to weekly email digest (action_service: Email Digest),"var d = Meta.triggerTime var foreignCurrency = false; if (Monzo.cardPurchase.AccountCurrencyCode != Monzo.cardPurchase.LocalCurrencyCode) {   foreignCurrency = true; }  var message = Monzo.cardPurchase.AccountCurrencySymbol + Monzo.cardPurchase.AmountInAccountCurrency + "" "";  if (foreignCurrency) {   message += Monzo.cardPurchase.LocalCurrencySymbol + Monzo.cardPurchase.AmountInLocalCurrency + "" ("" + Monzo.cardPurchase.LocalCurrencyCode + "") ""; }  message += ""on "" + d.format(""dddd"") + "" at "" + d.format(""h:mm A"");  EmailDigest.sendWeeklyEmail.setMessage(message);"
if Every hour at (trigger_service: Date & Time) then Add photo to Buffer (action_service: Buffer),"var myArray = ['XVYz_QeiEBw', 'e6JaSgFPm4U', 'mA_lknGurfc', 'm8c9PKq2E2A', 'SPlaq4tHcOk', 'YdpDztAnW9w', '-JXrMLIg91g', 'ioy3bN5Irew', '2M_sDJ_agvs', 'O14abKtZ5iY', 'iPdcTDrcC-w', 'FSQsHQ-rDJA', 'AfGUx4-QVp4', 'xmGkzY--Fgg', 'DPnL-8JDtmw', 'PRSv65jkNBY', 'UCIZh0-OYPw', '8wwwDJvehKk', 'KT6o4bDYlh4', '1braZySlEKA', '_vPCiuXL2HE', 'ius5CoHQ-ao', 'vit8BCsqAho', 'Z8-6EI2tYtw', 'wLVMOygHlbs', 'jhMt5TTqJS0', 'E-X6zqkLmyk', 'uuNYkZizYpU', '7RQf2X6aXXI', '5y4ljzRrDFA', 'HN2M5L1VgZ8', 'JXsxH2shRgY', 'npbKYnJxDRw', 'ESYKQr9ENDU', 'muR8qY0WXM4', 'thChtpdyugw', 'hxBeG66Enlc', 'McmRfLKw8yg', '6mze64HRU2Q', 'VVVLN9tZo4g', 'gDgMcnjOnRA', 'm_EdUZqmAIk', 'IwirtfMD2H0', 'xarhNpLSHTk', 'EFOuJ1bATbg', 'jO1_hmxLNRc', 'QDq3YliZg48', 'qgXzAPdXQjA', 'p0SFfQzAwek', 'KMn4VEeEPR8', 'IRJHnNzGBRQ', 'X912jiy57JU', 'McSVkn0NdeA', 'WUo0EdSv9OU', 'XiHmMxoNzUU', '4P21IxWN7BA', 'HCmKuS0_szU', 'jyb5Ls8JnN0', 'GntGR-SHkXE', '29oO_Fj56Lg', 'ghj_rjQw8GQ', 'Sx_Yfe3onUs', 'k27oJ1jde6M', 'U_D5NWMmTTM', 'JP23z_-dA74', 'm82uh_vamhg', '9AoU5IOAaS0', 'YRLzGWh_M-c', '60wCqYf7Fg8', 'T-CgxOClNuU', 'UCIZh0-OYPw', '7RyfX2BHoXU', 'GiByF7Zwsbg', 'D_IG_9elRQQ', 'zhnKlABmTP0', '7igiZKszpGA', 'tPPi0jzLP_w', 'TLD6iCOlyb0', 'w02Uizl_rhQ', 'dti56waifB4', 'aEtl64kP8mk', 'tU_fcRUkljQ', 'CGemkkg7_IQ', 'VZSIm_cNAL8', 'IeId5LPtDy8', 'qrXPk89erXA', 'uLDmm65P5ZY', 'V53QmbO25Fs', 'lJstr7OYCoM', 'ZSvlTa6yARw', 'TMxUnMAAwFA', 'btGLkiMid2U', 'HvCtRFpxK8s', '31woi0a2n9s', 'fmz-B9At9iQ', 'na4MScNlx_8', '03SU9tzAHvY', 'lECl0oYhXnI', 'kzt6pRBfEVk', 'zAqtmSpBYQ8', '1vg0LlKxHG8', '9Jq5UvyXr8A', 'kVCRP3uiLiE', 'c1rOy44wuts', 'Yf0rh3onbBQ', 'Z6v4dSNayVg', 'VAdFzJJDzgg', 'A6WQ57dzHgU', 'QOL_IwPmj6E', '8PR1tT9UmmU', 'V63oM8OPJSo', 'mNCFOaaLu5o', 'e5uhsINjlPY', '07mSKrzKiRw', 'tqG48KOMKfY', 'Fg9l2rojs24', '7AqthDXNeEk', 'rMqbe4WLqXk', 'betmVWGYcLY', 'jGKBncKGbrc', '-UUGr3txNuc', 'VW880O5jk7M', 'PfK35Iw1JAo', 'D7qzQ234N0o', 'gOErbMaVUk0', 'rAU9uUDQRTg', 'uRvI1Q64vzg', 'x2-K3IL4VeA', 'wCpAx5fpUDQ', 'cJdDtt96et8', 'VuPIUePS_vU', 'PT1152jFqd4', 'MqJX_8EaStM', 'e370j8S8_Yw', '2a1iY-8G1rc', 'hD_qdaSO7Aw', 'KMn4VEeEPR8', 'dwnhS4IlQa4', 'A-tHpo6p9f8', 'KQvFT4xc-gQ', 'FD0Ga_KJTwM', 'VYEMbB7-oYU', 'Xh6BpT-1tXo', 'bvhEYmFU7ec', 'dnkM5wPjVdg', '3bh3elC0D7M', 'XmfcsYHEhoQ', 'sf_1ZDA1YFw', 'scgdtiUGQ2E', 'I3AMPLzJjW8', '60wCqYf7Fg8', 'hpCHLFknc2s', 'KputBgWH-Ek', 'FcywOWEIY7Y', '0ZL0O-eDOpU', '9AQI4yF2ZJ4', 'LkaGRQiic78', '_TvkKCnPnCM', 'L8vv8_Q4_WI', 'o_rKNRoNz8s', '0c_FThXR3FU', '-4pTZz6mywM', 'o114vBzekbA', 'fHuns1qUowI', 'wHaBKOHT5TY', 'Uru_R-zBEOE', 'PCgH93R_R8M', 'vcn2ndJ5LwE', '0G8iqixLkSU', 'zBsXaPEBSeI', '8XFsH5F1fss', '7rrgPPljqYU', 'gAIiRhzBF80', 'Y5dE5Bhxcog', 'uYc_xgcKVCU', 'bO73DhdL-mc', 'YmRbWVij1W8', '1gT773Pm8Mo', 'nUDLevhu62w', '8rRdnSDfS68', '0zHm2Jsf_oQ', 'wWjDH4m2emE', 'TLD6iCOlyb0', '9imStvf5ei0', '0S119AenbNk', 'AD8dDMFZv9U', '_IFipWi6cWc', 'PfK35Iw1JAo', 'GyDktTa0Nmw', '7uXn7nudorc', 'OXMX3R0KKx0', 'JGxdIlKy3lA', 'dCNgsF2XZI8', 'e2zNqOPXQus', 'DCdaCA_Bfnc', 'ZMESvQ3N_Xw', 'm82uh_vamhg', 'MGKGuMP9nLY', '61rUGGs6DUo', '83zRhEhFMfo', 'eHtM8lZrU2A', 'SYx3UCHZJlo', 'ubt6OzW2KBg', '3V8gdLbwDOI', 'QNmdDWCWKBw', 'Yt8yca2amrs', 'HQE7ryBQ2vE', 'AlEyuIKuSmc', 'h8T1Wa4u7oU', 'M1FUX2SDzyQ', 'ktQuuihh3_w', 'mHsDkAeVtGY', 'Gx0ZfLuEX9Y', '_UmLYV_9gR0', 'eyXArRm5tyY', 'uJ1fwrVerpA', 'NOY_-ZZiKT4', 'xarhNpLSHTk', 'HghSbNQO8jM', 'QgHvLSuIcLs', 'u5vx3Ke0_RM', 'JGkGBDuZXt4', 'OUbc8Y_6vew', 'Le7_qK9JaLU', 'nX2tkqsf_eI', '4SxaxnBHzcs', 'mlD9zI7FIhk', '-AFVBe7VGqQ', '-IZhwQpd7To', '-T0La6F_WrE', 'SRd8je3VIcE', 'Ao9UPWkE6a8', '6Q_PjiBEFl4', 'dZcoliS0DQ0', '6QfhbqfUz58', '71XkPe_1Ang', 'guNIjIuUcgY', 'w8CcH9Md4vE', '7vDReTYrg_k', '7RyfX2BHoXU', '43ScFMWx2xY', '3JZeW3rtg6E'];      var rand = myArray[Math.floor(Math.random() * myArray.length)];   Buffer.addToBufferWithPhoto.setPhotoUrl(""https:"
if Every hour at (trigger_service: Date & Time) then Add photo to Buffer (action_service: Buffer),"var myArray = ['pChE-f_gqVc', 'aI3EBLvcyu4', 'w_O_tPgxvok', 'uKtvYMGe8ls', 'JCXANpeR2XI', 'GvhSUEN-Lm8', 'Aka2x2D4Ph0', 'oH9AuO20kbk', 'S2AcayPkszE', '0nk6XZp7_1E', '_bN4LHx-ogo', 'vRNcSWIElE4', 'CpkOjOcXdUY', 'JLE7S5iTouU', 'DX4XRS7w6Cw', 'hzJi-v0wbRc', 'OsOQhAzcEKc', 'bVA2DI7c9e8', '7hvuzoyFAgY', 'QsmGE0P2-B8', 't8SxccV0Agw', 'oCJuJQqvCzc', 'NH1d0xX6Ldk', '4wC6saQDQHo', 'hnYMacpvKZY', 'Z8oqUACPges', 'UzO4kgBMCv4', '2aebgOyQ1hQ', 'okEVQ7r3JPg', 'gm-NoooUG4g', 'sFlzy_sco64', 'bBD0BgosjVU', 'E_lIE17suKg', 'EJ1rVONw7wk', 'fzvsFGYj8W8', '92Mp07CbB5s', 'MGZwmCgU1kk', '5ghcIBO6fag', 'fblxwGICfSU', '7ch2IjsBxyo', 'tOCBwnahpUc', 'nLQyjLCG6VI', 'vX8IZnIDTSo', 'K9HUVVsefoM', 'CTM9M9j4JUE', '-Vcjq80W6VE', 'rsy31fM1p6A', 'F_ah6ZkCdug', 'X8HDA0aLKnM', 'kjdCOj2zLrY', 'jD6mQ0dN4Ws', 'OCt3gxcIe5c', 'BZAwNTid280', 'm3TjnLvnGyQ', '_7h-jLreZuE', 'J7G1sDV4e3A', 'KEPISdOJhxk', '9K2rXi28fG4', 'sxGJv1SUlew', 'xPeIAprXOxM', 'yMTb07aTw3I', 'G78QimrxxvY', 'djZgLP1BfO0', 'S3UPmkqmfcA', '8o5uCdOQtko', 'y60ObImlwDk', 'RVZqJT4fyoU', 'DJRUqtBf2cU', 'sBJNiLcSoc0', 'vS12mpz3TNQ', 'EsW5atCWiww', 'FSpPIToVnKU', 'xTJ4ZtPD__8', 'ABDD8pgBJH8', 'L6u98n2Nis8', 'i1AS4tkfbj4', 'wNPmB7DwI1I', 'B-seCru8yp4', '1K7Qf8OBXjU', 'rvvfkCbXzxI', 'PBAhvvBp8Wk', 'lJx_ZTMwOiE', '8bGyWm9tvyQ', 'ovvXOugcHQI', 'dbRzRdHfXho', 'EeEBjnGVZVw', 'GYNAHszBUSI', 'Qvwl_jOJxfs', 'DY5aikAj2cc', 'FIxjfwkLWTQ', 'SNaMIYO_fzQ', '9cj0QslNMTY', 'Q-BTqHfIjQ0', 'f5lHU1ZNLcw', 'OTsr1xhWh-E', 'xN8Q6r9Qu0U', 'anSPfX9lM2U', 'E-1tnSNP0y4', 'lX78sCKruNA', 'oiAk7FM8W8U', 'uZ0V_r4hCvU', 'n-hGJZGttBE', 'PXAP4PGBj6E', 'XXzBM3spynk', 'XuhsDXmH4bA', 'dmAyumv3MD4', 'hAsyQkjbPMM', 'GSDNjmI4J2w', 'OA4-E9r1XJs', '3Bq5lBO1NsU', 't_BNjSfj6Og', 'Zhv-RRD0KVg', 'GewH2PtoR1s', 'wzRQfEw9CMc', 'QoMSttUnMes', '59Izm43-RoY', 'UI7xouE1dpw', 'BnGt3gMTcIw', 'Y5Y4lY_MzT8', 'yC-9hSsEr7Y', 'PKZObrC-tlA', 'dhPneQmOJ3I', 'oqKblwdNObY', 'z8qhXJKubdg', '2wGSBqsphP0', 'se_hr8tgIt0', 'EfFcVIVNO8E', 'LEARaY7ojlw', 'A51OCdjUbxk', 'cjWmmMUCRhY', 'Ry8sJMLjSPs', 'Crj3gU0aJsU', 'jmuT7H-iMko', 'QcUPONQYHbA', '35p5-Z3Zyzo', 'Ab_vrnEL56o', '41OynDT4WkI', 'ElgIL0YMjOM', 'dmK4N3Ygh5E', 'yGWUTA7ZnaQ', 'NHabHQIASQE', '6H1ckA9lKkI', '_ZBQ4onW920', 'srcBVh5GtaQ', 'fsn4m67qXcE', '2E9sh7iOBjo', 'BXv_JxBKyE8', 'YgnEt0BVsOk', 'b7Ko3DXStPk', 'yVzrF4F_Eas', 'GokBcmdOI6I', 'z-57uOvTPgI', 'TdX67igK0vw', 'XShgTPsoATU', 'FtfuhSe2Z_Y', 'DKHnBJyWCQ8', 'N6YQfPn_9N4', 'sWkkIiTJMYc', 'D8xRp3zMaD0', '9atSrB6-yX8', 'nKPZE5vaOdE', 'heSOt1KcfCE', 'r0D8KntIJmA', '6ZkII56HsB4', 'UMcb5sX4gb0', '8QLD4JZHF04', 'AFa-lNQWIg4', '8eEciIUcxtQ', '_rciagvp-rk', 'Qk1hhYGMlEg', 'WicMLrOSVvY', '6EqPiuzgJmA', '4b0NKUuALxA', 'EZSJ34tWvDs', 'Cdz00QwGPzU', 'c40atpo4fVE', 'LFRg3sgrO-g', 'NnRYWprcWkE', 'zA50EwhSCgg', 'qgTDsJlZu9Q', '0EDCQMG7Ais', 'E51cY_fGXwA', 'gZJ9Q04h5mc', 'fXigBxcZXWc', '4XyK86k2i90', 'APXMrIPE7Y0', 'UwA6Zo4ciVA', 'bcODKYMAZvc', '2h5eBF8aRhM', 'SqH1vQJx2ZQ', '37nCsfbHnXY', 'AnRdk9qw64c', 'ghtTSfjSBoE', 'j8NtYwWO4XY', '_zXdklOfwhA', 'c1syC9YOBuI', '3WOh54znPGU', 'ncKodNOC3Xk', 'd6d2KZJsxW0', 'vnR-kbOlsls', 'PcwXW8GAxho', 'aPSda7J5A4c', 'RmHtsNUjkPA', 'e1wv80G6npA', 'suyNyMcTcTM', '50YQevDoVhw', '2s6ORaJY6gI', 'wsSsXz8HMX8', 'o2BQVT_hnr4', 'n00UuCMzVgM', 'qYpWYQ3AAvI', 'ZMYK9dxm4IQ', 'ccw-6Tp-wcQ', '35FPKt3Yko4', 'aMR3mg_BisE', 'VkVB-619ECA', 'V3n6ZbfZn9w', 'F3lBkL_y9KY', 'jo9JRmZsvBg', '6kenE1OObWo', 'bMotCT90Trk', 'QDShpt3r_4g', 'xbI-xEgzEl4', '_1qwPyCx3ik', 'uUjyBevkHeA', 'gFADLPpDwO4', '3D603YwC83s', 'rfPQsMrMZW8', 'xgl_vZYBAw4', 'S7J5QtGoYRk', '2jnYO-AQIzw', 'y537fGGPipI', 'aoWGZ3zu2Qc', 'HZV3rVvynaU', 'F8fvh5U0iKY', 'lfsgbuNXTQM', '_siAu79dnBk', 'WYoeCS2vefc', 'T519g6H3Kok', 'RW1GPQFNy-A', 'yGPbbuBDT9w', 'ATvDnCmmrGI', 'jucl7bCZ7Mk', 'sxNt9g77PE0', 'O9PGYy_bWrA', 'aNEWHxZuYHk', 'Y6fBjQO5vUQ', 'ds4gdwJNguM', 'b3YfE8NIdxU', 'gcMlgdOhFr8', 'xV0mBPLxdzs', 'bd1-NY5N0M4', 'lqm93sV0L_8', 'q9nZUFC1nTw', '6w4IBSXpJcs', 'H4QvHGNF_38', 'nezkYUg9DNE', 'rFNVqR2rJE0', 'jlG31eibYs4', '5aeKOpYD8kQ', 'FUR242Eu_z4', 'A-YUeXZ1rq8', '6yOg6cEHmgs', 'F7m-YKqqBFQ', 'l0Gq4BmboYY', 'ZppoGs9nkqM', 'zIN6a12CL6E', '6oKwheZErwc', '0ygjRNyz0sU', 'mO_wNXV-Bts', '0hHTTow00w4', 'G8hzs8IP-VQ', 'ph5AyjFltQU', 'Isqaiq9Z314', '95rhXW8GksU', '0WAJhFK7Q9o', 'zuaolsEpRRs', 'OTF4dqP6sv8', '_due0t1HYOM', 'Yci79wwE3Fg', 'CwXX_Gckmzw', 'GFFoVUqcO4k', 'U0ZCAwbpaBU', 'yu385T6GN_c', 'TJgn1_dcE1g', 'JW69cJXNpN8', 'aratvL8ra2o', '7N8DLZ5WEpQ', 'SU7MOlIMEuc', 'raMl9zJfq_c', 'OhpfrDTgqug', 'EfZAKUxMP9E', 'JxpwzseEhmo', '1jo7rXNNI1w', 'zhkTCCmD4xI', 'tGBRQw52Thw', 'L22zA7PJf_E', 'GWg-03pA_QA', 'bmwUCv0wMIU', 'zKqJJAEFB2g', 'q6wsSfN5SeI', 'gxOj8DxJndA', '4bymt4iQW_Q', '29Pl4HMuSOI', 'DZpYZq0Dmgs', 'OtFGX-4ooDQ', 'I1dqeEqCFOQ', 'PFCASrx1ZSM', 'pueU9kKIkXw', 'M8ddmW1n5R8', 'WkqbDrwnos0', 't2K15HM7bzA', 'kRooIPrUQgo', 'qZLAkLKbh5Q', 'z36qb37HSvQ', 'PUErvKKIal4', 'S2bCBhuHIJM', 'zxwK-Yfqie8', 'SMC1rJLCpDg', 'EtFBxSdd-iw', 'LlJPXSF3GbE', 'i21-U296OJ8', 'gEfAiQ68KiQ', 'Ub9m5a2EEKs', 'sWorEzdkmh4', 'EBV-5s95rao', 'J2COIoqjWHA', '2dBwIkM4F9s', '7c3mrD9IGiU', 'uiJ49cEhEf0', '0tmERNeC6Pg', '9gz3wfHr65U', '6x-hVXXiBxs', 'ZRZSmK362Xw', 'jd0hS7Vhn_A', 'NKN25UfGfkQ', 'KGy1GFeKBu4', 'PUY5xUszd3Y', 'BHh-jKrTIoU', 'FhJyV4vo-ec', 'ngqyo2AYYnE', 'gxyfJQg7Lno', 'huInxp6rL1g', 't2XHKIdc4Kw', 'G7X4J7h1fHI', 'OPAUTV_6n10', 'J82KuDlpcPs', 'e5dkQjh89RQ', 'g56z-vE98B4', 'wVq9pxnOi80', 'oTMahvIX4AM', '-KppBfOlugc', 'ocZ-_Y7-Ptg', 'mpnqu9o4b9w', 'dF-Sv4xbbf0', 'iS0Aq3QPsJ4', '2zlxFmByClI', 'qki7k8SxvtA', 'CVsBz-UY9fE', 'Q6N-78GLkmc', '3xBn1n2Y598', 'GEhel8749cY', 'IEqPWQvnR1E', 'TApgGxOVbJE', 'X2ulELll36M', 'awEZH-JU5as', '2udKI8-YZEU', 'tdexnyLcIT4', 'QMe6wJsCrLA', '0MahR4ZjVWU', 'lOXSEYO6a90', 'euxQ-h7SPQU', 'pW7q0W5qBSU', 'SxLe8EHtC3U', 'qoVhdDKzWT0', 'xpElFWPEgSA', 'lxGsNIQkT9Y', '6jzkzv5VhyE', 'K4EhsGQGSB4', '711xOGf1EnU', 'QyGGTjGZAu4', 'B3Ua_38CwHk', 'utKh_3JpSsA', '-6_VupwdZvU', 'd7rcEtDj4y0', '65l1HXQzPhc', '2nYGvYnRVHc', 'SGBGU5ZhENo', 'ROw25Ho3kjk', '1TCw4zP1XBk', '6vF5dWZtE2k', '43dH8h1uaAQ', 'Lopz-uZCB0k', 'c5XfW0W40nA', 'gj-WZ74SrcI', '4_0UbDO17S0', '7cic4kgHrR4', 'VAHno-hP9Ys', '_c3m32QqLxo', '5mR3z8PcCOQ', 'PFu3blIyEE0', 'mWM5lyPI_1E', 'xZ5E9H5DIi0', 'D1wiHCovGJ0', 'nHgtnBfvNi4', 'VTr-r68oDM0', 'NrmxfwuBhZM', 'hcbLNhY5EMw', 'wuGnv4fFbpA', 'DCeg21wmsAU', 't_NGdeU_9rk', 'hVJeIrLAdQI', 'mbCbaX7cYaw', '41eXcLghVhI', 'nm5dWxcwxBI', 'qB9expsAVDo', 'a4_mxXA9ARU', '5qFrqtA67JI', 'p_XseRm-qkQ', 'CFHzzkrmJy8', 'Pzu9f6Nby5w', 'AhKXmqa_7yU', 'LNTI3wt81tw', '2JgkjoIALTM', 'XdrXNIKRCGE', 'UUcQywVQhMI', 'eIJuI0TW0sQ', '6Bf2e7SK4tk', 'uOEWZCSSXW0', 'sXU6BeWoZqI', '65ZMOrY9eEg', 'vhVeX9vUFgg', 'aRDWbSwxC80', 'E3GubD_EG7Y', 'h00rqvO5A-M', 'ewgeSo_WYYE', '_N86P59IK0Q', 'o0OnkkvJHrg', 'gOj023vV8CQ', '-KV7jOutXPs', 'P_jgRnJIl4A', 'eUuTubj2ozg', 'WfCDnl1qH7M', 'c0E2yOHHsHU', '5RIkjMHKTe8', 'WJQQbVvkzcI', 'rEgveRa_5ds', 'iRExwuNEFOU', 'fUknnVKe3wA', '9Wy8opwjdgk', '-yWiUC-mqLw', '8FYvkl0zHQE', 'Ie-DwUai9cc', 'AyLyjn-LrJk', 'PFHEwTEWVt4', 'lRgI--USo6k', 'gXQ14zPQGQk', 'Fcx1cdatcMc', 'QT_rQsE4hbY', 'SeiOpF16dJw', 'EaXqA3BLhIA', 'e3PvFOt5XjM', 'y1-XCzamaj4', 'oM_Sv4YgYx0', 'OpeeTagHyws', 's48nn4NtlZ4', 'V_xncvgzDoo', '-s5WfAx74fM', 'Dzd_O5cnr0Y', 'kJlk-jW2nLI', 'Cy-bRM44acI', '18SoVrFOVe8', 'yF1-L-Fdy2Q', 'R8TuZccyU_o', '7DKg2HtZvwQ', 'pWBAwqUUWkk', '3BVQIgTCD9M', 'c0VTrbsXtFU', '5yK1elIW2Wo', '6qxIWz3brAk', '8z-_9ZN0QAk', 'ZZqam9DoCoQ', 'Vrb_vtQAxJU', 'KECL1sCTi9w', 'JVbH7YWBRxs', '4ebn48zA4Ls', '_ppnPXy_TVw', 'fdR2GOe4aBY', 'CiYGkddJEhA', '9jwBuJFdooc', 'pCyF1HIMovI', 'ejPREXYT258', '8Dptx0GubTc', 'r_xHtaX3l78', 'vxSqAsvm8mw', '64q9QcTE0aU', 'ukwvVT5Jy9s', 'jx_kpR7cvDc', 'tpnsrFbpU3o', 'EliN4tUvnUE', 'yV0ivZ7DJUM', 'FTXOKTw06Hc', 'mRQk1B4OM0k', 'zbTCIBy_zpM', 'zsbzXqnjXPM', 'jiqbWnkkgzI', '1NSX0WqlhYg', 'm8XLp6bk67M', 'bY5nz0STPC0', 'SIZ66vF4FKA', 'iLMBhGenerg', 'KLVmmedAZfs', 'hPCd4Gb1-Dc', '4mQ7TPtxYgQ', 'RUgbGfdma6U', 'sjYKio1FfZw', 'rmxXOk2uAhA', 'gLb1K2OXQ00', 'q64bx-L-xeA', 'lDR6R_bnY8k', '2EwCx5d4Y1c', 'vPpZXjnnkuk', 'eZKTAs5LoPA', '_fEZvhwc6jI', 'alJQukma4kA', '88v9OQOE0vU', 'b1ABAIbQLOQ', 'dexWth4tumY', 'h7oZAHnS9_E', 'S4CdaHg8v2k', 'Q71daoBe9qs', 'vU2QFQZngcw', 'pFXeHejjk_M', 'uCuLFCJbtHs', 'TLatGRCfbM4', 'TLhu3-84jT4', 'pgucstYLAyQ', 'vXCiMMPhlaw', 'TnjwytKETkk', 'sml1rQWQVfo', '9F9aV7NrsPE', '3P6rPpbPf0o', 'sjaNnAX0UBM', 'pJCkO5uGr24', 'v-A6xhBPtM4', 'i83XsBN0Ml8', 'E48Dz9_54DY', '3EJ2VeVXpnQ', 'yWfBri8-czE', 'rhH4DnfBwJo', 'cqD84c4z6lI', 'jzDUktxtgTU', 'E8Ql-ZaOZSQ', 'dUKu0u4lLYI', 'oW4aqrq_9_o', 'Q7biJSvy9FM', 'y6R4HRIQdS0', 'nF86Dc6Ka7U', 'K62lwo5GKuY', '2sPaYbFtnRA', 'nOYX8jWGYfk', 'cSsvUtTVr0Q', 'UCFgM_AojFg', 'Rm0hG0W_o00', '5gC-BaYv-XA', 'gVWBMGJwlJM', 'BExNw_tJyIA', 'XyGq7VvgUhM', 'KmXs2PP3Zqo', 'GZ1hc6Jvbrg', 'YQ-pWB3xNY0', 'GbfsuO5fq5E', 'PJLjz8uLys0', '5A7CMyj9VyA', '4AhgpQZyCvo', 'e4JjXAf4vFQ', 'Cey5ljV8R6A', 'unQnklrzl80', 'W70G3dnArSc', 'XmY0awvZ_AM', '_qwpbm0-BrQ', 'LLSpY0OsEqA', 'gNXJ_VFmw1E', 'IB5T35B-Nus', '_7FyOabsZQE', '63xeJsC-Ufw', 'Du5g-fwvcQc', 'ZIV6-8mgURU', 'BFXH9GXQtCM', 'bUIox8ei63Y', 'mkiFnR3hM_0', '4sv-3TLfnrI', 'ezpPlkGx-N0', 'LspHsOT9BnQ', 'AovflqCt9Ws', '5ot0U869sZo', 'lJPWj8F3ZLs', '1zWGvVU6kqE', '6jKK7XPZP5A', 'Q_VxcHHZV2o', 'muj17G6lMjU', '5WNdCWYZeoY', 'kMjDKw6xg7g', 'LFy_1nbumbQ', '7EKROB9iGFc', '77oVHWLpRPk', '72mXoMwCoq4', 'ISg37AI2A-s', 'wnq4IuvmW3s', 'Yv6lJ3QIXVs', 'pm8eOn5Pon0', 'wPD_oM9zRT0', 'BiqAZqMU2bM', 'Q6mPgrzcsVY', 'DTSDD968Mpw', 'Tof1HYnm0LY', 'mjtlQEHD2Ok', 'afxb59kLAQU', 'Aok1bBzv3Zg', 'zBsXaPEBSeI', 'EoDFuDIWBOo', 'FDc7ODj8BVI', 'SnkGcLshlpA', 'cDqssllpHxc', 'RpSB7neQBKY', 'jIbDIjIvAj0', 'zqhe4qjVTJI', 'ClCpHruKYMY', 'azsk_6IMT3I', 'qWn0YSq-DtM', 'P1LAgwWX2Qo', 'vcAZhEQDI80', 'c402tGjbGew', '6e_TqohV70U', '_Lxppyn9DRU', '9A-eCVZFJWg', 'pP8J8FshlLg', 'O6yAB2AZL8c', 'on3bYjZOHVk', '_fw3BeaCGyI', 'jY_2XG-6HU0', 'fbBp7OqElmI', 'XTNyfggdKTo', 'DzIt-fTYv4E', 'RIi48dz7CtI', 'cnbFUgcctsE', 'NUMlxTPsznM', 'BHO7K8Zf16w', 'Us36T9JMi0A', 'jggQZkITXng', 'xJsE87_f78s', 'I-ti5nLU2Cc', 'saRU3vzmgkY', 'IPheOySCW7A', 'WdyeFpkjcqs', '6L-CyQwz8W8', 'e9ZJpC8P0UY', 'w39PTDxKiK8', 'fkLr2QOQitk', '2_3c4dIFYFU', '915UJQaxtrk', 'LYK3ksSQyeo', 'sssxyuZape8', 'WphP036Zuvg', 'FHl79chXS6s', 'U5rMrSI7Pn4', 'TTGSZSElkOI', 'wOHH-NUTvVc', '_c_I5GMZYR0', 'TULqBUELe9c', 'sirEpWjfSmo', '5ylV-khwM9s', 'S4W4qSsFdZU', '_59aYi9cPUE', 'i2DefZ6PCN0', 'TkwzP_frzl4', 'XE87arvN3oo', 'rouwHMSWmp0', 'Fu8pblIzEL0', 'dxwdn4A90SA', '1z-kI6gIEpg', 'MC6272lISCM', 'OalcDR_QBlU', 'lFv5-NeRtHA', 'yHYQG_UCoJE', 'NI2-EzNtP-k', 'jVOkrxUSzAQ', 'dwG-GDQAKtE', '1rpinA7Tf5s', '7GO8upJJb08', 'KsiSPp0nAHY', 'I1eeK67AXvI', 'hHoaq_O04KI', '8Ite8ajXf70', 'V5QCoiNeuoo', '5evvkSumy1A', 'VLKvzQQiR3o', 'Ugg-EIfzy0c', 'u7bTww9p2Uc', 'WFSf5ZITCuM', 'XN2EJemBvZM', 'bndLUrQuzf8', '_NszX1AXzJ4', 'G5qsgdBQaGI', 'hP8YZTPBiYE', 'qAVOGAOZ_nE', 'iTcmX6gznS0', 'kSfgj4GZD_A', 'nUl1GW6loLw', 'qqpfqFwAyDQ', '1ssk3G5f1Kw', 'lBdVjQcfSRQ', '1YqEuoFHwTk', 'jR7JOVb16oA', 'qKqwRpdGN3k', 'm58kXBFB8BY', 'wFdg6NvA5fY', '87BNvL-au90', '2CRqlJyc89I', 'YhXqCCnDsbY', '81rxy0OOC_s', 'Ck8bIp1ccP8', '4zfacTKyZ7w', 'MDUlQjaAr0E', 'wEO7xYSHZd8', 'USkhvlLB5N8', 'QRe3ssG4jW4', 'sICtHYZzt_s', 'w8nduKm0dAI', 'nk_uvN_b-w8', 'kDf1BWSRCWE', '7WF-9GaU-cM', 'bCqxxcF_wgY', 'OGCcjImUWQ4', 'CdFNIlajbCw', 'APtuveOxTqw', 'VYcDFMSkUAA', 'BhEdzl8kyaU', 'A7B53bKUhfM', 'KJDhTtPCveI', 'oms_mhsunGg', 'jnRnUNzbjM0', 'q0KbxwfBYSg', 'f689QxNIciw', 'xPFvQgiP1Ag', 'xP1SSu7OHBI', 'iFY9VcmephA', 'kkgN3y9yNoI', '2sBgsaSYHzE', 'jEQCKQjbRag', 'igpvgkcWXnw', 'R4MWttqQAuM', 'JxLhcSQJjjY', 'bA-wQdy_SxI', 'DT_w5FxFU4U', 'C7xjiph_9fs', 'uewcZ3RWJO8', 'r6uIUuJfF9s', 'Kxd8qiFECFs', 'hfYqe2JnKlc', 'VWEVRxGjIi4', '6izOnF1OUT8', 'y3N24uWlEuo', 'E38KRRk1fvg', 'HcF1mkS4aUs', 'VTIkmvR-4sg', '_C17ELuscM8', 'XBzHvB-lV6o', 'vkaqj1oBsd8', '4ZVjRStJ828', 'oMLVkPJZCVc', '9z2ukw4XvvM', 'NCUS1b9w8fE', 'KQvQPhlijw0', 'X9r48sYWJCE', 'dD71e4QDlJ8', 'cZCXHDIRnNQ', 's-_2sHuZkWM', 'BjelfpszQDw', 'cUFsB0dH9Xs', 'lvb8DXEBEmc', 'mSBfBC2NR5Y', 'E-E5a426PVI', 'rYHIvfMutvA', 'baKsNGGKZ3w', 'NLZdDzplC8c', 'PehXONeUWlA', 'dhxF2zlsMao', 'BIja56MZQZc', 'P0J-1ZaQzAM', '1XLbEagKpK8', 'mw3_RCPpYug', 'l-OYOwN2gpQ', 'j5DVWfbA478', 'YVAWsuj_Scc', 'kN4enV9R8XU', '-kYTZwojDd8', 'SxgLyOwF6i0', 'm7Fbd8plYgo', 'lZgUv_PNZOI', '-SGgbBRiANw', 'osmS8h79cGM', 'H0uh6cEciwQ', 'F_PP5iW7bRo', 'OHENfw7HtF8', '8qiBIM2YA3s', 'cjE2c8_d6BQ', 'w8mJn1t_lKA', '0bvo6kC5RqM', 'DnCAASEYNdM', 'U_5ePt5_IaU', 'fRHTPqteorI', '3JXnv2co4qA', 'CDZTUFspP84', 'hKHwiO11sTI', 'ow9KtgBnJmU', 'lQl3MHtaEvc', 'zpEi4B4SizM', 'PDLQl3wPCys', 'RHBfZHBIGQ4', '-24ByctJ12s', 'coheb5v8c0M', 'E8LxrpUjW7Q', 'j4tfrHP_8hc', '8hoXEsi2gpo', 'LElwzCUjleg', 'KEZPsHLGBbA', '8CaA24yAr8I', 'I8vOQotSLnA', 'ZRQRgIVFngA', 'pNDxcCXyiFY', 'm-pFmtmCitk', 'zr15LIHMxv4', 'HXrbOTD3lmY', 'e6raYkB6Qcs', 'oVgzSCDimjU', 'dDX3JG249w0', 'Iu0kbKOhCE8', '1gDglaBxcpQ', 'djHEMNbqTYI', 'HtHrjExpddA', 'r7eiq3I_utE', '1DULkIkqS24', 'hYEdA5towMw', '9gfNmb6Q5dQ', 'WTvYWlObUos', 'gREZJ09JJ3M', 'U5NCR4tXiMk', 'y8t2KkaRfh0', 'RyNzZL4MWt4', '2oeM4Q8T9EA', 'yUxnfoZqYlo', 'PK65bPGTUIE', 'vT9SSvrAncY', 'jCM48W7y6Y8', 'HTKb__tcx_k', 'WkfdDZeLfaU', 'gFj5xhyRg9k', 'WrUGxeL-Hgs', '9FJSq7lOEvE', 'qSbsUEp9XOM', '-wWRHIUklxM', 'x-lY3uCezSw', 'sSBFDyNDbns', 'ImMqjoxPGGA', '8h03wFrTi5Q', 'JCOWBKv7xV8', 'tsKJXGvvH44', 'dkulmTU4rss', '0bN8FnmpUJU', '25XAEbCCkJY', 'JWdRuV4Fp5U', 'm3gMXA0i3Ck', 'TGi4UFCPTAI', 'uAgLGG1WBd4', '-CSUFu0IpOQ', 'W52aMt0I6AY', 'TrlHGvVLtbA', '8Ou3EZmTMWA', 'rJ94nzpm-SM', 'sHpXZSZ6MbA', 'xh-aTtGuJws', 'uzUp1FZRel0', 'v41pwp_RRJU', 'o1KOfZ_bEFA', 'EScCHx_ZR8Y', 'ynM02vz5raA', 'VQJXJ4IaU_o', 'E3AE_2KI0tM', '3NJ_LjXXqsM', 'Y57eF5PRuHY', '2mDDtyZZ2O4', 'P29VwDpiK-M', '_p-DIj5LJKc', '6886qBb57L4', 'Cric4_3hJls', 'BieS9snV408', 'AjtGg8feZhg', 'QFNykjz0cZg', '4RS3rmm_t6M', 'Lnd-nHp6slM', 'VL2Vec7fHLU', 'ZLVoN6YNz08', 'Yp-iMm0X2jc', '7MrXw_o7Eo4', 'duq_b5-unhw', '4gYyCbb4Y5c', 'c0W6tY_Wgcs', 'Sm9gzKx8a3U', 'WpLC86UD7Lk', 'W-Qf8VLYbmg', 'Bcdd_KstUHo', 'yfTFo4iaADI', '9NfNJD-pTGI', 'yWRyvP0PVko', 'moV5y3VIZSE', 'Fd7gOSfKZxE', 'AsveNz4l3Go', 'ZQPaGV2FPYk', 'G1jSbEar8qQ', 'sBJkTISgQ-4', 'wnaBO9954O8', 'rzqecC64d6o', 'Sgqnk4vRIeI', '7cA8BkzP0Ak', 'TIRg8VJzy6Q', 'ZV6KmkkjMAM', 'UlmPSBvHTY0', '3s3oSch5f1c', 'ppKcYi1CXcI', 'tBY61CbBJg8', 'uNNCs5kL70Q', '4SbgBWx1Ik4', 'akT6WxVS4-M', 'fSy44u1qI6g', 'i-hbxojIr-o', 'Bmur-8gduV4', 'e-Bvu4S6sII', 'yxmNWxi3wCo', 'WjBz0ZUh4_M', 'gA3Qd2tquMc', '-kx9a9MPOxU', 'mpvBZ8TtZw4', 'cPiXO2BSGZE', '8uY2Azt8LcU', 'bxxDLHuNxvw', 'ux3Tc-eDLcI', 'KfIugx3TVUA', 'VHbiwW1S3Cg', '5P_PwYHevmY', 'tvLNSN6S81E', 'Dpd9y95ZmA4', 'ufPziMiRqU8', 'ngNS-wXxLMc', 'aVdBE-CkK_Y', 'bYXP-ITv4_s', 'U8hfWW6uRvk', 'uR19TjCAX9U', 'OAf9Mg8P8is', 'TE5eMfONLkE', 'ECjHeJtRznQ', 'mOEsL1c6TOM', 'S4EGZvo9e5E', 'QShUh436X3A', 'isriFTAXjqs', 'QDqMOdSR0-o', 'K8SzucZxuM8', 'DpPGxXyjkfg', 'Z819bGz43B8', 'Xh_gBji9pbc', 'hAmlS2wOmdQ', 'lQBimzdHpho', 'MizpcZoDGf0', 'ATLRPV_8kVg', 'CicPUseDjrA', 'GTxId2MItgc', 'hvwYNfkFCVw', 'WYC7-CMM01I', 'L8P6PZ4jKyw', 'SCN-ilXmM_E', '1EHKhQI_HCo', 'HsAg3EyplGs', 'WmYHbg2oROc', '_N0MLYRVbfA', 'vwPkZdJvyYs', 'VcbgyhMvILs', 'tQ7jJ4GmVHc', 'OAXXimRVEDc', 'NIU_z1TRah0', '-HjqaBYLpUc', 'vB4sbmlHa7E', 'A6cWBRrI3SA'];      var rand = myArray[Math.floor(Math.random() * myArray.length)];   Buffer.addToBufferWithPhoto.setPhotoUrl(""https:"
if New watched episode (trigger_service: Trakt) then Send a rich notification from the IFTTT app (action_service: Notifications),IfNotifications.sendRichNotification.setLinkUrl(`https:
if Today's weather report (trigger_service: Weather Underground) then Notify you using your Nanoleaf Light Panels or Canvas (action_service: Nanoleaf Smarter Series),"var temp     = parseInt(Weather.currentWeatherAtTime.HighTempFahrenheit)  var tempround = ((Math.round(temp / 10) * 10))  var colorKey = tempround.toString()    var colors: {[key:string]:string} = {    ""0"":""#0000FF"",    ""10"":""#1900E5"",      ""20"":""#3300CC"",    ""30"":""#4C00B2"",      ""40"":""#660099"",    ""50"":""#7F007F"",      ""60"":""#990066"",    ""70"":""#B2004C"",      ""80"":""#CC0033"",    ""90"":""#E50019"",    ""100"":""#FF0000""      }    if (tempround < 0) {      Nanoleaf.colorNotificationRequest.setValue(""#0000FF"")    }    else if (temp < 100)  {    Nanoleaf.colorNotificationRequest.setValue(colors[colorKey])    }    else {    Nanoleaf.colorNotificationRequest.setValue(""#FF0000"")  }"
if An #OhmHour starts (trigger_service: OhmConnect) then Add row to spreadsheet (action_service: Google Sheets),"var msec = (Date.parse(Ohmconnect.ohmHourStart.OhmHourEnd) - Date.parse(Ohmconnect.ohmHourStart.OhmHourStart)); var hours = Math.floor(msec / 60*60*1000); GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(Ohmconnect.ohmHourStart.OhmHourStart + '|||' + Ohmconnect.ohmHourStart.OhmHourEnd + ""||| Start ||| "" + hours);"
if Every hour at (trigger_service: Date & Time) then Push a note (action_service: Pushbullet),var timeOfDay = Meta.currentUserTime.hour();    if (timeOfDay > 22 || timeOfDay < 8 || (timeOfDay%2)==1 ) {  Pushbullet.sendNote.skip()  }
if Every day of the week at (trigger_service: Date & Time) then List recommended movies (action_service: Trakt),"let optionOne = Math.floor((Math.random() * Trakt.recommendedMovies.length)) let optionTwo = Math.floor((Math.random() * Yelp.searchBusiness.length)) Email.sendMeEmail.setSubject(`It's night date night!`) Email.sendMeEmail.setBody(`Tonight you should watch ${Trakt.recommendedMovies[optionOne].MovieTitle}, and order dinner from ${Yelp.searchBusiness[optionTwo].BusinessName}! `)"
if You exit an area (trigger_service: Location) then Set scene (action_service: Yeelight),if (Meta.currentUserTime.hour() >= 18 || Meta.currentUserTime.hour() < 6) {   Yeelight.setScene.skip('Too Late'); }
if Every day at (trigger_service: Date & Time) then Move money into a pot (action_service: Monzo),const today = Meta.currentUserTime;
if Button press (trigger_service: Button widget) then Search for a business (action_service: Yelp),let filteredBusinesses = Yelp.searchBusiness.filter(business => parseFloat(business.BusinessRating) > 3) let index = Math.floor((Math.random() * filteredBusinesses.length)) let selection = filteredBusinesses[index]  IfNotifications.sendRichNotification.setImageUrl(selection.BusinessImageUrl) IfNotifications.sendRichNotification.setLinkUrl(selection.BusinessImageUrl) IfNotifications.sendRichNotification.setMessage(`Your randomly selected restaurant is: ${selection.BusinessName} located at ${selection.BusinessAddress}`)
if New tweet by a specific user (trigger_service: Twitter) then Call my phone (action_service: Phone Call (US only)),
if New feed item (trigger_service: RSS Feed) then Plant tree for self (action_service: (more:trees)),"const content = Feed.newFeedItem.EntryContent  const qualityScoreString = content   .replace(/\<[^\>]+\>/mg, """")   .match(/Current Air Quality:[\s\S]* - (\d+) AQI.*(?=Particle Pollution)/m)[1]   .trim()   .replace(/\s\s+/mg, "", "") const qualityScore = parseInt(qualityScoreString) const hour = Meta.currentUserTime.hour()  if (hour < 10 || hour > 13 || qualityScore <= 151) {   Moretrees.plantTreeForSelf.skip()   IfNotifications.sendRichNotification.skip()   Email.sendMeEmail.skip() }"
if New event added (trigger_service: Google Calendar) then Create a detailed event (action_service: Google Calendar),"if ( GoogleCalendar.newEventAdded.Where.indexOf(""995 Market"") < 0  && GoogleCalendar.newEventAdded.Where.indexOf(""San Francisco"") < 0 ) {   GoogleCalendar.addDetailedEvent.skip(); } else {   GoogleCalendar.addDetailedEvent.setDescription(""In the office from "" + GoogleCalendar.newEventAdded.Starts + "" to ""     + GoogleCalendar.newEventAdded.Ends ); GoogleCalendar.addDetailedEvent.setAllDay(""true""); GoogleCalendar.addDetailedEvent.setStartTime(GoogleCalendar.newEventAdded.Starts); GoogleCalendar.addDetailedEvent.setEndTime(GoogleCalendar.newEventAdded.Ends);   }"
if New event added (trigger_service: Google Calendar) then Create a detailed event (action_service: Google Calendar),"if ( GoogleCalendar.newEventAdded.Where.indexOf(""995 Market"") < 0 ) {   GoogleCalendar.addDetailedEvent.skip(); } else {   GoogleCalendar.addDetailedEvent.setDescription(""In the office from "" + GoogleCalendar.newEventAdded.Starts + "" to ""     + GoogleCalendar.newEventAdded.Ends ); GoogleCalendar.addDetailedEvent.setAllDay(""true""); GoogleCalendar.addDetailedEvent.setStartTime(GoogleCalendar.newEventAdded.Starts); GoogleCalendar.addDetailedEvent.setEndTime(GoogleCalendar.newEventAdded.Ends);   }"
if Every day of the week at (trigger_service: Date & Time) then Move money into a pot (action_service: Monzo),var week_of_year = Meta.currentUserTime.format('w'); var amount = parseInt(week_of_year); Monzo.potDeposit.setAmount(amount.toFixed(2));
if New Ring Detected (trigger_service: Ring) then Toggle lights on/off (action_service: Philips Hue),var TimeOfDay = Meta.currentUserTime.hour()  if (TimeOfDay >= 21 || TimeOfDay < 6){
if New feed item (trigger_service: RSS Feed) then Send me an email (action_service: Email),"var re1 = new RegExp("" Beta""); var re2 = new RegExp("" Release Candidate"");  if (re1.test(Feed.newFeedItem.EntryTitle) || re2.test(Feed.newFeedItem.EntryTitle)) {   Email.sendMeEmail.skip(); }"
if You enter an area (trigger_service: Location) then Current weather (action_service: Weather Underground),let sunrise = moment(Weather.currentWeather[0].SunriseAt); let sunset = moment(Weather.currentWeather[0].SunsetAt); let currentTime = Meta.currentUserTime; let afterSunrise = currentTime.isAfter(sunrise); let beforeSunset = currentTime.isBefore(sunset);  if (afterSunrise && beforeSunset) {    Kasa.turnOn.skip(`Its still daytime so we're leaving the lights off`); }
if You enter an area (trigger_service: Location) then Current weather (action_service: Weather Underground),let sunrise = moment(Weather.currentWeather[0].SunriseAt); let sunset = moment(Weather.currentWeather[0].SunsetAt); let currentTime = Meta.currentUserTime; let afterSunrise = currentTime.isAfter(sunrise); let beforeSunset = currentTime.isBefore(sunset);  if (afterSunrise && beforeSunset) {    Govee.lightBrightness.skip(`Its still daytime so we're leaving the lights off`); }
if You exit an area (trigger_service: Location) then Set scene (action_service: Yeelight),if (Meta.currentUserTime.hour() < 18 && Meta.currentUserTime.hour() >= 6) {   Yeelight.setScene.skip('Too Early'); }
if You enter an area (trigger_service: Location) then Current weather (action_service: Weather Underground),let sunrise = moment(Weather.currentWeather[0].SunriseAt); let sunset = moment(Weather.currentWeather[0].SunsetAt); let currentTime = Meta.currentUserTime; let afterSunrise = currentTime.isAfter(sunrise); let beforeSunset = currentTime.isBefore(sunset);  if (afterSunrise && beforeSunset) {    Magichue.poweron.skip(`Its still daytime so we're leaving the lights off`); }
if Sunrise (trigger_service: Weather Underground) then Set scene (action_service: Yeelight),if (Meta.currentUserTime.locale('en').isoWeekday() < 6) {   Yeelight.setScene.skip('Not Weekends'); }
if Motion detected (trigger_service: Arlo) then Dim lights (action_service: Philips Hue),var timeOfDay = Meta.currentUserTime.hour();  if (timeOfDay > 7 && timeOfDay < 19) {   Hue.setBrightnessAllHue.skip() }
if Device Connects (trigger_service: Google Wifi) then Turn on lights (action_service: Philips Hue),var sunDown = moment().hour(20).minute(0); var sunUp = moment().hour(5).minute(0); if (Meta.triggerTime.isAfter(sunUp) || Meta.triggerTime.isBefore(sunDown)) {   Hue.turnOnAllHue.skip(); }
if Sunset (trigger_service: Weather Underground) then Set scene (action_service: Yeelight),if (Meta.currentUserTime.locale('en').isoWeekday() >= 6) {   Yeelight.setScene.skip('Not Weekdays'); }
if You enter an area (trigger_service: Location) then Current weather (action_service: Weather Underground),let sunrise = moment(Weather.currentWeather[0].SunriseAt);  let sunset = moment(Weather.currentWeather[0].SunsetAt);  let currentTime = Meta.currentUserTime;  let afterSunrise = currentTime.isAfter(sunrise);  let beforeSunset = currentTime.isBefore(sunset);   if (afterSunrise && beforeSunset) {     Wyzecam.lightTurnOn.skip(`Its still daytime so we're leaving the lights off`);  }
if Sunset (trigger_service: Weather Underground) then Set scene (action_service: Yeelight),if (Meta.currentUserTime.locale('en').isoWeekday() < 6) {   Yeelight.setScene.skip('Not Weekends'); }
if Sunrise (trigger_service: Weather Underground) then Set scene (action_service: Yeelight),if (Meta.currentUserTime.locale('en').isoWeekday() >= 6) {   Yeelight.setScene.skip('Not Weekdays'); }
if New DART rider alert (trigger_service: DART) then Send an email (action_service: Gmail),var Hour = Meta.currentUserTime.hour() var Day = Meta.currentUserTime.day()
if ISS passes over a specific location (trigger_service: Space) then Current weather (action_service: Weather Underground),let weather = Weather.currentWeather[0].CurrentCondition.toLowerCase(); let notClear = ((weather.indexOf('sunny') === -1) && (weather.indexOf('clear') === -1) && (weather.indexOf('fair') === -1)); let sunrise = moment(Weather.currentWeather[0].SunriseAt); let sunset = moment(Weather.currentWeather[0].SunsetAt); let currentTime = Meta.currentUserTime; let afterSunrise = currentTime.isAfter(sunrise); let beforeSunset = currentTime.isBefore(sunset); if (notClear) {   IfNotifications.sendNotification.skip(`ISS passed overhead but you may not see it because it's ${weather}`); } else if  (afterSunrise && beforeSunset) {    IfNotifications.sendNotification.skip(`ISS passes overhead but the sun is up so you won't spot it`); }
if New story (trigger_service: Slashdot) then Append to note (action_service: Evernote),"var title = Trigger.EntryTitle var keyword1 = 'Uber'   if (title.indexOf(keyword1) < 0) {   Evernote.appendToNote.skip(""Not related to Uber"") }"
if The alarm was disarmed (trigger_service: Boundary) then Turn on lights (action_service: Philips Hue),var season = Meta.currentUserTime.month();
if You enter an area (trigger_service: Location) then Turn 1-Channel Switch on or off (action_service: eWeLink Smart Home),
if Every day of the week at (trigger_service: Date & Time) then Move money into a pot (action_service: Monzo),var week_of_year = Meta.currentUserTime.format('w'); var week_number = parseInt(week_of_year);  var amount= (53-week_number); Monzo.potDeposit.setAmount(amount.toFixed(2));
if New blue line alert (trigger_service: Chicago Transit Authority) then Send me an SMS (action_service: SMS),"var Day = Meta.currentUserTime.day() var Hour = Meta.currentUserTime.hour()  if (Day == 6 || Day ==7) {   Sms.sendMeText.skip(""Not a weekday"") }  if (Hour < 7 || Hour > 9) {   Sms.sendMeText.skip(""Not commute hours"") }"
if New Pin on your board (trigger_service: Pinterest) then Create a photo post (action_service: Tumblr),Pinterest.aNewPinOnYourBoard.Description Tumblr.createPhotoPost
if Door opened (trigger_service: MyQ) then Activate scene (action_service: Lutron Caséta and RA2 Select),"var hour = Meta.triggerTime.hour()  if (hour < 22) {    LutronCasetaWireless.setScene.skip(""Not a school night."")  }"
if New tweet by a specific user (trigger_service: Twitter) then Post a tweet (action_service: Twitter),
if Yesterday's rainfall measurement (trigger_service: Netatmo Weather Station) then do not water (action_service: Netro),if(parseFloat(Netatmo.rainYesterdayAmount.MeasuredRainfallMM)<5){   Netro.noWater.skip() }
if Get Version Updates (trigger_service: Link My Pet) then Send me an email (action_service: Email),var hour = Meta.triggerTime.hour()  var timeHour = 24  var minute = Meta.triggerTime.minute()    if(hour%timeHour > 0 && minute%10 > 0 )    Email.sendMeEmail.skip()
if New liked tweet by you (trigger_service: Twitter) then Append to a stream (action_service: data.world),"const tweet = (Twitter.newFavoriteTweet as any) const pairs = Object.getOwnPropertyNames(Twitter.newFavoriteTweet).map(prop => prop + ""||"" + tweet[prop]) Datadotworld.append.setPayload(pairs.join(""|||""))"
if Daily step goal achieved (trigger_service: Fitbit) then Send a notification from the IFTTT app (action_service: Notifications),"var data = [  {""quote"":""To enjoy the glow of good health, you must exercise."",""author"":""Gene Tunney""},{""quote"":""The purpose of training is to tighten up the slack, toughen the body, and polish the spirit."",""author"":""Morihei Ueshiba""},{""quote"":""Physical fitness is one of the most important keys to a healthy body."",""author"":""John F. Kennedy""},{""quote"":""Fitness is about being better than you used to be."",""author"":""Khloe Kardashian""},{""quote"":""I'm not in the best shape, but I want to prove to myself I can do something that seems insurmountable."",""author"":""Ruben Studdard""},{""quote"":""The human body is the best picture of the human soul."",""author"":""Ludwig Wittgenstein""},{""quote"":""A muscle is like a car. If you want it to run well early in the morning, you have to warm it up."",""author"":""Florence Griffith Joyner""},{""quote"":""Time and health are two precious assets that we don't recognize and appreciate until they have been depleted."",""author"":""Denis Waitley""},{""quote"":""Walking is the best possible exercise. Habituate yourself to walk very far."",""author"":""Thomas Jefferson""},{""quote"":""The reason I exercise is for the quality of life I enjoy."",""author"":""Kenneth H. Cooper""},{""quote"":""Seeing is not believing. Doing is believing."",""author"":""Brett Hoebel""},{""quote"":""True enjoyment comes from activity of the mind and exercise of the body; the two are ever united."",""author"":""Wilhelm von Humboldt""},{""quote"":""A lot of people are afraid of heights. Not me, I'm afraid of widths."",""author"":""Steven Wright""},{""quote"":""To be successful, you must dedicate yourself 100% to your training, diet and mental approach."",""author"":""Arnold Schwarzenegger""},{""quote"":""Exercise to stimulate, not to annihilate. The world wasn't formed in a day, and neither were we."",""author"":""Lee Haney""},{""quote"":""The mind is the most important part of achieving any fitness goal. Mental change always comes before physical change."",""author"":""Matt McGorry""},{""quote"":""Health is the thing that makes you feel that now is the best time of the year."",""author"":""Franklin Pierce Adams""},{""quote"":""If a man achieves victory over this body, who in the world can exercise power over him?"",""author"":""Vinoba Bhave""},{""quote"":""To succeed in your mission, you must have single-minded devotion to your goal."",""author"":""A. P. J. Abdul Kalam""},{""quote"":""You are never too old to set another goal or to dream a new dream."",""author"":""Les Brown""},{""quote"":""Human progress is neither automatic nor inevitable."",""author"":""Martin Luther King, Jr.""},{""quote"":""Arise! Awake! and stop not until the goal is reached."",""author"":""Swami Vivekananda""},{""quote"":""Desire is the key to motivation, but it's determination and commitment to an unrelenting pursuit of your goal."",""author"":""Mario Andretti""},{""quote"":""Obstacles are those frightful things you see when you take your eyes off your goal."",""author"":""Henry Ford""},{""quote"":""Focused, hard work is the real key to success."",""author"":""John Carmack""},{""quote"":""Keep your eyes on the goal, and just keep taking the next step towards completing it."",""author"":""John Carmack""},{""quote"":""The goal of education is the advancement of knowledge and the dissemination of truth."",""author"":""John F. Kennedy""},{""quote"":""A dream becomes a goal when action is taken toward its achievement."",""author"":""Bo Bennett""},{""quote"":""Nothing can stop the man with the right mental attitude from achieving his goal."",""author"":""Thomas Jefferson""},{""quote"":""A goal is a dream with a deadline."",""author"":""Napoleon Hill""},{""quote"":""The best teamwork comes from men who are working independently toward one goal in unison."",""author"":""James Cash Penney""},{""quote"":""I know why I am here and my only real focused goal is to live each day to the fullest."",""author"":""Ken Hensley""},{""quote"":""Know what you want to do, hold the thought firmly, and do every day what should be done."",""author"":""Elbert Hubbard""},{""quote"":""Arriving at one goal is the starting point to another."",""author"":""John Dewey""},{""quote"":"""",""author"":""Troy Polamalu""},{""quote"":""Just be yourself. Be honest, work towards a goal, and you'll achieve it."",""author"":""Emraan Hashmi""},{""quote"":""Resilience is all about being able to overcome the unexpected."",""author"":""Jamais Cascio""},{""quote"":""A goal is not always meant to be reached, it often serves simply as something to aim at."",""author"":""Bruce Lee""},{""quote"":""Today I will do what others won’t, so tomorrow I can accomplish what others can’t."",""author"":""Jerry Rice""},{""quote"":""Do something today that your future self will thank you for."",""author"":""Unknown""},{""quote"":""We are what we repeatedly do. Excellence then is not an act but a habit."",""author"":""Aristotle""},{""quote"":""No matter how slow you go, you are still lapping everybody on the couch."",""author"":""Unknown""},{""quote"":""Sweat is fat crying."",""author"":""Unknown""},{""quote"":""The difference between the impossible and the possible lies in a person’s determination."",""author"":""Tommy Lasorda""},{""quote"":""If you want something you’ve never had, you must be willing to do something you’ve never done."",""author"":""Thomas Jefferson""},{""quote"":""You’re only one workout away from a good mood."",""author"":""Unknown""},{""quote"":""Nothing will work unless you do."",""author"":""Maya Angelou""},{""quote"":""Life begins at the end of your comfort zone."",""author"":""Unknown""},{""quote"":""The difference between try and triumph is a little ‘umph’."",""author"":""Unknown""},{""quote"":""Don’t count the days, make the days count."",""author"":""Muhammad Ali""},{""quote"":""Making excuses burns zero calories per hour."",""author"":""Unknown""},{""quote"":""When you feel like quitting, think about why you started."",""author"":""Unknown""},{""quote"":""It’s not about having time, it’s about making time."",""author"":""Anonymous""},{""quote"":""Your body can stand up to almost anything. It’s your mind that you have to convince."",""author"":""Anonymous""},{""quote"":""The only bad workout is the one you didn’t do."",""author"":""Anonymous""},{""quote"":""Respect your body. It’s the only one you get."",""author"":""Anonymous""},{""quote"":""Either you run the day, or the day runs you."",""author"":""Jim Rohn""},{""quote"":""Never give up, everyone has bad days. Pick yourself up and keep going."",""author"":""Anonymous""},{""quote"":""You can’t finish what you don’t start."",""author"":""Anonymous""},{""quote"":""Run when you can, walk when you have to, crawl if you must, just never give up."",""author"":""Dean Karnazes""},{""quote"":""Take care of your body, it’s the only place you have to live in."",""author"":""Anonymous""},{""quote"":""Success belongs only to those who are willing to work harder than anyone else."",""author"":""Anonymous""},{""quote"":""Small changes can make a big difference."",""author"":""Anonymous""},{""quote"":""Strive for progress, not perfection."",""author"":""Anonymous""},{""quote"":""Don’t wait. The time will never be just right."",""author"":""Napoleon Hill""},{""quote"":""All great achievements require time."",""author"":""Maya Angelou""},{""quote"":""You killed that goal!"",""author"":""Coco""}];  var i = Math.floor((Math.random() * data.length)) var msg = data[i]['quote'] + 'by ' + data[i]['author']  IfNotifications.sendNotification.setMessage(msg)"
if Motion detected (trigger_service: Arlo) then Turn on lights (action_service: Philips Hue),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 17 || timeOfDay < 6) {
if New video posted by you (trigger_service: Twitch) then Create task (action_service: Todoist),"var link_raw = Twitch.newVideoByYou.VideoUrl,        link_text = Twitch.newVideoByYou.VideoUrl        .replace('https:"
if New track added to a playlist (trigger_service: Spotify) then Send yourself an email (action_service: Gmail),"var addedBy = Spotify.newTrackAddedToPlaylist.AddedBy;  var trackName = Spotify.newTrackAddedToPlaylist.TrackName;  var trackURL = Spotify.newTrackAddedToPlaylist.TrackURL;  var artistName = Spotify.newTrackAddedToPlaylist.ArtistName;  var albumName = Spotify.newTrackAddedToPlaylist.AlbumName;  var playlistName = Spotify.newTrackAddedToPlaylist.PlaylistName;  Gmail.sendYourselfAnEmail.setSubject(""New Track Added to Playlist "" + playlistName + "" by "" + addedBy);  Gmail.sendYourselfAnEmail.setBody(""Your friend "" + addedBy + "" added a new track to the Playlist "" + playlistName + ""! ""   + ""The name of the song is: "" + trackName    + ""The artist of the song is: "" + artistName   + ""The album the song is in is: "" + albumName   + ""Listen to it here!: "" + trackURL);"
if Door opened (trigger_service: MyQ) then Activate scene (action_service: Lutron Caséta and RA2 Select),var timeOfDay = Meta.currentUserTime.hour()    if (timeOfDay >= 20 || timeOfDay < 6 ) {
if New orange line alert (trigger_service: Chicago Transit Authority) then Send an email (action_service: Gmail),var Hour = Meta.currentUserTime.hour() var Day = Meta.currentUserTime.day()
if Notification received from a specific app (trigger_service: Android Device) then Add row to spreadsheet (action_service: Google Sheets),"var notification = AndroidDevice.newNotificationFromApp.NotificationTitle var date = AndroidDevice.newNotificationFromApp.ReceivedAt  var n = notification.lastIndexOf(""by"") var track = notification.substring(0, n) var artist = notification.substring(n+3)"
if Datapoint added to a specific goal (trigger_service: Beeminder) then Add datapoint (action_service: Beeminder),"if(parseInt(Beeminder.datapointAdded.DatapointValue) < 5000){   Beeminder.addData.setDatapointValue(""0"");   Beeminder.addData.setDatapointComment(""Didn't pass 5000 steps today (""+ Beeminder.datapointAdded.DatapointValue+"")""); }"
if New tweet by a specific user (trigger_service: Twitter) then Post a tweet (action_service: Twitter),"var timeOfDay = Meta.triggerTime.weekday()  var array_nombre_dias = [""#FelizDomingo"", ""#FelizLunes"", ""#FelizMartes"", ""#FelizMiércoles"", ""#FelizJueves"", ""FelizViernes"", ""#FelizSábado""]  var felizDia = array_nombre_dias[timeOfDay]  var diaDelMes = Meta.triggerTime.date()  var str_diaDelMes = diaDelMes.toString()  var numMes = Meta.triggerTime.month()  var nombreMes = [""Ene"", ""Feb"", ""Mar"", ""Abr"", ""May"", ""Jun"", ""Jul"", ""Ago"", ""Sep"", ""Oct"", ""Nov"", ""Dic""]  var str_nombreMes = nombreMes[numMes]  var str_hashtag_nombreMes = ""#"" + str_diaDelMes + str_nombreMes"
if Current condition changes to (trigger_service: Weather Underground) then Play audio from URL (action_service: Musaic),Meta.triggerTime.hours(6)
if Current condition changes to (trigger_service: Weather Underground) then Breathe lights (action_service: LIFX),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 7 || timeOfDay < 8 ) {
if Today's rainfall measurement (trigger_service: Netatmo Weather Station) then report weather (action_service: Netro),"Netro.reportWeather.setDate(Netatmo.rainTodayAmount.MeasuredAt) Netro.reportWeather.setRain(Netatmo.rainTodayAmount.MeasuredRainfallMM) Netro.reportWeather.setRainProb(""100"")"
if Daily Rain rises above (trigger_service: Ambient Weather) then report weather (action_service: Netro),"Netro.reportWeather.setDate(AmbientWeather.dailyraininGt.Date) Netro.reportWeather.setRain((parseFloat(AmbientWeather.dailyraininGt.Rainfall)*25.4).toString()) Netro.reportWeather.setRainProb(""100"")"
if New top post in subreddit (trigger_service: reddit) then Add track to a playlist (action_service: Spotify),
if You enter an area (trigger_service: Location) then Set a scene in a room (action_service: Philips Hue),var timeOfDay = Meta.currentUserTime.hour() if (timeOfDay >= 18 || timeOfDay < 6 ) {
if New DART rider alert (trigger_service: DART) then Send a notification from the IFTTT app (action_service: Notifications),var Hour = Meta.currentUserTime.hour() var Day = Meta.currentUserTime.day()
if You enter an area (trigger_service: Location) then Dim lights (action_service: Philips Hue),var timeOfDay = Meta.currentUserTime.hour();    if (timeOfDay > 7 && timeOfDay < 19) {    Hue.setBrightnessAllHue.skip()  }
if New tweet by a specific user (trigger_service: Twitter) then Send me an email (action_service: Email),"function filter () {   const coinLabel = ""Alert: 1 hour change +/- 5% or more!"";"
if You enter an area (trigger_service: Location) then Turn on lights (action_service: Philips Hue),
if New DART rider alert (trigger_service: DART) then Post to channel (action_service: Slack),var Hour = Meta.currentUserTime.hour() var Day = Meta.currentUserTime.day()
if Connects to a specific WiFi network (trigger_service: Android Device) then Turn on (action_service: TP-Link Kasa),var timeOfDay = Meta.currentUserTime.hour()  if ( timeOfDay < 20 ) {
if New tweet by a specific user (trigger_service: Twitter) then Post to channel (action_service: Slack),if (Twitter.newTweetByUser.Text.indexOf('Struts') === -1) {   Slack.postToChannel.skip(); }
if New note in a notebook (trigger_service: Evernote) then Append to note (action_service: Evernote),"if (Evernote.newNoteInNotebook.Tags.localeCompare(""Journal"") == 0) {   Evernote.appendToNote.setTitle(Meta.currentUserTime.format(""YYYYMMDD""))   Evernote.appendToNote.setTags(""IFTTT"") }"
if Every hour at (trigger_service: Date & Time) then Start activity (action_service: Harmony),var START_TIME = 20; var END_TIME = 6;  var hourOfDay = Meta.currentUserTime.hour();   if (hourOfDay <= START_TIME && hourOfDay >= END_TIME){  Harmony.startActivity.skip(); }
if You enter an area (trigger_service: Location) then Turn 1-Channel Plug on or off (action_service: eWeLink Smart Home),"var time = Meta.currentUserTime.hour();  if (time > 17 || time < 9) {      Ewelink.plugAction;  }  else {       Ewelink.plugAction.skip(""Muito Cedo Para Acender: "" + time);  }"
if New feed item (trigger_service: RSS Feed) then Create a status message (action_service: Facebook Pages),FacebookPages.createStatusMessagePage.skip(Feed.newFeedItem.EntryTitle)
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Add track to a playlist (action_service: Spotify),
if New tweet by a specific user (trigger_service: Twitter) then Add track to a playlist (action_service: Spotify),
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Post a tweet (action_service: Twitter),
if New tweet by a specific user (trigger_service: Twitter) then Post a tweet (action_service: Twitter),
if New tweet by a specific user (trigger_service: Twitter) then Send me an email (action_service: Email),"function filter () {   const coinLabel = ""#bitcoin #btc Price: $"";   const prefix = "" 24hChg: "";   const suffix = ""% 24Vol"";   let start = Twitter.newTweetByUser.Text.indexOf(prefix);   let end = Twitter.newTweetByUser.Text.indexOf(suffix);"
if New feed item (trigger_service: RSS Feed) then Add file from URL (action_service: Dropbox),"if(!Feed.newFeedItem.EntryImageUrl){   Dropbox.addFileFromUrl.skip();   Dropbox.createTextFileDb.skip(); } else {   var name = Feed.newFeedItem.EntryImageUrl;    var filteredName = name.toString().toLowerCase().replace(/\s+/g, '-').replace(/[^\w\-]+/g, '').replace(/\-\-+/g, '-').replace(/^-+/, '').replace(/-+$/, '');    var url = '[InternetShortcut]\r\nURL=' + Feed.newFeedItem.EntryUrl + '\r\nIconIndex=0';    Dropbox.addFileFromUrl.setFilename(filteredName);   Dropbox.createTextFileDb.setFilename(filteredName + '.url');   Dropbox.createTextFileDb.setBody(url);  }"
if Motion detected (trigger_service: Arlo) then Call my device (action_service: VoIP Calls),"var hour = Meta.currentUserTime.hour();  if(hour>8&&hour<21){  VoipCalls.callMyDevice.skip(hour.toString());}else{VoipCalls.callMyDevice.setMessage(""motion detected!"");}"
if New photo taken in area (trigger_service: iOS Photos) then Upload file from URL (action_service: Box),var weekDay = Meta.currentUserTime.day();  var Hours = Meta.currentUserTime.hour();
if New photo taken in area (trigger_service: iOS Photos) then Upload file from URL (action_service: Box),var weekDay = Meta.currentUserTime.day();  var Hours = Meta.currentUserTime.hour();
if Notification received from a specific app (trigger_service: Android Device) then Turn on lights (action_service: Philips Hue),
if New photo by you with specific hashtag (trigger_service: Instagram) then Post a tweet with image (action_service: Twitter),"function TinySplitter(){     this.split_symbol = ""。"";     return this; }  function split(text:string){     var output    = [];     var sentences = text.split(""。"");     for (var i = 0; i < sentences.length; i++) {         if (sentences[i] != """") {             output.push(sentences[i] + ""。"");         }     }     return output; }    function TinySegmenter(str:string) {   var patterns = {     ""[一二三四五六七八九十百千万億兆]"":""M"",     ""[一-龠々〆ヵヶ]"":""H"",     ""[ぁ-ん]"":""I"",     ""[ァ-ヴーｱ-ﾝﾞｰ]"":""K"",     ""[a-zA-Zａ-ｚＡ-Ｚ]"":""A"",     ""[0-9０-９]"":""N""   }   this.chartype_ = [];   for (var i in patterns) {     var regexp = new RegExp(i);"
if Send IFTTT any email (trigger_service: Email) then Save for later (action_service: Pocket),const html = Email.sendIftttAnEmail.BodyHTML;
if New tweet by you (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if Motion detected (trigger_service: Arlo) then Call me and play text (action_service: woopla phone calls),"var hour = Meta.currentUserTime.hour()   if (hour >= 6 && hour < 21) { Woopla.ttsCall.skip(""No calls during daytime."") }"
if Alarm triggered (trigger_service: Scout Alarm) then Turn on (action_service: TP-Link Kasa),"var tt = Meta.triggerTime; var now = moment(); var tomorrow = now.add(1,'days');  if (!tt.isBetween(now.hour(18), tomorrow.hour(5))) {   Kasa.turnOn.skip; }"
if New tweet by a specific user (trigger_service: Twitter) then Send me an email (action_service: Email),"function filter () {   const coinLabel = ""#litecoin #ltc Price: $"";   const prefix = "" 24hChg: "";   const suffix = ""% 24Vol"";   let start = Twitter.newTweetByUser.Text.indexOf(prefix);   let end = Twitter.newTweetByUser.Text.indexOf(suffix);"
if You enter an area (trigger_service: Location) then Set Temperature (action_service: Heatmiser),var timeOfDay = Meta.currentUserTime.hour() if (timeOfDay <6 || timeOfDay >= 22) {     Heatmiser.setTemp.skip(); }
if New follower (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if Every hour at (trigger_service: Date & Time) then Send a notification from the IFTTT app (action_service: Notifications),"var timeOfDay = Meta.currentUserTime.hour();      if (timeOfDay > 22 || timeOfDay < 9)     {    IfNotifications.sendNotification.skip(""Too late to drink; resume tomorrow"");    }     else     {    IfNotifications.sendNotification;    }"
if You exit an area (trigger_service: Location) then Send SMS (action_service: ClickSend SMS),var day = Meta.currentUserTime.isoWeekday  var timeOfDay = Meta.currentUserTime.hour();  if (timeOfDay > 5 || timeOfDay < 9) Clicksend.sendSms.skip()
if New feed item matches (trigger_service: RSS Feed) then Create task (action_service: Todoist),var title = Feed.newFeedItemMatches.EntryTitle;
if New tweet from search (trigger_service: Twitter) then Send message (action_service: Telegram),var actualDay = Meta.currentUserTime.isoWeekday(); var timeOfDay = Meta.currentUserTime.hour()  function process(){   if (timeOfDay >= 5 || timeOfDay <= 22 ) {
if New tweet from search (trigger_service: Twitter) then Send message (action_service: Telegram),var actualDay = Meta.currentUserTime.isoWeekday(); var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 5 || timeOfDay <= 22 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send message (action_service: LINE),var Seoul    = moment.tz('Asia/Seoul')  var mint = Seoul.minute()  var hour = Seoul.hour()      if (mint < 20)   {     if (hour >1 && hour <7)     {        Line.sendMessage.skip()     }    else Line.sendMessage.setMessage(Twitter.newTweetByUser.Text)   }     else Line.sendMessage.skip()
if New SMS received from phone number (trigger_service: Android SMS) then Send an SMS (action_service: Android SMS),"var msg = AndroidMessages.receivedAMessageFromNumber.Text.toLowerCase();    var good_zips = ['90024', '90034', '90035', '90036', '90067', '90211', '90212'];  var good_words = ['patient', 'pt', 'accept', 'help'];  var cancel_words = ['cancel', 'disregard', 'sorry'];    var auto_accept = false;    for (var i = 0; i < good_zips.length; i++){    if (msg.indexOf(good_zips[i]) != -1) {      for (var k = 0; k < good_words.length; k++){        if (msg.indexOf(good_words[k]) != -1){          auto_accept = true;        }      }    }  }    for (var j = 0; auto_accept && j < cancel_words.length; j++){    if (msg.indexOf(cancel_words[j]) != -1){      auto_accept = false;    }  }    if(auto_accept){    AndroidMessages.sendAMessage.setText('yes');  } else {    AndroidMessages.sendAMessage.skip();  }"
if AQI from my device (trigger_service: Kaiterra) then Change Nanoleaf Light Panels or Canvas color (action_service: Nanoleaf Smarter Series),"let aqi = parseInt(Kaiterra.lasereggAqi.Aqi)  if (aqi >= 0 && aqi <= 50) {   Nanoleaf.changeColorRequest.setValue(""25aa68"") } else if (aqi > 50 && aqi <= 100) {   Nanoleaf.changeColorRequest.setValue(""ff9900"") } else if (aqi > 100 && aqi <= 150) {   Nanoleaf.changeColorRequest.setValue(""ff6600"") } else if (aqi > 150 && aqi <= 200) {   Nanoleaf.changeColorRequest.setValue(""e40000"") } else if (aqi > 200 && aqi <= 300) {   Nanoleaf.changeColorRequest.setValue(""ae0043"") } else {   Nanoleaf.changeColorRequest.setValue(""6c003b"")    }"
if Generate Detail Pet Activity Report (trigger_service: Link My Pet) then Create a calendar event (action_service: iOS Calendar),var hour = Meta.triggerTime.hour()  var minute = Meta.triggerTime.minute()  var timeHour = 24    if(hour%timeHour > 0 && minute == 0)    IosCalendar.createCalendarEvent.skip()
if New feed item (trigger_service: RSS Feed) then Send a notification from the IFTTT app (action_service: Notifications),"var Texto = Feed.newFeedItem.EntryTitle;  var rss = "" "";  rss= rss.concat(Texto);  var num = 6.0;  var snum = num.toString();  while(num >= 1 && num <= 10 ){    if(snum==""1""||snum==""2""||snum==""3""||snum==""4""||snum==""5""||snum==""6""||snum==""7""||snum==""8""||snum==""9""||snum==""10""){      snum=snum.concat("".0"");    }    if(rss.indexOf(snum) >=0 ){"
if Every hour at (trigger_service: Date & Time) then Add photo to Buffer (action_service: Buffer),
if Every hour at (trigger_service: Date & Time) then Mark folder as read (action_service: Inoreader),var hour = Meta.currentUserTime.hour()    if(hour != 0 && hour != 6 && hour != 12  && hour != 18){    Inoreader.markFolderAsRead.skip()  }
if New article in folder (trigger_service: Inoreader) then Send me an email (action_service: Email),"var hour = Meta.currentUserTime.hour()  var wday = Meta.currentUserTime.format('dddd').toLowerCase()    if(hour<8 || hour>=21 || (!wday.match(""sat"") && !wday.match(""sun"") && hour>=9 && hour<17) || (wday.match(""fri"") && hour>=17 && hour<19) || ((wday.match(""sat"") || wday.match(""sun"")) && hour<12)){    Email.sendMeEmail.skip()  }"
if New article in folder (trigger_service: Inoreader) then Send me an email (action_service: Email),"var hour = Meta.currentUserTime.hour()  var wday = Meta.currentUserTime.format('dddd').toLowerCase()    if(hour<8 || hour>=21 || (!wday.match(""sat"") && !wday.match(""sun"") && hour>=9 && hour<17) || (wday.match(""fri"") && hour>=17 && hour<19) || ((wday.match(""sat"") || wday.match(""sun"")) && hour<12)){    Email.sendMeEmail.skip()  }"
if Every hour at (trigger_service: Date & Time) then Mark folder as read (action_service: Inoreader),var hour = Meta.currentUserTime.hour()    if(hour != 0 && hour != 3 && hour != 6 && hour != 9 &&  hour != 12 && hour != 15 && hour != 18 && hour != 21){    Inoreader.markFolderAsRead.skip()  }
if Notification received from a specific app (trigger_service: Android Device) then Set a scene in a room (action_service: Philips Hue),
if New hot post in subreddit (trigger_service: reddit) then Send a notification from the IFTTT app (action_service: Notifications),var hour = Meta.currentUserTime.hour(); if(hour >= 22 || hour <= 8){   IfNotifications.sendNotification.skip(); }else{   Email.sendMeEmail.skip(); }
if Every hour at (trigger_service: Date & Time) then Start recording (action_service: Arlo),"var hour     = Meta.currentUserTime.hour()  if (hour > 18) {   Arlo.record.skip(""Too Late"") }  if (hour < 5) {   Arlo.record.skip(""Too Early"") }"
if Every hour at (trigger_service: Date & Time) then Start recording (action_service: Arlo),"var hour     = Meta.currentUserTime.hour()  if (hour > 18) {   Arlo.record.skip(""Too Late"") }  if (hour < 5) {   Arlo.record.skip(""Too Early"") }"
if New public video from subscriptions (trigger_service: YouTube) then Post a tweet (action_service: Twitter),"let title=Youtube.newPublicVideoFromSubscriptions.Title; if(title.toUpperCase().indexOf(""FANTASY"") ==-1){   Twitter.postNewTweet.skip(""Not Contains the word""+title+""in the title""); }"
if New public video from subscriptions (trigger_service: YouTube) then Post a tweet (action_service: Twitter),"let title=Youtube.newPublicVideoFromSubscriptions.Title; if(title.toUpperCase().indexOf(""FANTASY"") ==-1){   Twitter.postNewTweet.skip(""Not Contains the word""+title+""in the title""); }"
if New public video from subscriptions (trigger_service: YouTube) then Post a tweet (action_service: Twitter),"let title=Youtube.newPublicVideoFromSubscriptions.Title; if(title.toUpperCase().indexOf(""FANTASY"") ==-1){   Twitter.postNewTweet.skip(""Not Contains the word""+title+""in the title""); }"
if New public video from subscriptions (trigger_service: YouTube) then Post a tweet (action_service: Twitter),"let title=Youtube.newPublicVideoFromSubscriptions.Title; if(title.toUpperCase().indexOf(""FANTASY"") ==-1){   Twitter.postNewTweet.skip(""Not Contains the word""+title+""in the title""); }"
if New public video from subscriptions (trigger_service: YouTube) then Post a tweet (action_service: Twitter),"let title=Youtube.newPublicVideoFromSubscriptions.Title; if(title.toUpperCase().indexOf(""FANTASY"") ==-1){   Twitter.postNewTweet.skip(""Not Contains the word""+title+""in the title""); }"
if New public video from subscriptions (trigger_service: YouTube) then Post a tweet (action_service: Twitter),"let title=Youtube.newPublicVideoFromSubscriptions.Title; if(title.toUpperCase().indexOf(""FANTASY"") ==-1){   Twitter.postNewTweet.skip(""Not Contains the word""+title+""in the title""); }"
if New public video from subscriptions (trigger_service: YouTube) then Post a tweet (action_service: Twitter),"let title=Youtube.newPublicVideoFromSubscriptions.Title; if(title.toUpperCase().indexOf(""FANTASY"") ==-1){   Twitter.postNewTweet.skip(""Not Contains the word""+title+""in the title""); }"
if New public video from subscriptions (trigger_service: YouTube) then Post a tweet (action_service: Twitter),"let title=Youtube.newPublicVideoFromSubscriptions.Title; if(title.toUpperCase().indexOf(""FANTASY"") ==-1){   Twitter.postNewTweet.skip(""Not Contains the word""+title+""in the title""); }"
if New public video from subscriptions (trigger_service: YouTube) then Post a tweet (action_service: Twitter),"let title=Youtube.newPublicVideoFromSubscriptions.Title; if(title.toUpperCase().indexOf(""FANTASY"") ==-1){   Twitter.postNewTweet.skip(""Not Contains the word""+title+""in the title""); }"
if New public video from subscriptions (trigger_service: YouTube) then Post a tweet (action_service: Twitter),"let title=Youtube.newPublicVideoFromSubscriptions.Title; if(title.toUpperCase().indexOf(""FANTASY"") ==-1){   Twitter.postNewTweet.skip(""Not Contains the word""+title+""in the title""); }"
if Low battery reported (trigger_service: Arlo) then Send me an email (action_service: Email),"var hour     = Meta.currentUserTime.hour()  if (hour > 18) {   Email.sendMeEmail.skip(""Too Late"") }  if (hour < 5) {   Email.sendMeEmail.skip(""Too Early"") }"
if New tweet by a specific user (trigger_service: Twitter) then Send me an email (action_service: Email),"function filter () {   const coinLabel = ""#bitcoincash #bch Price: $"";   const prefix = "" 24hChg: "";   const suffix = ""% 24Vol"";   let start = Twitter.newTweetByUser.Text.indexOf(prefix);   let end = Twitter.newTweetByUser.Text.indexOf(suffix);"
if New tweet by a specific user (trigger_service: Twitter) then Send me an email (action_service: Email),"function filter () {   const coinLabel = ""#ethereum #eth Price: $"";   const prefix = "" 24hChg: "";   const suffix = ""% 24Vol"";   let start = Twitter.newTweetByUser.Text.indexOf(prefix);   let end = Twitter.newTweetByUser.Text.indexOf(suffix);"
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var texto = Twitter.newTweetByUser.Text.toLowerCase();
if Low battery reported (trigger_service: Arlo) then Send an email (action_service: Gmail),"var hour     = Meta.currentUserTime.hour()  if (hour > 18) {   Gmail.sendAnEmail.skip(""Too Late"") }  if (hour < 5) {   Gmail.sendAnEmail.skip(""Too Early"") }"
if Get Version Updates (trigger_service: Link My Pet) then Send me an email (action_service: Email),var hour = Meta.triggerTime.hour()  var minute = Meta.triggerTime.minute()  var timeHour = 24    if(hour%timeHour > 0 && minute%0 >0 )    Email.sendMeEmail.skip()
if Every day at (trigger_service: Date & Time) then Update device wallpaper (action_service: Android Device),var pathMin : number = 4; var pathMax : number = 49; var path : number = (Math.random() * (pathMax - pathMin + 1)) | 0; var paddedPath : string = path.toFixed(0); while (paddedPath.length < 3) {   paddedPath = '0' + paddedPath; }  var maxId : number = 9999; var id : number = (Math.random() * (maxId + 1)) | 0;  var requestPath : string = 'http:
if New video in your feed (trigger_service: Vimeo) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if Get Collar Information (trigger_service: Link My Pet) then Send me an SMS (action_service: SMS),"var minute = Meta.triggerTime.minute()  var minuteString = minute.toString()  var runday = Meta.triggerTime.day()  var currentdate = new Date(LinkMyPet.collarInfo.CreatedAt).getDay()    var batteryAmount =  parseInt(LinkMyPet.collarInfo.Battery, 10);  if(minute%30 > 0 && batteryAmount < 100 || (currentdate != runday) )    Sms.sendMeText.skip()"
if Every hour at (trigger_service: Date & Time) then Add photo to Buffer (action_service: Buffer),"var myArray = ['X0ZHojitbnI', 'LDrSJ3cjauY', '4ojhpgKpS68', 'eixD5mtJ0p4', 'xfngV5MS25o', '7UPM-c2Ojjs', 'sgOMzYQOuFA', 'sxVvLCdv0pc', 'u7VDgNGb78w', 'D2wlfdxKGQU', '-djqKXKUocE', 'v7TriL0KTkk', '3Y-sQuz1Ktg', 'edqYt4ZVYnA', '8Iyo3jwntMk', '6YmzwamGzCg', 'jWXCVfHfWYg', 'q6sWEJDnfa8', 'JZZnDFh__Tw', 'YsDWMSqeg64', 'IXUflSoWYr8', 'WBTU_EoNzNs', 'z18vg8HM-Xs', 'N-1kZdHVjhA', 'CCIsZRL8X5U', 'pBWMrDpU6VA', 'gAHXt2pMRyk', 'FRrIZnkS13g', 'aLpzAIQuEfg', 'x8Y-s2Oic2Q', 'nzC2KmZoB5M', 'DaNeJA8mmIg', 'njMiPKv0Vgk', 'R4BSGm0J7yQ', 'BCMzlf9rA0Q', '_C40WdLWlOQ', 'HWRAHxoBlpU', '6s7l_gTc4T0', '4sq5-KktU58', '2uGxst615P4', 'hNoSCxPWYII', 'N--TGq0SJZs', 'm0NA-xdykaM', 'UMcb5sX4gb0', 'FixxdTqC8zg', '2WkaMFWwYd0', '6DqRIISLZMQ', 'AhiUnolb7cg', 'NrT0qgMyzfQ', 'XS1S8AliUkw', 'k3Us72bWWW0', 'oYGjuTckcEs', '8Ud6edt2DJ0', 'Gd436JT_Gyg', '5tt6SuKRvh4', 'TY12Eo7Atmo', 'Dl6H4_nzBpE', 'WnLlni2bXpg', '3TyYUif0DH4', 'k1QPo3_mZr8', 'nQMw18rMiSI', 'Qo51KwK1dKg', '4e0oQjuSpbQ', '9mefPqV33RM', 'vEJmNFiaap0', 'HF4cpWuKcOc', '-Ca6LJu4rsM', '6TgjFR1VMVE', 'BpTz_kICS2E', 'PWjA3zA497I', '8osZBap1jwU', 'LzC5WBafIBk', 'cpQsztjnPMY', 'J5DIOISkDko', 'KNIli2DNJ1Y', 'yE7QdQSkO78', 'X41cf6Ey6Bo', 'toRqtc8iP60', 'FXx0EIloJrI', 'hVPar9d_3V8', 'WDK1KIMDzq8', 'vfQy2Tc8RbA', 'DPnL-8JDtmw', '7uVBrwSDRNA', 'B8oE4vxU3yQ', 'vbpw90QVAlw', 'q6vBkixu1zs', 'XfFqBjiOfig', 'GQRzUDIZq2k', 'TZ2RvcoWJqo', '86cn_YXeYAA', '4iAXnRQA-cY', 'v7IBUOrfYf0', 'iYNIpHF0ekY', 'aKetFyhQ9bo', 'lwmqVLiFFfY', 'TYso4-CK-as', '99kPPJPed8o', 'tJ8x4oCQ5jE', '9JnVYjdtklY', 'g8xdO1Q1kIg', 'KjJDiMJnx_8', 'G-JFH43Hw7I', 'EkxO-SFU9kc', 'Oj3ieqbZ2l4', 'zyJ6I89GV-Y', 'Aae4nqbVkwc', 'juHBIFcbxVc', 'jinWKnH0m5A', '-gf91WzrhMA', 'QckRwEvcF4M', 'Nu9wh8ivZm0', 'DDQW3EU_Cb4', 'jTCLppdwSEc', 'WpvHDkQ4P4o', 'g6rEfKZY5VI', 'eZN8cFYz2oY', 'vrBUI7EJIqI', 'zpTQILvOGQc', '8R0l7vkXTXk', 'euj6KbeuNJk', 'S63AA1OCqoQ', 'QIOVlUyNZX0', 'gVrD7EZKdek', 'XGXVwS93Ygs', 'x6peFMC-DH8', 'bCNzxvvbF_U', 'nfhg13UvLMk', '7igiZKszpGA', 'mqVx8YtLOwo', 'x0j6VsJZTzk', 'zVNNqmj9Dgs', 'P0QYU43Cz4s', '1en-qdclnOc', 'RtunROmV4DY', '5brvJbR1Pn8', 'yMARIS2PMTY', 'Klm6WOXqCME', 'XWa5f38W2KQ', 'KLPleL1aVxs', 'L9CDCOu32GA', 'OcoUiabGQ8c', 'FxjGUn8XpqA', '7frT0YpgLGM', 'R03lgrzEpqw', 'bcaMuQ3BmK8', 'LRmOCObBzhk', 'ctt44OyJJVU', '52AAiXWoVi0', 'qMQjwNszStY', 'ucnqa52u0fw', 'aZW0bSblQ7c', 'AyYlBGyk3kY', 'SvvDflEK8nI', 'vC4RuD1_98w', '6uMnlfl6m8I', '8W-p8SS6NJE', 'T5JL03WE_zk', '_RFwfvznaYM', 'ASWBa6z3llw', '-L1UEAnRDW8', 'TTGSZSElkOI', 'muQmwgnLtHI', 'mX3rR-wiHS0', 'ktSXZp7bTMc', '_uqDYFkrmLM', 'UZIl7CGwJnI', 'm1s_nIM5zQU', 'AM1pNoCnJZc', 'XNhBELouPK4', 'vXTYUGr4Tdk', 'sqMsGOMfckE', '4ZJOuOzfghc', 'Hvf44cP2kYk', '9xGLJirTbm4', 'hkmGoiu2lpo', '8T9DbAGEzkQ', '3miN-KsnXN8', 'aWbdf852ql4', 'aaAllJ6bmac', 'E6m2ZTKCWVA', 'faKz11S4ehI', 'aLGiPJ4XRO4', '0KzIhmXcmYU', 'GnHUOyPV0WI', '_8f4F7Jo0uI', 'm7_lccaGaYA', 'v4kBbdsYo_I', 'sVGH5ROWnl4', 'ZHy8w0tY6PQ', 'pMEGruJJ6Ko', 'g7xx-luCBdA', '3BL9hQzRk68', 'NsrgAyEpTHQ', 'ua7z1MEOmHQ', 'JNvRecQ24Bk', 's4x7aghAYPg', 'VWcPlbHglYc', 'oTw4lvvZZFE', 'jTeQavJjBDs', 'zDFVEGflVFA', 'c5-VN_gWI9s', '_cGjIm7Lksc', 'wmBxoh8VISY', '_ZZJH0Itsz0', 'lokQrS_AiZE', 'nXPQ5VM1FpY', 'MZjaBbD3cyI', 'fEtEgobYjKM', 'R1L9oFA2yOc', '76qcivXNoKU', '40ua6Gpbrgc', '-cVpftUn5DM', 'msrYP_9jLvQ', '076XLvcgeDk', 'i1S4n4yQUKM', 'cXCNKBL5URo', 'FaPQVHhbeYQ', 'P2ah-LaV52I', 'kQYU6vUUca4', 'Av_NirIguEc', 'EEXkL3q-Kn8', '7tFlUFGa7Dk', 'g3b00pd939w', '_dS27XGgRyQ', 'kOIUFvGQflA', 'bab9K_lWwG4', '6JkCIsaJvP0', 'OzFcTNzL9Ck', '0AwoTNSdwVM', 'fp4y6MkKyc4', 'kfnEGva7tnY', 'DYOAKt8LGIk', 'eTVB3_piJHs', '4gAoLEvoes8', 'J9Ey8Q5fXf0', 'Rn0rzGxPedM', 'iI6ZZ_VjnDk', 'CjzfHhKpl3Q', 'YpwZJxkjE2M', 'M8AP8ygy0DM', 'vsn3JwOvrWY', 'FCX9sJ-4fSQ', 'BkZVQBq7eOw', 'lsEdo7Zri1s', 'qqe6ruFsxhk', 'JTcLVcE80B8', 'UWP8rXb1AIc', 'j0dw8kTxgmM', '01vFmYAOqQ0', 'EF6z_6R94zQ', 'QwZmwrx2oXg', 'qY_yTu7YBT4', 'C-IoNV-FT64', 'cCg_fVx3arg', 'LDneXvbfn78', '7gC5vnDf-F0', 'PmNjS6b3XP4', 'sm2MuwlPAZ4', 'JmLtolYYMYk', 'Tc427zuyl8s', 'Ee1X5rWEUIo', 'TLD6iCOlyb0', 'jk5C7B3skm4', '7RzLIHZrI98', '5y4ljzRrDFA', 'B6TX1ktfyyA', 'PANMCipEL2Y', 'ZC2DkQvOrcM', 'AwYU2Po8684', 'tAR9PzZTt-0', 'dfOAVQvFWAA', 'upMmlBi8qHk', '186oqpcFpUE', '1nmK1mDC0x8', 'Wu8GgwUNgxo', 'QFTrLdQIRhI', 'mjPs0heWsek', 'oDp1Ax6Hm2I', 'vABzRsx6jNw', 'q707BuLsLbE', 'EZ-KrqaVfUI', 'fSNCGsR-fAg', '97NK3fiH7xA', 'Fh6I1iljqn4', 'kiwy-URllQs', 'SqHjTAiP22Q', '_86u_Y0oAaM', 'Ijea8ygtHV8', 'KqciQVU95HM', 'A0jpjwo_tts', 'Xn3wf_0Il2k', '5BqfVfYiIWA', 'YRspb1Z6eE0', 'hLdREhVzio4', '0-Uz-kjfzcY', 'tpAuBT0Ase4', 'dVNiRxp-EkE', 'wwIrwJf_a1s', 'aqaR3PKETZw', 'OtmuZ0O5nVQ', 'pkNwQt0okGo', 'QLiiyKYwEXo', 'tWuaMnbbRHA', 'sfObdL_rMb4', 'AHqOg7daf6s', '4nYD9wj65-c', 'mQyNUiNtukM', 'IZAnP8gC9vc', 'NN1Jn2KSoSQ', 'DlnlEYFU0HQ', '_ar2ENzmqb0', 'z97kjUA4clc', '3fSXx04FPEg', 'Zn66S3MRgxM', 'H-6xDMxcGSA', 'YYH8mNgV6Zo', 'cm_PpUQU-lk', '_pZBxNMKBFU', 'epV3faRsmLw', 'eEHTCcmkzJw', 'RT4O9jWkZik', 'jWaUBjlx0Sw', 'LCLOu3ON8F4', 'E74LXp-vxYg', 'kuxqqq7blJc', 'O8dKwgPSSUk', 'IP1oEacoXkM', 'gpEPdE2VWA4', 'PGRlGx_6Ehk', 'VwbGKC9P9tg', '7mbvu0biZgg', 'kMKRH21VzCs', 'yHUUOhxzBUk', '39_-6v6jTCY', 'rOXKcAruGE4', 'qQHlbazzfRQ', 'WXo5yzM9Ibw', 'dti56waifB4', 'CROxFHWZ0s4', 'CpC7lBcxzjM', 'A5Xe11OpE7Q', 'XRRgCPYRQvM', 'X0GJEHzvIlU', 'McSVkn0NdeA', 'FuSEMLcRBVY', 'qn1aw4FOM9g', 'wFTcjAeWi3M', 'fkW6HF9_UdY', '_-JR5TxKNSo', '7ecj88Q7pwk', 'FxGIEI0dWAM', 'I872wCLdLbE', 'WD_gUFOsjrM', 'kqapgpRAGiQ', 'ytvv6hQFWp8', '42kUIAUPsVE', 'tMuYJL96A_I', 'gRNsgSww7jQ', '1hBH-8JdPWE', 'qE4Aygimk0s', 'Ud2ko-ZDI38', 'IeTmKYls1vM', 'PM4Vu1B0gxk', 'RRshxnCn8Lk', 'Wzq2WGGX1v0', 'NiFdp4Uqys0', 'A-9g3isSOGM', 'EvFmG78rjq0', 'uQqNvGDRjjg', 'AlEyuIKuSmc', 'zUI1hH5uXgE', 'qCp4LLAVpiI', '8QkNQ1uxKX4', 'QLqNalPe0RA', 'x1Qw-pfM9HA', 'Amgr1UIYR1s', 'pY58mAGvGJo', 'n42ogaQn32o', 'I3AMPLzJjW8', 'yUNg9cigVqY', 'iB1mkgJaw4w', 'jVYjPVwCrDE', '1PZH0sTRPv0', 'ef6BG_XnCj8', '2ltCo-WT_pA', 'ywerdFNPUiA', '7gA0_YvrasQ', 'fYnyfx3UBxk', 'UGhLSQ4Bmp8', 'B7sjgB7mjWE', 'JxNoJ2rkHxk', 'PJ6hWQIUmJQ', 'aZUq6r4m7k4', '8hYct_bQNZA', 'ZFXrgzHu1KU', 'FhV-3wSWBo4', 'HVSVx593-MA', 'cZTwzI0DJZA', 'FlXXnDV48kU', 'ZJdHo7MJBeU', '-vygi0Cvz_c', 'k_RYBedEvDw', 'bz3VjG0AxGI', 'WwD-LlmXp5o', 'aHoHjaLWayk', '0l_PZ1mO_ZA', 'xPkGU1-qHhA', '8kfIvgJlzFs', 'oVCR-tMi0A0'];      var rand = myArray[Math.floor(Math.random() * myArray.length)];   Buffer.addToBufferWithPhoto.setPhotoUrl(""https:"
if New upvoted post by you (trigger_service: reddit) then Add track to a playlist (action_service: Spotify),
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),"var Texto = Twitter.newTweetByUser.Text;  var num = 6.0;  while(num >= 1 && num <= 10 ){    if(Texto.indexOf((""Magnitud ""+ num) ) >=0 ){      num = parseFloat((num + 0.1).toFixed(1));      break;      }else{        if(num >=9){          IfNotifications.sendNotification.skip();          break;        }        num = parseFloat((num + 0.1).toFixed(1));      }    }"
if New status message on page (trigger_service: Facebook Pages) then Post a tweet (action_service: Twitter),"if (FacebookPages.newStatusMessageByPage.Message.length >= 115) {   var subStr = FacebookPages.newStatusMessageByPage.Message.substr(0, 107);   subStr += "" [...] ""   Twitter.postNewTweet.setTweet(subStr + FacebookPages.newStatusMessageByPage.PageUrl); } else {   Twitter.postNewTweet.setTweet(FacebookPages.newStatusMessageByPage.Message + "" "" + FacebookPages.newStatusMessageByPage.PageUrl); }"
if New status message by you (trigger_service: Facebook) then Create a post (action_service: WordPress),Facebook.newStatusMessageByYou.From Facebook.newStatusMessageByYou.Message Facebook.newStatusMessageByYou.UpdatedAt
if Notification received from a specific app (trigger_service: Android Device) then Turn on lights (action_service: Philips Hue),
if New feed item (trigger_service: RSS Feed) then Send message (action_service: Telegram),"var Texto = Feed.newFeedItem.EntryTitle;  var rss = "" "";  rss= rss.concat(Texto);  var num = 6.0;  var snum = num.toString();  while(num >= 1 && num <= 10 ){    if(snum==""1""||snum==""2""||snum==""3""||snum==""4""||snum==""5""||snum==""6""||snum==""7""||snum==""8""||snum==""9""||snum==""10""){      snum=snum.concat("".0"");    }    if(rss.indexOf(snum) >=0 ){"
if New tweet by a specific user (trigger_service: Twitter) then Send message (action_service: LINE),"var text = Twitter.newTweetByUser.Text; if(text.indexOf(""技科大前支店"") === -1) Line.sendMessage.skip();"
if New feed item (trigger_service: RSS Feed) then Post to channel (action_service: Slack),var s = Feed.newFeedItem.EntryContent;  if(!s.match(/(東京|神奈川|横浜)/)){    Slack.postToChannel.skip();  }
if Generate Pet Activity Report (trigger_service: Link My Pet) then Call my phone (action_service: Phone Call (US only)),var minute = Meta.triggerTime.minute()  var minuteString = minute.toString()        if(minute%10 == 0 )  PhoneCall.callMyPhone.skip()
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 22 || timeOfDay < 8 ) {
if Get Collar Information (trigger_service: Link My Pet) then Send me an SMS (action_service: SMS),"var minute = Meta.triggerTime.minute()  var minuteString = minute.toString()  var runday = Meta.triggerTime.day()  var currentdate = new Date(LinkMyPet.collarInfo.CreatedAt).getDay()    var tempAmount =  parseInt(LinkMyPet.collarInfo.Temperature, 10);  if(minute%30 > 0 && tempAmount > 30 || (currentdate != runday) )    Sms.sendMeText.skip()"
if Get Collar Information (trigger_service: Link My Pet) then Send me an SMS (action_service: SMS),"var minute = Meta.triggerTime.minute()  var minuteString = minute.toString()  var runday = Meta.triggerTime.day()  var currentdate = new Date(LinkMyPet.collarInfo.CreatedAt).getDay()    var batteryAmount =  parseInt(LinkMyPet.collarInfo.Battery, 10);  if(minute%30 > 0 && batteryAmount < 100 || (currentdate != runday) )    Sms.sendMeText.skip()"
if Send IFTTT an SMS tagged (trigger_service: SMS) then Blink lights (action_service: Philips Hue),
if Connects to a specific WiFi network (trigger_service: Android Device) then Send an SMS (action_service: Android SMS),"AndroidMessages.sendAMessage.skip(""test"");"
if Every hour at (trigger_service: Date & Time) then Add photo to Buffer (action_service: Buffer),
if Every hour at (trigger_service: Date & Time) then Add photo to Buffer (action_service: Buffer),"var myArray = ['XVYz_QeiEBw', 'e6JaSgFPm4U', 'mA_lknGurfc', 'm8c9PKq2E2A', 'SPlaq4tHcOk', 'YdpDztAnW9w', '-JXrMLIg91g', 'ioy3bN5Irew', '2M_sDJ_agvs', 'O14abKtZ5iY', 'iPdcTDrcC-w', 'FSQsHQ-rDJA', 'AfGUx4-QVp4', 'xmGkzY--Fgg', 'DPnL-8JDtmw', 'PRSv65jkNBY', 'UCIZh0-OYPw', '8wwwDJvehKk', 'KT6o4bDYlh4', '1braZySlEKA', '_vPCiuXL2HE', 'ius5CoHQ-ao', 'vit8BCsqAho', 'Z8-6EI2tYtw', 'wLVMOygHlbs', 'jhMt5TTqJS0', 'E-X6zqkLmyk', 'uuNYkZizYpU', '7RQf2X6aXXI', '5y4ljzRrDFA', 'HN2M5L1VgZ8', 'JXsxH2shRgY', 'npbKYnJxDRw', 'ESYKQr9ENDU', 'muR8qY0WXM4', 'thChtpdyugw', 'hxBeG66Enlc', 'McmRfLKw8yg', '6mze64HRU2Q', 'VVVLN9tZo4g', 'gDgMcnjOnRA', 'm_EdUZqmAIk', 'IwirtfMD2H0', 'xarhNpLSHTk', 'EFOuJ1bATbg', 'jO1_hmxLNRc', 'QDq3YliZg48', 'qgXzAPdXQjA', 'p0SFfQzAwek', 'KMn4VEeEPR8', 'IRJHnNzGBRQ', 'X912jiy57JU', 'McSVkn0NdeA', 'WUo0EdSv9OU', 'XiHmMxoNzUU', '4P21IxWN7BA', 'HCmKuS0_szU', 'jyb5Ls8JnN0', 'GntGR-SHkXE', '29oO_Fj56Lg', 'ghj_rjQw8GQ', 'Sx_Yfe3onUs', 'k27oJ1jde6M', 'U_D5NWMmTTM', 'JP23z_-dA74', 'm82uh_vamhg', '9AoU5IOAaS0', 'YRLzGWh_M-c', '60wCqYf7Fg8', 'T-CgxOClNuU', 'UCIZh0-OYPw', '7RyfX2BHoXU', 'GiByF7Zwsbg', 'D_IG_9elRQQ', 'zhnKlABmTP0', '7igiZKszpGA', 'tPPi0jzLP_w', 'TLD6iCOlyb0', 'w02Uizl_rhQ', 'dti56waifB4', 'aEtl64kP8mk', 'tU_fcRUkljQ', 'CGemkkg7_IQ', 'VZSIm_cNAL8', 'IeId5LPtDy8', 'qrXPk89erXA', 'uLDmm65P5ZY', 'V53QmbO25Fs', 'lJstr7OYCoM', 'ZSvlTa6yARw', 'TMxUnMAAwFA', 'btGLkiMid2U', 'HvCtRFpxK8s', '31woi0a2n9s', 'fmz-B9At9iQ', 'na4MScNlx_8', '03SU9tzAHvY', 'lECl0oYhXnI', 'kzt6pRBfEVk', 'zAqtmSpBYQ8', '1vg0LlKxHG8', '9Jq5UvyXr8A', 'kVCRP3uiLiE', 'c1rOy44wuts', 'Yf0rh3onbBQ', 'Z6v4dSNayVg', 'VAdFzJJDzgg', 'A6WQ57dzHgU', 'QOL_IwPmj6E', '8PR1tT9UmmU', 'V63oM8OPJSo', 'mNCFOaaLu5o', 'e5uhsINjlPY', '07mSKrzKiRw', 'tqG48KOMKfY', 'Fg9l2rojs24', '7AqthDXNeEk', 'rMqbe4WLqXk', 'betmVWGYcLY', 'jGKBncKGbrc', '-UUGr3txNuc', 'VW880O5jk7M', 'PfK35Iw1JAo', 'D7qzQ234N0o', 'gOErbMaVUk0', 'rAU9uUDQRTg', 'uRvI1Q64vzg', 'x2-K3IL4VeA', 'wCpAx5fpUDQ', 'cJdDtt96et8', 'VuPIUePS_vU', 'PT1152jFqd4', 'MqJX_8EaStM', 'e370j8S8_Yw', '2a1iY-8G1rc', 'hD_qdaSO7Aw', 'KMn4VEeEPR8', 'dwnhS4IlQa4', 'A-tHpo6p9f8', 'KQvFT4xc-gQ', 'FD0Ga_KJTwM', 'VYEMbB7-oYU', 'Xh6BpT-1tXo', 'bvhEYmFU7ec', 'dnkM5wPjVdg', '3bh3elC0D7M', 'XmfcsYHEhoQ', 'sf_1ZDA1YFw', 'scgdtiUGQ2E', 'I3AMPLzJjW8', '60wCqYf7Fg8', 'hpCHLFknc2s', 'KputBgWH-Ek', 'FcywOWEIY7Y', '0ZL0O-eDOpU', '9AQI4yF2ZJ4', 'LkaGRQiic78', '_TvkKCnPnCM', 'L8vv8_Q4_WI', 'o_rKNRoNz8s', '0c_FThXR3FU', '-4pTZz6mywM', 'o114vBzekbA', 'fHuns1qUowI', 'wHaBKOHT5TY', 'Uru_R-zBEOE', 'PCgH93R_R8M', 'vcn2ndJ5LwE', '0G8iqixLkSU', 'zBsXaPEBSeI', '8XFsH5F1fss', '7rrgPPljqYU', 'gAIiRhzBF80', 'Y5dE5Bhxcog', 'uYc_xgcKVCU', 'bO73DhdL-mc', 'YmRbWVij1W8', '1gT773Pm8Mo', 'nUDLevhu62w', '8rRdnSDfS68', '0zHm2Jsf_oQ', 'wWjDH4m2emE', 'TLD6iCOlyb0', '9imStvf5ei0', '0S119AenbNk', 'AD8dDMFZv9U', '_IFipWi6cWc', 'PfK35Iw1JAo', 'GyDktTa0Nmw', '7uXn7nudorc', 'OXMX3R0KKx0', 'JGxdIlKy3lA', 'dCNgsF2XZI8', 'e2zNqOPXQus', 'DCdaCA_Bfnc', 'ZMESvQ3N_Xw', 'm82uh_vamhg', 'MGKGuMP9nLY', '61rUGGs6DUo', '83zRhEhFMfo', 'eHtM8lZrU2A', 'SYx3UCHZJlo', 'ubt6OzW2KBg', '3V8gdLbwDOI', 'QNmdDWCWKBw', 'Yt8yca2amrs', 'HQE7ryBQ2vE', 'AlEyuIKuSmc', 'h8T1Wa4u7oU', 'M1FUX2SDzyQ', 'ktQuuihh3_w', 'mHsDkAeVtGY', 'Gx0ZfLuEX9Y', '_UmLYV_9gR0', 'eyXArRm5tyY', 'uJ1fwrVerpA', 'NOY_-ZZiKT4', 'xarhNpLSHTk', 'HghSbNQO8jM', 'QgHvLSuIcLs', 'u5vx3Ke0_RM', 'JGkGBDuZXt4', 'OUbc8Y_6vew', 'Le7_qK9JaLU', 'nX2tkqsf_eI', '4SxaxnBHzcs', 'mlD9zI7FIhk', '-AFVBe7VGqQ', '-IZhwQpd7To', '-T0La6F_WrE', 'SRd8je3VIcE', 'Ao9UPWkE6a8', '6Q_PjiBEFl4', 'dZcoliS0DQ0', '6QfhbqfUz58', '71XkPe_1Ang', 'guNIjIuUcgY', 'w8CcH9Md4vE', '7vDReTYrg_k', '7RyfX2BHoXU', '43ScFMWx2xY', '3JZeW3rtg6E'];      var rand = myArray[Math.floor(Math.random() * myArray.length)];   Buffer.addToBufferWithPhoto.setPhotoUrl(""https:"
if Every hour at (trigger_service: Date & Time) then Add photo to Buffer (action_service: Buffer),"var myArray = ['f5sdemaT7XE', 'xi9TJ87x6ts', 'xsMW-HO3rx4', 'BvsEZITNA1o', 'z9F_yK4Nmf8', 'xr-y6Ruw7K8', 'AZMmUy2qL6A', 'qmZF9CptLKs', 'FIm2wWCClig', '2DH-qMX6M4E', 'FQ96bh4O1tY', '3beArYu-mUo', 'Ta0A1miYZKc', 'yBgC-qVCxMg', 'dyjH3YMblpo', '0gHru-hk2Qw', 'UC2PnErdJcc', 'JtGpJToxQ5c', 'I1RZSDvvStY', 'QP1dUyQ8WsI', '7aGWeUIf8W8', 'yPBHXvN3HII', 'FPz-Dd-xx4c', 'ADYFuP-I55Q', 'SqE0zjaYuFI', 'g1DcIUcdX9U', '01Qqkfz-ck8', 'dNysjOcQfqI', 'aoQrJe2FUGQ', 'nc6KT_Zp8Tg', 'rRljZzjNQAA', '1o41Wy3Z3kc', 'BeD3vjQ8SI0', 'IKHHRAtheHw', 'n1cbiw5wc_I', 'n8qbbQARci4', '6Se6ezRO7aI', 'hCQGqbZmsAk', 'XX4Y1j3rPjI', '2wcfY2qeFFE', 'q9BTZio6Br8', 'Dac1Yw8u3No', 'k42aEvMwUGA', 'WWb4gn130JI', 'DG-L9xZP-Lw', '6h0xlEZoYZY', 'KwnMOxpHLE4', 'gvkdncTaZu8', 'oRfYrsjcmlg', '2Pb0u1iVxGk', '6C6cEOBeE-E', 'MP2ceT9dYWE', 'MqEbMn6_db4', 'UhGZ-k6EB_g', 'u_o6H4aBSx4', 'DjJxfuZuzYY', 'g-kCxJpPI_A', 'SspMfMYtDHQ', 'xWfpFfza9e8', '2KwJ-brHd2I', 'uvc94hsHGa8', '_e8bdUdZFis', 'toz-zT_KiX4', 'SF3E7T7ABzI', 'mSzCl0H4beY', 'hw0XvPxGHN4', 'gMUAUvCibj0', 'Qag2W_cL1jg', 'qWY5mvs23J8', '9JygzJGUdQ0', 'ftdfdjMOQxw', 'QomQL39RUDc', 'AI96hNMcsBk', '6qurGV0itjE', 'pK8HjaLjBXM', 'jWl7xpm2q64', 'Q_MVeyYeb5w', 'uMBjWsbL_4A', 'QJtOQeMmuxY', 'BaeQ7Dsta1E', 'UVvTco3qnzQ', 'mve7iIB4DLE', 'AZBgS29j4wM', 'q5DrtU7oLG8', 'GYEBshjDAfc', 'dXnI02pHf8A', 'OPd3H2hbjQI', 'vlXAcYROlKY', 'hLpsGTn-Urw', 'i6VbKXKXiB0', 'huW_b5gK280', 'b92jwJ8u7Tk', 'wwhK2VAkjBQ', 'sFpvo65mpU8', 'ulD2V_3APPc', 'R6KFdvYVkMY', 'btxmT_rhxCw', 'TAKEKSne84M', 'a1mVFtmmWjI', 'PoAkzayxhYE', 'dvl4C_4S9Q0', '69RbQR4o748', 'oyHohgzK4XM', '-9JcQt_G2oE', 'USnV9kXe-_I', 'adbboP7DQ_A', 'EaXeNQ_7jKQ', 'N561DZ3NfVM', '_-q9qibhjVI', '_aBjDDrvRhU', 'M-ViumxBQjk', 'ydGRmobx5jA', 'EMTEBdBaG-A', 'aZfp-XAMbNQ', 'ZkrueVypQZU', 'VzOC9ev4JEU', 'xY4r7y-Cllo', 'mHVP2NByegY', 'nIB41zFxu_M', 'zsfKWNKbGn8', '_9yQgzzkZAc', 'VDAffHQpiO8', '9n3x1qCZVSo', 'xfbNe3OrW6Q', 'esiLTMoUS9Y', '-UtgKgFbLt4', 'fyBW08a-m_I', '8tY7wHckcM8', 'xu2WYJek5AI', 'keZRvFU_TBI', 'rJc1RioyERQ', 'qr7tsSwDOg0', 'r0UQ0dDpC4E', 'EIYtJ2WaK68', '_MeRaXKnEYo', 'G_1V58E0TyM', 'uulf3173LPU', 'o2T2djQwQX8', 'zGEU2JjQiPE', 'x2NSbaNt8TI', '6886qBb57L4', 'QHFTLr29gCc', '8C8R06Zwgpk', 'jJWtGV4QB4k', 'NWLCTQS0WUw', '66nFXzb0_oo', 'P7I7RobHPz4', 'BB7UjsOxZqs', 'HqS2oz4S7W8', 'qBX6EMdy0a4', '7u6Jmwg2ZQ0', 'waZEHLRP98s', '3fJOXw1RbPo', '63Znf38gnXk', 'A3nkfpJFGJo', 'tvicgTdh7Fg', 'OivhEmfO-kk', 'NhU0nUR7920', 'TvN54bnuQg8', 'n1Pl_Lu2CC4', 'j6MenunuSKg', 'cYMQkV0Oon4', 'lWHzv_HT_zM', 'EjJpPNdc8NY', 'VM42BbVCf_0', 'WaNZvXEnYok', '3A0OWdyBc4M', 'rYWz3Q88P8g', 'e9odskK2bSM', 'LQmxzVuoWFo', 'YccQtENMuXw', 'F_J14NKUqLQ', 'eqvj5r8nbH8', 'eJ_OyOeGFHI', 'qlHRuDvaxL8', 'UqImUsRbdiw', 'nlQbjyPRfkA', 'yWiNfJfPDIE', 'RgwRFjf5Sg8', 'srNcHlthiyI', 'igSCxtyORzY', 'EMolEkyeMV4', 'Kb58cV1GhZk', 'XvgtPNWCQcw', 'uyE5g_fdM54', 'vcafGFqUH10', 'BZMMBjZpCVo', '6Khbjy2v-GE', 'us5ecqWbJkw', 'nYiCGILaoVI', 'Hx7S6mdwrHc', 'a_Q8MzP3xR4', 'yGYL1AQjcZU', 'oT4hTqWoZ6M', '6ufqEvxq90w', 'ocaF1VFnzBM', 'y2lXRKD-klc', 'BnXGBpGy-bQ', 'wofDw8uqX6I', 'kasZSTn5cxs', 'FHjmmLeEipo', 'He5pDa_PO9k', '26f8ZvTWV4E', 'xZrGCE0Lf_k', 'SRyVehZ4zWw', 'qw8IJEIWoXg', '9UFwwZNNjz8', 'HlvEoilmRKc', 'Oxzw-im302A', '0cOAVdr9Arg', 'XPsDpoyYhrM', 'nC5-Eptu1JE', '0C3dJNKROzc', 'pkjYhveQB0Q', 'fnp2Jlpldfw', 'jwKqH75lXnw', 'yHd7TFfneXw', 'v7TriL0KTkk', 'IR3hrNqyM90', '0RanOcSEpAo', 'Gtg72FwlF60', 'tUOHktP386E', 'UMezRzoUR4U', '1yOkW4UwYbA', 'rWotMddrvUM', 'z3sW5G1b1Mo', 'Vh_fuWuddW4', 'k7UyfYvOtbg', 'yZ03FGkNCuw', 'Y0YZe-fShzk', 'B9z9TjfIw3I', 'X1bKgm7k7Uc', 'xBFEhnAMlFI', '4nzR09f46a0', 'waTo4DNZ4zE', 'NEF_BN64T_8', 'jkwbOfd3xJI', 'ZrEdxOAkWx0', 'ZyS_ZZ9swoM', 'Nnr9Wy8UwpE', 'CsPTZw6Ili4', 'Mta8r0bxhbo', 'BG8te7fVCqU', 'WZZX44gy5mw', 'fpHiMJWjhH0', 'QrKYNC2Zrms', 'DXyUu-e8PZc', 'XFAZooVKln4', 'E1h4yE_Wx7E', 'mjQpWnLzKD0', 'DPjOUHmvZIY', 't8ueiaGQmxA', 'FXzjYoDYoGg', '7gV21XdcGuw', '5l7Zz58hfEQ', 'Wdclqtb79ko', '-M-2FdLC9uQ', 'l5Tv0k_lbWI', 'JhwRXGadsDY', 'z7Z6vUPkLbQ', 'OCqR0qG1hA0', '4bI5JxMbkqM', '0-y0nOr8ycw', 'EtVcfGToHkQ', 'YU2km4sMh5I', 'aS0NPLsM2so', 'uBxDB5m7mRo', '948RpY3gj4c', 'TCCCKgdFmBo', 'hpX5-me5Lug', 'Lpj6e4wyg_0', 'hbwdmqcmP6k', 'H-_Qtte5YU8', 'WI62j3uzORo', 'v4slbWum0JY', 'ojEK3p9cDg4', 'ozVQrfENFOs', 'Rr9zn33OMbk', 'WJkc3xZjSXw', 'jsRng6jLChE', '1KHt5lXbnb8', 'LHJ55Lhy9wo', 'qzgN45hseN0', 'TNTrEt3IoJk', 'Lvzc8HQ8CSk', 'khsD8guf4ps', 'gtf7v1MaTDE', '7QEerRxEtKQ', 'XgLYwIVBleA', 'Ao2eNowhWVM', 'qbcAfJApLbE', 'zuEX5mOFvsg', 'X9kLIElxvdQ', 'vR4k9qvXsEo', 'Zog2Z07M1rw', 'Wj5hDqd9FMI', 'kSj_xTPMrx4', 'EnCaUE4QNOw', '5Rhl-kSRydQ', 'eDif4JGhYes', 'xqV9QdGOSas', 'ilkTnuMunP8', 'h4bBVo_CpqQ', 'pl1mhwMctJc', 'gcCcIy6Fc_M', 'bWVDTNHcXPk', 'gL84ogFsV6s', 'bQl2kRQyUE8', 'UpGI7J2ek5s', 'CKYdtIyd_mw', 'AMdhNs9uSlQ', 'AlscQt7Utz4', 'RTKaEcGKarQ', 'DUXACn8tgp4', 'V7uP-XzqX18', '63pP6_FlnMY', 'K9gW89N6uMQ', 'sK1hW5knKkw', 'IejSZKGu1mY', '9_n9e0ZeSrQ', 'aAcoYBS98F4', 'F0HUEpuXsoU', 'ck3HFWw2OiM', '359AOEwnYcw', 'yOujaSETXlo', 'rnAsJ38qio8', 'SId-lmFXSDU', 'hUFcg942g0U', 'rM-9sF8E8_A', '-xt5zj6QVY0', 'dheDxkDi-Bs', 'doEFLY2cFY8', 'W6dRiZHDZAo', 'gHmVElA9HE0', 'kvvzF4dQEpg', 'pM00oiCIifU', 'AoPIbSXOFUk', 'PLBcLq3GQZA', '6JBhbItRvCA', 'VEoUWF2iQlQ', 'zcGJc069A-I', '9mCc1JLmAx8', 'eyoKIj3WTY4', '45lDCN6lVVA', 'hYboSFEr6Qk', 'Jky1XZp--hI', 'YuR4iKgPOGA', 'LUfmqLfEAoE', 'P-_Z8eKmr1E', 'tQeTKUnI4Ow', 'QP4szQCekdo', 'G9kU5t4S0Kg', 'XBaTPzmXXl8', 'ebnlHkqfUHY', 'KdVK-qWxQJo', 'ZZK11neY85c', '4DEVtgEQl9s', '2tDdnkqpV0A', 'p4w8TyVsNSs', 'UCfj5HpG2UU', 'tYQa72cPYgI', 'jyhFoGaIjOg', '0-W0OAQEHVE', 'PnPWRt5_hEE', 'JawaAnA5Fyo', 'BxRSlJhFHus', '2BWYRhBNmog', 'q5ffDilxQT8', 'j3zyp_i9lfI', 'KyK0TgPW8Ro', 'WbZzfeouU68', 'G2qXhmpUlLE', 'Kcx_sR3p9Ig', '_epEhaK6Xsw', 'Tkp5EAQAM1Q', 'PRU6-3v8n7I', 'moq5D_jMrF0', 'XdIOaD30OEU', 'lN9znqU0Qhw', 'Dvt5tWJ7PMU', 'Jd-qUfkjYZY', 'T4hVH_YvTvs', 'QbJFw5xbtME', 'QtHzR4CN1kQ', 'b3u6NeaiGkA', 'An8ev1ScpFA', '5dehYy5BkRw', 'YMVCseSYVXI', 'MEBqI9fzqao', 'qwRJDxBuxUQ', 'E5p9lxiYHDY', 'GUWdkUjYlKA', 'c1XZjkM_-q8', 'GKLIsLZxhj0', 'F_VpK14kvM8', 'eoxHOqvCzkE', 'E0TEz8wSXTU', 'kyrbBTfAAVs', 'VTC2WZz_jZ8', '4aKmjx7xYHA', 'MgODEDt57rY', '_Kv8OabKqHg', 'X1zFUnr52yM', '60AChC_vHHU', '2GAXS--o2V0', 'bd1-NY5N0M4', 'DXdKYLFXPBY', 'WP86vA-Sx4c', '5IlTXpWyheE', '5DfGmkLdl90', 'IEk6Wv-c3mM', 'gh44sYZHB98', '6YDQA_DpZco', '4-PGN5cAgY8', 'gpfpyJLEWc8', 'C1ESp_5-n30', 'E_2-xZDoy1M', 'CsPv_rjH3mk', 'ssEQdOiKd8U', 'nnJirEnWf3U', 'LhXav-tQkL4', 'hGuGRayJrv0', 'dSloTNyqwPY', 'm1PFxGQ-5x0', '57EhJPlGyxE', 'bv_7Qb5kXC8', 'GMM7YXyUbw0', 'SDoMyyylpnc', 'LZz_aAz4_vY', 'loivQnpVtgI', 's7pEabieErc', 'Sb_znsK7x_Q', 'CJpzC8me-NA', 'wPwXGGG2HyI', '5-MNAjL81Iw', 'mQj1JmAk_54', 'qYgDrCHV1B0', 'ZnxVCij0xro', '4RQNfdvSZe0', 'AWu2De0kt_s', 'y54gnzC86lw', 'l6juNKOlzvs', 'zQ2nPtmKA5Y', 'wlVGDJZxZKQ', '1Y50KR9iXOo', 'VFP39oOttsY', 'vIKQqHxwa5M', 'BquI_Nrcuxw', 'CfhtS2nj95c', 'Qmx7Q1dXudo', '5QXBWrucBJA', 'U65cAiZ-sF8', 'pj11YSCKE8o', 'H7c2pd75_Kw', 'X12X4uTDInQ', 'fb9kOpMerWU', 'LLc-bFnJJ1o'];      var rand = myArray[Math.floor(Math.random() * myArray.length)];   Buffer.addToBufferWithPhoto.setPhotoUrl(""https:"
if Every hour at (trigger_service: Date & Time) then Add photo to Buffer (action_service: Buffer),
if Every hour at (trigger_service: Date & Time) then Add photo to Buffer (action_service: Buffer),"Buffer.addToBufferWithPhoto.setPhotoUrl(""https:"
if New tweet by a specific user (trigger_service: Twitter) then Post a tweet (action_service: Twitter),
if New tweet by a specific user (trigger_service: Twitter) then Post a tweet (action_service: Twitter),
if New tweet by a specific user (trigger_service: Twitter) then Post a tweet (action_service: Twitter),
if New tweet by a specific user (trigger_service: Twitter) then Post a tweet (action_service: Twitter),
if New tweet by a specific user (trigger_service: Twitter) then Post a tweet (action_service: Twitter),
if New tweet by a specific user (trigger_service: Twitter) then Post a tweet (action_service: Twitter),
if New tweet by you (trigger_service: Twitter) then Create a status message (action_service: Facebook Pages),Twitter.newTweetByYou.Text Twitter.newTweetByYou.LinkToTweet
if New follower (trigger_service: Twitter) then Post a tweet (action_service: Twitter),"let User = Trigger.LinkToProfile.replace(/(https?\:\/\/twitter\.com\/)/g, '@');  Twitter.postNewTweet.setTweet(""Hey "" + User + "", thanks for following me! Here is a quick video I made just to say hi! https:"
if New tweet by a specific user (trigger_service: Twitter) then Post a tweet (action_service: Twitter),
if New tweet by you (trigger_service: Twitter) then Upload a photo from URL (action_service: Facebook Pages),"var estado = Twitter.newTweetByYou.Text var foto = Twitter.newTweetByYou.LinkToTweet var comp = estado.substr(0,2)  if (comp ==  ""10""){   FacebookPages.createPhotoPage.setPhotoUrl(foto)   FacebookPages.createPhotoPage.setMessage(""Selfie Button #DennysIrazú"")   FacebookPages.createPhotoPage.setAlbum(""Selfie Button"") }  else if (comp ==  ""11""){   FacebookPages.createPhotoPage.setPhotoUrl(foto)   FacebookPages.createPhotoPage.setMessage(""Selfie Button #DennysPinares"")   FacebookPages.createPhotoPage.setAlbum(""Selfie Button"") }  else if (comp ==  ""12""){   FacebookPages.createPhotoPage.setPhotoUrl(foto)   FacebookPages.createPhotoPage.setMessage(""Selfie Button #DennysAeropuerto"")   FacebookPages.createPhotoPage.setAlbum(""Selfie Button"") }  else{   FacebookPages.createPhotoPage.skip() }"
if New tweet by a specific user (trigger_service: Twitter) then Post a tweet (action_service: Twitter),
if New tweet by a specific user (trigger_service: Twitter) then Post a tweet (action_service: Twitter),
if New tweet by a specific user (trigger_service: Twitter) then Post a tweet (action_service: Twitter),
if New tweet by a specific user (trigger_service: Twitter) then Post a tweet (action_service: Twitter),
if New tweet by a specific user (trigger_service: Twitter) then Post a tweet (action_service: Twitter),
if New tweet by a specific user (trigger_service: Twitter) then Post a tweet (action_service: Twitter),
if New tweet by a specific user (trigger_service: Twitter) then Post a tweet (action_service: Twitter),
if New tweet by a specific user (trigger_service: Twitter) then Post a tweet (action_service: Twitter),
if New bus advisory (trigger_service: NJ Transit) then Send a notification from the IFTTT app (action_service: Notifications),"var Hour = Meta.currentUserTime.hour() var Day = Meta.currentUserTime.day()  if (Day==6 || Day==7) {   IfNotifications.sendNotification.skip(""Not a weekday"") }  else if (Hour < 7 || (Hour > 9 && Hour < 5) || Hour > 19) {   IfNotifications.sendNotification.skip(""Not commuting hours"") }"
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),"if (Twitter.newTweetByUser.Text.indexOf(""SNES"") < 0   && Twitter.newTweetByUser.Text.indexOf(""Super NES"") < 0   && Twitter.newTweetByUser.Text.indexOf(""Super Nintendo"") < 0) {     IfNotifications.sendNotification.skip() }"
if New feed item (trigger_service: RSS Feed) then Post a tweet (action_service: Twitter),"if(Feed.newFeedItem.EntryContent.indexOf(""@"") > 0)  {    Twitter.postNewTweet.skip();  }"
if Any card purchase (trigger_service: Monzo) then Move money out of a pot (action_service: Monzo),"if ( Monzo.cardPurchase.Category == ""Transport"" ) {    Monzo.potWithdraw.setAmount(Monzo.cardPurchase.AmountInAccountCurrency)  } else {    Monzo.potWithdraw.skip(""Not a Transport Purchase"")  }"
if Any card purchase (trigger_service: Monzo) then Move money out of a pot (action_service: Monzo),"if ( Monzo.cardPurchase.Category == ""Entertainment"" ) {    Monzo.potWithdraw.setAmount(Monzo.cardPurchase.AmountInAccountCurrency)  } else {    Monzo.potWithdraw.skip(""Not an Entertainment Purchase"")  }"
if Any card purchase (trigger_service: Monzo) then Move money out of a pot (action_service: Monzo),"if ( Monzo.cardPurchase.Category == ""Eating Out"" ) {    Monzo.potWithdraw.setAmount(Monzo.cardPurchase.AmountInAccountCurrency)  } else {    Monzo.potWithdraw.skip(""Not an Eating Out Purchase"")  }"
if Any card purchase (trigger_service: Monzo) then Move money out of a pot (action_service: Monzo),if (Monzo.cardPurchase.AccountCurrencyCode == Monzo.cardPurchase.LocalCurrencyCode) {   Monzo.potWithdraw.skip(); }  Monzo.potWithdraw.setAmount(Monzo.cardPurchase.AmountInAccountCurrency)
if Any card purchase (trigger_service: Monzo) then Move money out of a pot (action_service: Monzo),var Merchant = Monzo.cardPurchase.MerchantName  var Currency = Monzo.cardPurchase.LocalCurrencyCode  var ForeignMerchants = ['atm'];  var CurrencyCode = ['gbp'];
if Every day at (trigger_service: Date & Time) then Move money into a pot (action_service: Monzo),
if Any card purchase (trigger_service: Monzo) then Move money into a pot (action_service: Monzo),var amount = parseFloat(Monzo.cardPurchase.AmountInAccountCurrency); var c = Math.ceil(amount); var remainder = c - amount; var roundedRemainder = remainder.toFixed(2); if (amount > 0 && remainder > 0) {   Monzo.potDeposit.setAmount(roundedRemainder); }
if Any card purchase (trigger_service: Monzo) then Move money into a pot (action_service: Monzo),var amount = parseFloat(Monzo.cardPurchase.AmountInAccountCurrency); var remainder = (Math.ceil(amount*2)/2) - amount var roundedRemainder = remainder.toFixed(2); if (amount > 0 && remainder > 0) {   Monzo.potDeposit.setAmount(roundedRemainder); }
if Any card purchase (trigger_service: Monzo) then Move money into a pot (action_service: Monzo),"var saveAmount = 10 - parseInt(Monzo.cardPurchase.AmountInAccountCurrency.slice(-1))  Monzo.potDeposit.setAmount(""0.0"" + saveAmount.toString())"
if Every day at (trigger_service: Date & Time) then Move money into a pot (action_service: Monzo),var day_of_year = Meta.currentUserTime.format('DDD'); var amount = parseInt(day_of_year) / 100; Monzo.potDeposit.setAmount(amount.toFixed(2));
if New activity by you (trigger_service: Strava) then Move money out of a pot (action_service: Monzo),var distance = parseInt(Strava.newActivityByYou.DistanceMeters); var amount = distance/1000; Monzo.potWithdraw.setAmount(amount.toFixed(2));
if Current condition changes to (trigger_service: Weather Underground) then Change color (action_service: Philips Hue),let currentHour = Meta.currentUserTime.hour(); var day = Meta.currentUserTime.weekday();  if (currentHour < 5 || currentHour >= 9) {   Hue.setColorAllHue.skip()   IfNotifications.sendNotification.skip(); }  else if (day == 0) {
if New service alert on Rapid Ride A line (trigger_service: King County Metro) then Send me an email (action_service: Email),var Hour = Meta.currentUserTime.hour()
if New tweet by a specific user (trigger_service: Twitter) then Save for later (action_service: Pocket),var linkRegex = /newsletter.*(https:\/\/\S+)/ var matchResult = linkRegex.exec(Twitter.newTweetByUser.Text);  if (matchResult && matchResult.length === 2) {   Pocket.readItLater.setUrl(matchResult[1]); } else {   Pocket.readItLater.skip('Likely not Money Stuff'); }
if Any card purchase at a merchant (trigger_service: Monzo) then Send a rich notification from the IFTTT app (action_service: Notifications),"var format = 'hh:mm:ss'    var beforeTime = moment('11:30:00', format);  var afterTime = moment('13:30:00', format);    if (Meta.triggerTime.isBetween(beforeTime, afterTime) && Meta.triggerTime.isoWeekday() < 6) {    var PMT = parseFloat(Monzo.cardPurchaseWithMerchant.AmountInAccountCurrency) * 20;    var r = 0.07;    var n = 12;    var t = 10;    var amount = PMT * ((Math.pow((1 + r/n),(n*t)) - 1) / (r/n)) * (1+r/n)    var url = ""https:"
if Any card purchase at a merchant (trigger_service: Monzo) then Send a rich notification from the IFTTT app (action_service: Notifications),"var format = 'hh:mm:ss'    var beforeTime = moment('11:30:00', format);  var afterTime = moment('13:30:00', format);    if (Meta.triggerTime.isBetween(beforeTime, afterTime) && Meta.triggerTime.isoWeekday() < 6) {    var amount = parseFloat(Monzo.cardPurchaseWithMerchant.AmountInAccountCurrency) * Math.pow(1.000191780821917808,3650);    var url = ""https:"
if Any new note (trigger_service: Note widget) then Log sleep (action_service: iOS Health),"var values = DoNote.doNoteNewCommandCommon.NoteText.split("" "", 2) if (values.length > 1) {   IosHealth.logSleep.setAsleepAt(values[0])   IosHealth.logSleep.setDateSleepEnded(values[1]) } else {   IosHealth.logSleep.skip(""Enter time feel asleep and time awoke, separated by a space"") }"
if New file in your folder (trigger_service: Google Drive) then Post to channel (action_service: Slack),if (Trigger.Filename.match(/~\$/i)) {  Slack.postToChannel.skip('Temp File Was Skipped')  }
if Opened (trigger_service: SmartThings) then Call my phone (action_service: Phone Call (US only)),"var hour = Meta.currentUserTime.hour()  if (hour < 22 && hour > 6) {   PhoneCall.callMyPhone.skip(""Not during sleeping hours"") }  else{  }"
if Any new SMS received (trigger_service: Android SMS) then Post to channel (action_service: Slack),"var text = AndroidMessages.receivedAMessage.Text.replace(/잔액.*/g, """");  Slack.postToChannel.setMessage(text);"
if New story (trigger_service: Slashdot) then Send a notification from the IFTTT app (action_service: Notifications),"var title = Trigger.EntryTitle var subject = 'Ask Slashdot'  if (title.indexOf(subject) < 0) {    IfNotifications.sendNotification.skip(""Not an 'Ask Slashdot' article"") }"
if Current temperature rises above (trigger_service: Weather Underground) then Activate Scene (action_service: Hunter Douglas PowerView),"var hour = Meta.currentUserTime.hour()     if (hour >= 8 && hour < 20) { (""Not nighttime"") }"
if New feed item (trigger_service: RSS Feed) then Send a notification from the IFTTT app (action_service: Notifications),const content = Feed.newFeedItem.EntryContent  IfNotifications.sendNotification.setMessage(   content
if New feed item (trigger_service: RSS Feed) then Send a notification from the IFTTT app (action_service: Notifications),const content = Feed.newFeedItem.EntryContent  IfNotifications.sendNotification.setMessage(   content
if New feed item (trigger_service: RSS Feed) then Send a notification from the IFTTT app (action_service: Notifications),const content = Feed.newFeedItem.EntryContent  IfNotifications.sendNotification.setMessage(   content
if New feed item (trigger_service: RSS Feed) then Send a notification from the IFTTT app (action_service: Notifications),const content = Feed.newFeedItem.EntryContent  IfNotifications.sendNotification.setMessage(   content
if New feed item (trigger_service: RSS Feed) then Send a notification from the IFTTT app (action_service: Notifications),const content = Feed.newFeedItem.EntryContent  IfNotifications.sendNotification.setMessage(   content
if New feed item (trigger_service: RSS Feed) then Send a notification from the IFTTT app (action_service: Notifications),const content = Feed.newFeedItem.EntryContent  IfNotifications.sendNotification.setMessage(   content
if Tomorrow's weather report (trigger_service: Weather Underground) then Send a notification from the IFTTT app (action_service: Notifications),if (parseInt(Weather.tomorrowsWeatherAtTime.LowTempFahrenheit) > 40) {    IfNotifications.sendNotification.skip();  }
if Button press (trigger_service: Button widget) then Send yourself an email (action_service: Gmail),
if Any card purchase (trigger_service: Monzo) then Create a detailed event (action_service: Google Calendar),var Address = Monzo.cardPurchase.MerchantAddress
if Any card purchase at a merchant (trigger_service: Monzo) then Add reminder to list (action_service: iOS Reminders),"var reminderTime = Meta.triggerTime.add(2, 'h'); IosReminders.createReminderIosReminders.setAlarmDate(reminderTime.format(""M/DD/YYYY"") + "" at "" + reminderTime.format(""h:mm A""))"
if New event added (trigger_service: Google Calendar) then Create calendar item (action_service: Office 365 Calendar),"if(GoogleCalendar.newEventAdded.Title.length > 0)    Office365Calendar.createNewCalendarItem.setSubject(GoogleCalendar.newEventAdded.Title)  else    Office365Calendar.createNewCalendarItem.setSubject(""Untitled Event"")  if(GoogleCalendar.newEventAdded.Where.length > 0)    Office365Calendar.createNewCalendarItem.setLocation(GoogleCalendar.newEventAdded.Where)  else    Office365Calendar.createNewCalendarItem.setLocation(""Location unrecorded"")    Office365Calendar.createNewCalendarItem.setBody(""GBS-related work."")  Office365Calendar.createNewCalendarItem.setTime(GoogleCalendar.newEventAdded.Starts)"
if New story on SFGATE homepage (trigger_service: SFGATE) then Add item to Reading List (action_service: iOS Reading List),"var title = Trigger.EntryTitle var subject = 'Mission'  if (title.indexOf(subject) < 0) {    IosReadingList.createReadingListItem.skip(""Not related to the Mission"") }"
if Any outgoing phone call ends (trigger_service: Android Phone Call) then Create a detailed event (action_service: Google Calendar),"var s_length = parseInt(AndroidPhone.placeAPhoneCall.CallLength);  var endTime = moment(moment(AndroidPhone.placeAPhoneCall.OccurredAt, 'MMMM dd, YYYY at hh:mmA').add(moment(AndroidPhone.placeAPhoneCall.CallLength, 'seconds')), 'MMMM dd, YYYY at hh:mmA').toString();  var min = moment(moment(AndroidPhone.placeAPhoneCall.OccurredAt, 'MMMM dd, YYYY at hh:mmA').add(1,'minutes'), 'MMMM dd, YYYY at hh:mmA').toString();    if(s_length>120){    GoogleCalendar.addDetailedEvent.setEndTime(endTime);  }else{    GoogleCalendar.addDetailedEvent.setEndTime(min);  }"
if Task completed (trigger_service: Remember The Milk) then Quick add event (action_service: Google Calendar),"if(Rememberthemilk.taskCompleted.Tags.indexOf(""trackthis"") === -1) {   GoogleCalendar.quickAddEvent.skip(); } else {   let timestamp = moment(Meta.triggerTime)                   .format('MMMM Do YYYY, h:mma');   let list = Rememberthemilk.taskCompleted.List;   let taskName = Rememberthemilk.taskCompleted.Name;   let taskLink = Rememberthemilk.taskCompleted.LinkToTask;   let taskText = `${list}"
if New event added (trigger_service: Google Calendar) then Create a calendar event (action_service: iOS Calendar),
if Tomorrow's weather report (trigger_service: Weather Underground) then Create a detailed event (action_service: Google Calendar),
if Any new note (trigger_service: Note widget) then Log calories consumed (action_service: iOS Health),"var values = DoNote.doNoteNewCommandCommon.NoteText.split("","", 2) if (values.length > 1) {   IosHealth.logCaloriesConsumed.setFoodDescription(values[0])   IosHealth.logCaloriesConsumed.setNumberOfCalories(values[1]) } else if (values.length > 0) {   IosHealth.logCaloriesConsumed.setNumberOfCalories(values[0]) } else {   IosHealth.logCaloriesConsumed.skip(""No data provided"") }"
if Caavo search (trigger_service: Caavo) then Set thermostat hold for X hours (action_service: ecobee),"if (Caavo.voiceSearch.Text.toLowerCase().indexOf(""set the temperature"") < 0) {   Ecobee.holdHoldhours.skip(); }"
if New bus advisory (trigger_service: NJ Transit) then Send me an SMS (action_service: SMS),"var Hour = Meta.currentUserTime.hour() var Day = Meta.currentUserTime.day()  if (Day==6 || Day==7) {   Sms.sendMeText.skip(""Not a weekday"") }  else if (Hour < 7 || (Hour > 9 && Hour < 5) || Hour > 19) {   Sms.sendMeText.skip(""Not commuting hours"") }"
if You enter an area (trigger_service: Location) then List recommended shows (action_service: Trakt),var day = Meta.currentUserTime.day() var hour = Meta.currentUserTime.hour() let index = Math.floor((Math.random() * Trakt.recommendedShows.length)) if (day != 1) {   IfNotifications.sendRichNotification.skip() }  else if (hour > 16 && hour < 19) { IfNotifications.sendRichNotification.setLinkUrl(Trakt.recommendedShows[index].Trailer) IfNotifications.sendRichNotification.setTitle(`You made it through the work day!!`) IfNotifications.sendRichNotification.setMessage(`Put your feet up and relax with ${Trakt.recommendedShows[index].Title}!`) }
if You enter an area (trigger_service: Location) then Dock robot (action_service: iRobot),var timeOfDay = Meta.currentUserTime.hour();    if (timeOfDay > 0 && timeOfDay < 17) {    Irobot.dockRobot.skip()  }
if You exit an area (trigger_service: Location) then Send an SMS (action_service: Android SMS),"var timeOfDay = Meta.currentUserTime.hour();  if (timeOfDay < 17) {   AndroidMessages.sendAMessage.skip(""It's too early to be going home""); }"
if Your SkyBell HD‘s button was pressed (trigger_service: SkyBell HD) then Send me an email (action_service: Email),"var Day = Meta.currentUserTime.day() var  Hour   =    Meta.currentUserTime.hour()  if (Day = 6) {   Skybell.record60sOfVideo.skip(""Not a weekday"")   Email.sendMeEmail.skip(""Not a weekday"") }  else if (Day = 7) {   Skybell.record60sOfVideo.skip(""Not a weekday"")   Email.sendMeEmail.skip(""Not a weekday"") }  else if (Hour > 17 || Hour < 9) {   Skybell.record60sOfVideo.skip(""Not a weekday"")   Email.sendMeEmail.skip(""Not a weekday"") }"
if Motion detected (trigger_service: Arlo) then Start recording (action_service: Arlo),"var Day = Meta.currentUserTime.day() var  Hour   =    Meta.currentUserTime.hour()  if (Day = 6) {   Arlo.record.skip(""Not a weekday"") }  if (Day = 7) {   Arlo.record.skip(""Not a weekday"") }  if (Hour > 17 || Hour < 9) {   Arlo.record.skip(""Not working hours"") }"
if You enter an area (trigger_service: Location) then Send an SMS (action_service: Android SMS),var timeOfDay = Meta.currentUserTime.hour() var dayOfWeek = Meta.currentUserTime.isoWeekday()  if (!((timeOfDay >= 15 && timeOfDay <= 20 ) && (dayOfWeek >= 1 && dayOfWeek <= 5))) {
if You enter an area (trigger_service: Location) then Save toward a goal (action_service: Qapital),var timeOfDay = Meta.triggerTime.minute() if (timeOfDay >= 0905 || timeOfDay <= 0855) Qapital.saveTowardGoal.skip
if New activity by you (trigger_service: Strava) then Move money into a pot (action_service: Monzo),var distance = parseInt(Strava.newActivityByYou.DistanceMeters); var amount = distance/1000; Monzo.potDeposit.setAmount(amount.toFixed(2));
if Any new photo by you (trigger_service: Instagram) then Create a photo post (action_service: Tumblr),"let postText;  let postTextonly;  let postTextonlyHeadline;  let posthashesonly;  let posthashesonlyLen;  let posthashesonlytext;  let posthashesonlytextkomma;  postText = Instagram.anyNewPhotoByYou.Caption;  var regexp = new RegExp('#([^\\s]*)', 'g');  postTextonly = postText.replace(regexp, '');  postTextonlyHeadline = postText.slice(0, 40)+' ...';  posthashesonly = postText.match(regexp);  posthashesonlyLen = posthashesonly.length;  posthashesonlytext = '';  let i;  for (i = 0; i < posthashesonlyLen; i++) {      posthashesonlytext += posthashesonly[i]+' ';  }  posthashesonlytextkomma = posthashesonlytext.replace(/ #/g,',');  posthashesonlytextkomma = posthashesonlytextkomma.replace('#','');  posthashesonlytextkomma = posthashesonlytextkomma.replace(' ','');"
if New tweet by a specific user (trigger_service: Twitter) then Send photo (action_service: Telegram),"var re_link_img = /pic\.twitter\.com\/([0-9a-zA-Z]*)/; var matches = re_link_img.exec(Twitter.newTweetByUser.TweetEmbedCode);  var txt = Twitter.newTweetByUser.Text || """" var created = Twitter.newTweetByUser.CreatedAt var author = Twitter.newTweetByUser.UserName var msg = txt + ""<br><br>"" + created + ""<br>"" + ""Author: "" + author  Telegram.sendPhoto.setCaption(msg)  if (matches)   Telegram.sendPhoto.setPhotoUrl(""https:"
if New photo post (trigger_service: Tumblr) then Add file from URL (action_service: Dropbox),
if New tweet by a specific user (trigger_service: Twitter) then Send message (action_service: Telegram),"var re_link_img = /pic\.twitter\.com\/([0-9a-zA-Z]*)/; var matches = re_link_img.exec(Twitter.newTweetByUser.TweetEmbedCode);  var txt = Twitter.newTweetByUser.Text || """" var created = Twitter.newTweetByUser.CreatedAt var author = Twitter.newTweetByUser.UserName var msg = txt + ""<br><br>"" + created + ""<br>"" + ""Author: "" + author  Telegram.sendMessage.setText(msg) Telegram.sendMessage.setIncludeWebPagePreview(""0"")  if (matches)   Telegram.sendMessage.skip()"
if Switched on (trigger_service: SmartThings) then List recommended movies (action_service: Trakt),"var Day = Meta.currentUserTime.day() var Hour = Meta.currentUserTime.hour() let optionOne = Math.floor((Math.random() * Trakt.recommendedMovies.length)) let optionTwo = Math.floor((Math.random() * Trakt.recommendedMovies.length)) let optionThree = Math.floor((Math.random() * Trakt.recommendedMovies.length)) if (Day != 6) {   IfNotifications.sendRichNotification.skip() } else if (Hour < 17) {   IfNotifications.sendRichNotification.skip() } else if (Hour >= 17) { IfNotifications.sendRichNotification.setMessage(`Ready for movie night? here are three movies to pick from: ${Trakt.recommendedMovies[optionOne].MovieTitle}, ${Trakt.recommendedMovies[optionTwo].MovieTitle}, or ${Trakt.recommendedMovies[optionThree].MovieTitle}`) }"
if Any new photo by you (trigger_service: Instagram) then Create a photo post (action_service: WordPress),"let postText;  let postTextonly;  let postTextonlyHeadline;  let posthashesonly;  let posthashesonlyLen;  let posthashesonlytext;  let posthashesonlytextkomma;  postText = Instagram.anyNewPhotoByYou.Caption;  var regexp = new RegExp('#([^\\s]*)', 'g');  postTextonly = postText.replace(regexp, '');  postTextonlyHeadline = postText.slice(0, 40)+' ...';  posthashesonly = postText.match(regexp);  posthashesonlyLen = posthashesonly.length;  posthashesonlytext = '';  let i;  for (i = 0; i < posthashesonlyLen; i++) {      posthashesonlytext += posthashesonly[i]+' ';  }  posthashesonlytextkomma = posthashesonlytext.replace(/ #/g,',');  posthashesonlytextkomma = posthashesonlytextkomma.replace('#','');  posthashesonlytextkomma = posthashesonlytextkomma.replace(' ','');"
if New Super Chat message (trigger_service: YouTube) then Change color (action_service: Philips Hue),"if (Youtube.newSuperchat.ColorTier == ""Light blue"")   {Hue.setColorAllHue.setColor(""#0092ff"")} if (Youtube.newSuperchat.ColorTier == ""Blue"")   {Hue.setColorAllHue.setColor(""#4148b2"")}"
if Any new item (trigger_service: Pocket) then Send message (action_service: Telegram),"var message = ""New #Pocket item:<br>"";    if(Pocket.newItemAddedPocket.Title != """"){    message += (""<b>"" + Pocket.newItemAddedPocket.Title + ""</b><br><br>"");  }    if(Pocket.newItemAddedPocket.Url != """"){    message += (Pocket.newItemAddedPocket.Url + ""<br><br>"");  }    if(Pocket.newItemAddedPocket.Excerpt != """"){    message += (Pocket.newItemAddedPocket.Excerpt + ""<br><br>"");  }    if(Pocket.newItemAddedPocket.Tags != """"){    message += (""Tags: "" + Pocket.newItemAddedPocket.Tags + ""<br>"");  }    if(Pocket.newItemAddedPocket.AddedAt != """"){    message += (""on "" + Pocket.newItemAddedPocket.AddedAt);  }    Telegram.sendMessage.setText(message);"
if You exit an area (trigger_service: Location) then Send a rich notification from the IFTTT app (action_service: Notifications),"var timeOfDay = Meta.triggerTime.hour()  if (timeOfDay <= 11 ) {    IfNotifications.sendRichNotification.skip(""Te vroeg!"")    }"
if New public video from subscriptions (trigger_service: YouTube) then Create task (action_service: Todoist),"var url;    url=Youtube.newPublicVideoFromSubscriptions.Url  var ID;    url = url.replace(/(>|<)/gi,'').split(/(vi\/|v=|\/v\/|youtu\.be\/|\/embed\/)/);    if(url[2] !== undefined) {      ID = url[2].split(/[^0-9a-z_\-]/i);      ID = ID[0];    }    else {      ID = url;    }    Todoist.createTask.setTaskContent(""pt2:"
if Every hour at (trigger_service: Date & Time) then Close door (action_service: Gogogate),var hour     = Meta.triggerTime.hour()
if Device is plugged in (trigger_service: Android Battery) then Set ringtone volume (action_service: Android Device),"var timeOfDay = Meta.currentUserTime.hour();    if (timeOfDay < 7 || timeOfDay > 21) {    AndroidDevice.setDeviceVolume.skip(""After hours"")  }"
if Every hour at (trigger_service: Date & Time) then Send a notification from the IFTTT app (action_service: Notifications),"var triggers = [8, 10, 12, 14, 16, 18, 20, 22];  var hour = Meta.currentUserTime.hour()    if (triggers.indexOf(hour) <= -1) {    IfNotifications.sendNotification.skip()  }"
if Today's weather report (trigger_service: Weather Underground) then Send a notification from the IFTTT app (action_service: Notifications),"if(Weather.currentWeatherAtTime.TodaysCondition.toLowerCase().indexOf(""rain"") == -1 && Weather.currentWeatherAtTime.TodaysCondition.toLowerCase().indexOf(""thunderstorm"") == -1 && Weather.currentWeatherAtTime.TodaysCondition.toLowerCase().indexOf(""drizzle"") == -1 && Weather.currentWeatherAtTime.TodaysCondition.toLowerCase().indexOf(""snow"") == -1 && Weather.currentWeatherAtTime.TodaysCondition.toLowerCase().indexOf(""hail"") == -1) {   IfNotifications.sendNotification.skip(""Weather condition is "" + Weather.currentWeatherAtTime.TodaysCondition); }"
if New story (trigger_service: Slashdot) then Add to weekly email digest (action_service: Email Digest),"var title = Trigger.EntryTitle var subject = 'Apple'  if (title.indexOf(subject) < 0) {    EmailDigest.sendWeeklyEmail.skip(""Not related to Apple"") }"
if You enter an area (trigger_service: Location) then Turn lights on (action_service: LIFX),var hour = Meta.currentUserTime.hour()  if (hour < 20) {   Lifx.turnOn.skip() }
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),"var incomingTweet = Twitter.newTweetByUser.Text  if (incomingTweet.indexOf(""#ethereum"") == -1) {   IfNotifications.sendNotification.skip(""Not Interested"") }"
if You enter an area (trigger_service: Location) then Current weather (action_service: Weather Underground),let sunrise = moment(Weather.currentWeather[0].SunriseAt); let sunset = moment(Weather.currentWeather[0].SunsetAt); let currentTime = Meta.currentUserTime; let afterSunrise = currentTime.isAfter(sunrise); let beforeSunset = currentTime.isBefore(sunset);  if (afterSunrise && beforeSunset) {    Hue.turnOnAllHue.skip(`Its still daytime so we're leaving the lights off`); }
if New story (trigger_service: Slashdot) then Add to weekly email digest (action_service: Email Digest),"var title = Trigger.EntryTitle var subject1 = 'Google' var subject2 = 'Alphabet'  if (title.indexOf(subject1) < 0 && title.indexOf(subject2) < 0) {    EmailDigest.sendWeeklyEmail.skip(""Not related to Google"") }"
if New story (trigger_service: Slashdot) then Post a tweet (action_service: Twitter),"var title = Trigger.EntryTitle.toLowerCase() var keyword1 = 'climate' var keyword2 = 'climate change' var keyword3 = 'global warming'  if (title.indexOf(keyword1) < 0 && title.indexOf(keyword2) < 0 && title.indexOf(keyword3) < 0) {    Twitter.postNewTweet.skip(""Not related to climate science"") }"
if New Ring Detected (trigger_service: Ring) then Turn on lights (action_service: Philips Hue),var timeOfDay = Meta.currentUserTime.hour()    if (timeOfDay <= 22 || timeOfDay > 8 ) {
if Button press (trigger_service: Button widget) then List recommended movies (action_service: Trakt),let index = Math.floor((Math.random() * Trakt.recommendedMovies.length)) let selection = Trakt.recommendedMovies[index]  if (selection.MovieTrailer) {   IfNotifications.sendRichNotification.setMessage(`Your randomly selected movie is: ${selection.MovieTitle} (${selection.MovieYear}). Click to see the trailer`)   IfNotifications.sendRichNotification.setLinkUrl(selection.MovieTrailer) } else {   IfNotifications.sendRichNotification.setMessage(`Your randomly selected movie is: ${selection.MovieTitle} (${selection.MovieYear}).`) }
if Button press (trigger_service: Button widget) then List recommended shows (action_service: Trakt),let index = Math.floor((Math.random() * Trakt.recommendedShows.length)) let selection = Trakt.recommendedShows[index]  if (selection.Trailer) {   IfNotifications.sendRichNotification.setMessage(`Your randomly selected show is: ${selection.Title} (${selection.Year}). Click to see the trailer`)   IfNotifications.sendRichNotification.setLinkUrl(selection.Trailer) } else {   IfNotifications.sendRichNotification.setMessage(`Your randomly selected show is: ${selection.Title} (${selection.Year}).`) }
if Motion detected (trigger_service: Arlo) then Call my phone (action_service: Phone Call (US only)),var hour = Meta.triggerTime.hour(); if (hour > 8 && hour < 21) {   PhoneCall.callMyPhone.skip(); }
if Post bookmarked by you (trigger_service: Medium) then Append to a stream (action_service: data.world),"const bookmark = (Medium.postBookmarkedByYou as any) const pairs = Object.getOwnPropertyNames(bookmark).map(prop => prop + ""||"" + bookmark[prop]) Datadotworld.append.setPayload(pairs.join(""|||""))"
if New red line alert (trigger_service: Chicago Transit Authority) then Send a notification from the IFTTT app (action_service: Notifications),"var Day = Meta.currentUserTime.day() var Hour = Meta.currentUserTime.hour()  if (Day == 6 || Day ==7) {   IfNotifications.sendNotification.skip(""Not a weekday"") }  if (Hour < 7 || Hour > 9) {   IfNotifications.sendNotification.skip(""Not commuting hours"") }"
if New tweet from search (trigger_service: Twitter) then Send message (action_service: Telegram),
if New post from search (trigger_service: reddit) then Append to a stream (action_service: data.world),"const post = (Reddit.newPostFromSearchReddit as any) const pairs = Object.getOwnPropertyNames(post).map(prop => prop + ""||"" + post[prop]) Datadotworld.append.setPayload(pairs.join(""|||""))"
if You enter an area (trigger_service: Location) then Turn 1-Channel Switch on or off (action_service: eWeLink Smart Home),var timeOfDay = Meta.currentUserTime.hour();    if (timeOfDay > 18 || timeOfDay < 6) {      } else {    Ewelink.switchAction.skip();  }
if You enter an area (trigger_service: Location) then Current weather (action_service: Weather Underground),let sunrise = moment(Weather.currentWeather[0].SunriseAt); let sunset = moment(Weather.currentWeather[0].SunsetAt); let currentTime = Meta.currentUserTime; let afterSunrise = currentTime.isAfter(sunrise); let beforeSunset = currentTime.isBefore(sunset);  if (afterSunrise && beforeSunset) {    Wiz.turnOn.skip(`Its still daytime so we're leaving the lights off`); }
if You enter an area (trigger_service: Location) then Current weather (action_service: Weather Underground),let sunrise = moment(Weather.currentWeather[0].SunriseAt); let sunset = moment(Weather.currentWeather[0].SunsetAt); let currentTime = Meta.currentUserTime; let afterSunrise = currentTime.isAfter(sunrise); let beforeSunset = currentTime.isBefore(sunset);  if (afterSunrise && beforeSunset) {    Yeelight.onOff.skip(`Its still daytime so we're leaving the lights off`); }
if If CO2 Level Is Low (trigger_service: Green Light Signal) then Change color of lights (action_service: LIFX),"var co2Index = GreenLightSignal.co2Level.Co2Index   if (co2Index === ""low"" || co2Index === ""very low"") {​​​​    Lifx.color.setAdvancedOptions('color: #00e600; brightness: 1; transition_duration: 0')  }​​​​ else {​​​​    Lifx.color.setAdvancedOptions('color: #ffffff; brightness: 0; transition_duration: 0')  }​​​​"
if Door opened (trigger_service: MyQ) then Turn on (action_service: WeMo Smart Plug),"var hour     = Meta.currentUserTime.hour() if (hour < 17) {   WemoSwitch.attributeSocketOnDiscrete.skip(""not in hour timing"") }"
if New tweet by a specific user (trigger_service: Twitter) then Save for later (action_service: Pocket),"var tweet = Twitter.newTweetByUser.Text;  var regex = /https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&"
if Today's weather report (trigger_service: Weather Underground) then Append to a stream (action_service: data.world),"const forecast = (Weather.currentWeatherAtTime as any) const pairs = Object.getOwnPropertyNames(forecast).map(prop => prop + ""||"" + forecast[prop]) Datadotworld.append.setPayload(pairs.join(""|||""))"
if New light rail advisory (trigger_service: NJ Transit) then Send me an email (action_service: Email),"var Hour = Meta.currentUserTime.hour() var Day = Meta.currentUserTime.day()  if (Day==6 || Day==7) {   Email.sendMeEmail.skip(""Not a weekday"") }  else if (Hour < 7 || (Hour > 9 && Hour < 5) || Hour > 19) {   Email.sendMeEmail.skip(""Not commuting hours"") }"
if You enter an area (trigger_service: Location) then Turn 1-Channel Switch on or off (action_service: eWeLink Smart Home),var timeOfDay = Meta.currentUserTime.hour();    if (timeOfDay > 16 || timeOfDay < 8) {      } else {    Ewelink.switchAction.skip();  }
if You enter an area (trigger_service: Location) then Turn 1-Channel Plug on or off (action_service: eWeLink Smart Home),var timeOfDay = Meta.currentUserTime.hour();    if (timeOfDay > 18 || timeOfDay < 6) {      } else {    Ewelink.plugAction.skip();  }
if Every day of the week at (trigger_service: Date & Time) then List my most watched movies (action_service: Trakt),"const watchedMovies = Trakt.mostWatchedMovies.slice(0,9) let tweet = ""My top 10 most watched movies: <br/>""  watchedMovies.forEach((movie, index) => {   tweet += `${index+1}) ${movie.MovieTitle} (${movie.MovieYear})<br/>` })  Twitter.postNewTweet.setTweet(tweet)"
if You enter an area (trigger_service: Location) then Turn on (action_service: WeMo Light Switch),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 17 || timeOfDay < 7 ) {
if New Motion Detected (trigger_service: Ring) then Turn on (action_service: WeMo Smart Plug),var timeOfDay = Meta.currentUserTime.hour() if (timeOfDay >= 18 || timeOfDay < 6 ) {
if You enter or exit an area (trigger_service: Location) then Toggle on/off (action_service: WeMo Smart Plug),var timeOfDay = Meta.currentUserTime.hour();  if (timeOfDay > 18) {
if Any new photo (trigger_service: Camera widget) then Create a note (action_service: Evernote),DoCamera.doCameraNewPhoto.PublicPhotoURL  DoCamera.doCameraNewPhoto.ShareURL  DoCamera.doCameraNewPhoto.Latitude  DoCamera.doCameraNewPhoto.Longitude  DoCamera.doCameraNewPhoto.LocationMapImageURL  DoCamera.doCameraNewPhoto.OccurredAt
if Notification received (trigger_service: Android Device) then Set scene (action_service: Yeelight),var heure = Meta.currentUserTime.hour() if (heure < 8) {    if (heure > 0) {   Yeelight.setScene.skip()   } }
if Any new note (trigger_service: Note widget) then Send message (action_service: Telegram),"var uri = DoNote.doNoteNewCommandCommon.NoteText; var encodedText = encodeURI(uri); Telegram.sendMessage.setText(""This link is to a Google search of applets:<br><br>&nbsp;&nbsp;&nbsp;""+ ""https:"
if Connects to a Bluetooth device (trigger_service: Android Device) then Play music (action_service: Android Device),"var btDeviceName = AndroidDevice.bluetoothConnected.DeviceName;    if (btDeviceName != ""Ford Audio"") {    AndroidDevice.playBestSong.skip(""Not Ford Audio device"")  }"
if Any card purchase (trigger_service: Monzo) then Add to weekly email digest (action_service: Email Digest),"var d = Meta.triggerTime var foreignCurrency = false; if (Monzo.cardPurchase.AccountCurrencyCode != Monzo.cardPurchase.LocalCurrencyCode) {   foreignCurrency = true; }  var message = Monzo.cardPurchase.AccountCurrencySymbol + Monzo.cardPurchase.AmountInAccountCurrency + "" "";  if (foreignCurrency) {   message += Monzo.cardPurchase.LocalCurrencySymbol + Monzo.cardPurchase.AmountInLocalCurrency + "" ("" + Monzo.cardPurchase.LocalCurrencyCode + "") ""; }  message += ""on "" + d.format(""dddd"") + "" at "" + d.format(""h:mm A"");  EmailDigest.sendWeeklyEmail.setMessage(message);"
if New watched episode (trigger_service: Trakt) then Send a rich notification from the IFTTT app (action_service: Notifications),IfNotifications.sendRichNotification.setLinkUrl(`https:
if Today's weather report (trigger_service: Weather Underground) then Notify you using your Nanoleaf Light Panels or Canvas (action_service: Nanoleaf Smarter Series),"var temp     = parseInt(Weather.currentWeatherAtTime.HighTempFahrenheit)  var tempround = ((Math.round(temp / 10) * 10))  var colorKey = tempround.toString()    var colors: {[key:string]:string} = {    ""0"":""#0000FF"",    ""10"":""#1900E5"",      ""20"":""#3300CC"",    ""30"":""#4C00B2"",      ""40"":""#660099"",    ""50"":""#7F007F"",      ""60"":""#990066"",    ""70"":""#B2004C"",      ""80"":""#CC0033"",    ""90"":""#E50019"",    ""100"":""#FF0000""      }    if (tempround < 0) {      Nanoleaf.colorNotificationRequest.setValue(""#0000FF"")    }    else if (temp < 100)  {    Nanoleaf.colorNotificationRequest.setValue(colors[colorKey])    }    else {    Nanoleaf.colorNotificationRequest.setValue(""#FF0000"")  }"
if An #OhmHour starts (trigger_service: OhmConnect) then Add row to spreadsheet (action_service: Google Sheets),"var msec = (Date.parse(Ohmconnect.ohmHourStart.OhmHourEnd) - Date.parse(Ohmconnect.ohmHourStart.OhmHourStart)); var hours = Math.floor(msec / 60*60*1000); GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(Ohmconnect.ohmHourStart.OhmHourStart + '|||' + Ohmconnect.ohmHourStart.OhmHourEnd + ""||| Start ||| "" + hours);"
if Every hour at (trigger_service: Date & Time) then Push a note (action_service: Pushbullet),var timeOfDay = Meta.currentUserTime.hour();    if (timeOfDay > 22 || timeOfDay < 8 || (timeOfDay%2)==1 ) {  Pushbullet.sendNote.skip()  }
if Every day of the week at (trigger_service: Date & Time) then List recommended movies (action_service: Trakt),"let optionOne = Math.floor((Math.random() * Trakt.recommendedMovies.length)) let optionTwo = Math.floor((Math.random() * Yelp.searchBusiness.length)) Email.sendMeEmail.setSubject(`It's night date night!`) Email.sendMeEmail.setBody(`Tonight you should watch ${Trakt.recommendedMovies[optionOne].MovieTitle}, and order dinner from ${Yelp.searchBusiness[optionTwo].BusinessName}! `)"
if You exit an area (trigger_service: Location) then Set scene (action_service: Yeelight),if (Meta.currentUserTime.hour() >= 18 || Meta.currentUserTime.hour() < 6) {   Yeelight.setScene.skip('Too Late'); }
if Every day at (trigger_service: Date & Time) then Move money into a pot (action_service: Monzo),const today = Meta.currentUserTime;
if Button press (trigger_service: Button widget) then Search for a business (action_service: Yelp),let filteredBusinesses = Yelp.searchBusiness.filter(business => parseFloat(business.BusinessRating) > 3) let index = Math.floor((Math.random() * filteredBusinesses.length)) let selection = filteredBusinesses[index]  IfNotifications.sendRichNotification.setImageUrl(selection.BusinessImageUrl) IfNotifications.sendRichNotification.setLinkUrl(selection.BusinessImageUrl) IfNotifications.sendRichNotification.setMessage(`Your randomly selected restaurant is: ${selection.BusinessName} located at ${selection.BusinessAddress}`)
if Every day of the week at (trigger_service: Date & Time) then Move money into a pot (action_service: Monzo),var week_of_year = Meta.currentUserTime.format('w'); var amount = parseInt(week_of_year); Monzo.potDeposit.setAmount(amount.toFixed(2));
if New Ring Detected (trigger_service: Ring) then Toggle lights on/off (action_service: Philips Hue),var TimeOfDay = Meta.currentUserTime.hour()  if (TimeOfDay >= 21 || TimeOfDay < 6){
if New feed item (trigger_service: RSS Feed) then Send me an email (action_service: Email),"var re1 = new RegExp("" Beta""); var re2 = new RegExp("" Release Candidate"");  if (re1.test(Feed.newFeedItem.EntryTitle) || re2.test(Feed.newFeedItem.EntryTitle)) {   Email.sendMeEmail.skip(); }"
if You enter an area (trigger_service: Location) then Current weather (action_service: Weather Underground),let sunrise = moment(Weather.currentWeather[0].SunriseAt); let sunset = moment(Weather.currentWeather[0].SunsetAt); let currentTime = Meta.currentUserTime; let afterSunrise = currentTime.isAfter(sunrise); let beforeSunset = currentTime.isBefore(sunset);  if (afterSunrise && beforeSunset) {    Kasa.turnOn.skip(`Its still daytime so we're leaving the lights off`); }
if You enter an area (trigger_service: Location) then Current weather (action_service: Weather Underground),let sunrise = moment(Weather.currentWeather[0].SunriseAt); let sunset = moment(Weather.currentWeather[0].SunsetAt); let currentTime = Meta.currentUserTime; let afterSunrise = currentTime.isAfter(sunrise); let beforeSunset = currentTime.isBefore(sunset);  if (afterSunrise && beforeSunset) {    Govee.lightBrightness.skip(`Its still daytime so we're leaving the lights off`); }
if You exit an area (trigger_service: Location) then Set scene (action_service: Yeelight),if (Meta.currentUserTime.hour() < 18 && Meta.currentUserTime.hour() >= 6) {   Yeelight.setScene.skip('Too Early'); }
if You enter an area (trigger_service: Location) then Current weather (action_service: Weather Underground),let sunrise = moment(Weather.currentWeather[0].SunriseAt); let sunset = moment(Weather.currentWeather[0].SunsetAt); let currentTime = Meta.currentUserTime; let afterSunrise = currentTime.isAfter(sunrise); let beforeSunset = currentTime.isBefore(sunset);  if (afterSunrise && beforeSunset) {    Magichue.poweron.skip(`Its still daytime so we're leaving the lights off`); }
if Motion detected (trigger_service: Arlo) then Dim lights (action_service: Philips Hue),var timeOfDay = Meta.currentUserTime.hour();  if (timeOfDay > 7 && timeOfDay < 19) {   Hue.setBrightnessAllHue.skip() }
if Device Connects (trigger_service: Google Wifi) then Turn on lights (action_service: Philips Hue),var sunDown = moment().hour(20).minute(0); var sunUp = moment().hour(5).minute(0); if (Meta.triggerTime.isAfter(sunUp) || Meta.triggerTime.isBefore(sunDown)) {   Hue.turnOnAllHue.skip(); }
if ISS passes over a specific location (trigger_service: Space) then Current weather (action_service: Weather Underground),let weather = Weather.currentWeather[0].CurrentCondition.toLowerCase(); let notClear = ((weather.indexOf('sunny') === -1) && (weather.indexOf('clear') === -1) && (weather.indexOf('fair') === -1)); let sunrise = moment(Weather.currentWeather[0].SunriseAt); let sunset = moment(Weather.currentWeather[0].SunsetAt); let currentTime = Meta.currentUserTime; let afterSunrise = currentTime.isAfter(sunrise); let beforeSunset = currentTime.isBefore(sunset); if (notClear) {   IfNotifications.sendNotification.skip(`ISS passed overhead but you may not see it because it's ${weather}`); } else if  (afterSunrise && beforeSunset) {    IfNotifications.sendNotification.skip(`ISS passes overhead but the sun is up so you won't spot it`); }
if Every day of the week at (trigger_service: Date & Time) then Move money into a pot (action_service: Monzo),var week_of_year = Meta.currentUserTime.format('w'); var week_number = parseInt(week_of_year);  var amount= (53-week_number); Monzo.potDeposit.setAmount(amount.toFixed(2));
if New blue line alert (trigger_service: Chicago Transit Authority) then Send me an SMS (action_service: SMS),"var Day = Meta.currentUserTime.day() var Hour = Meta.currentUserTime.hour()  if (Day == 6 || Day ==7) {   Sms.sendMeText.skip(""Not a weekday"") }  if (Hour < 7 || Hour > 9) {   Sms.sendMeText.skip(""Not commute hours"") }"
if New Pin on your board (trigger_service: Pinterest) then Create a photo post (action_service: Tumblr),Pinterest.aNewPinOnYourBoard.Description Tumblr.createPhotoPost
if Door opened (trigger_service: MyQ) then Activate scene (action_service: Lutron Caséta and RA2 Select),"var hour = Meta.triggerTime.hour()  if (hour < 22) {    LutronCasetaWireless.setScene.skip(""Not a school night."")  }"
if New liked tweet by you (trigger_service: Twitter) then Append to a stream (action_service: data.world),"const tweet = (Twitter.newFavoriteTweet as any) const pairs = Object.getOwnPropertyNames(Twitter.newFavoriteTweet).map(prop => prop + ""||"" + tweet[prop]) Datadotworld.append.setPayload(pairs.join(""|||""))"
if Daily step goal achieved (trigger_service: Fitbit) then Send a notification from the IFTTT app (action_service: Notifications),"var data = [  {""quote"":""To enjoy the glow of good health, you must exercise."",""author"":""Gene Tunney""},{""quote"":""The purpose of training is to tighten up the slack, toughen the body, and polish the spirit."",""author"":""Morihei Ueshiba""},{""quote"":""Physical fitness is one of the most important keys to a healthy body."",""author"":""John F. Kennedy""},{""quote"":""Fitness is about being better than you used to be."",""author"":""Khloe Kardashian""},{""quote"":""I'm not in the best shape, but I want to prove to myself I can do something that seems insurmountable."",""author"":""Ruben Studdard""},{""quote"":""The human body is the best picture of the human soul."",""author"":""Ludwig Wittgenstein""},{""quote"":""A muscle is like a car. If you want it to run well early in the morning, you have to warm it up."",""author"":""Florence Griffith Joyner""},{""quote"":""Time and health are two precious assets that we don't recognize and appreciate until they have been depleted."",""author"":""Denis Waitley""},{""quote"":""Walking is the best possible exercise. Habituate yourself to walk very far."",""author"":""Thomas Jefferson""},{""quote"":""The reason I exercise is for the quality of life I enjoy."",""author"":""Kenneth H. Cooper""},{""quote"":""Seeing is not believing. Doing is believing."",""author"":""Brett Hoebel""},{""quote"":""True enjoyment comes from activity of the mind and exercise of the body; the two are ever united."",""author"":""Wilhelm von Humboldt""},{""quote"":""A lot of people are afraid of heights. Not me, I'm afraid of widths."",""author"":""Steven Wright""},{""quote"":""To be successful, you must dedicate yourself 100% to your training, diet and mental approach."",""author"":""Arnold Schwarzenegger""},{""quote"":""Exercise to stimulate, not to annihilate. The world wasn't formed in a day, and neither were we."",""author"":""Lee Haney""},{""quote"":""The mind is the most important part of achieving any fitness goal. Mental change always comes before physical change."",""author"":""Matt McGorry""},{""quote"":""Health is the thing that makes you feel that now is the best time of the year."",""author"":""Franklin Pierce Adams""},{""quote"":""If a man achieves victory over this body, who in the world can exercise power over him?"",""author"":""Vinoba Bhave""},{""quote"":""To succeed in your mission, you must have single-minded devotion to your goal."",""author"":""A. P. J. Abdul Kalam""},{""quote"":""You are never too old to set another goal or to dream a new dream."",""author"":""Les Brown""},{""quote"":""Human progress is neither automatic nor inevitable."",""author"":""Martin Luther King, Jr.""},{""quote"":""Arise! Awake! and stop not until the goal is reached."",""author"":""Swami Vivekananda""},{""quote"":""Desire is the key to motivation, but it's determination and commitment to an unrelenting pursuit of your goal."",""author"":""Mario Andretti""},{""quote"":""Obstacles are those frightful things you see when you take your eyes off your goal."",""author"":""Henry Ford""},{""quote"":""Focused, hard work is the real key to success."",""author"":""John Carmack""},{""quote"":""Keep your eyes on the goal, and just keep taking the next step towards completing it."",""author"":""John Carmack""},{""quote"":""The goal of education is the advancement of knowledge and the dissemination of truth."",""author"":""John F. Kennedy""},{""quote"":""A dream becomes a goal when action is taken toward its achievement."",""author"":""Bo Bennett""},{""quote"":""Nothing can stop the man with the right mental attitude from achieving his goal."",""author"":""Thomas Jefferson""},{""quote"":""A goal is a dream with a deadline."",""author"":""Napoleon Hill""},{""quote"":""The best teamwork comes from men who are working independently toward one goal in unison."",""author"":""James Cash Penney""},{""quote"":""I know why I am here and my only real focused goal is to live each day to the fullest."",""author"":""Ken Hensley""},{""quote"":""Know what you want to do, hold the thought firmly, and do every day what should be done."",""author"":""Elbert Hubbard""},{""quote"":""Arriving at one goal is the starting point to another."",""author"":""John Dewey""},{""quote"":"""",""author"":""Troy Polamalu""},{""quote"":""Just be yourself. Be honest, work towards a goal, and you'll achieve it."",""author"":""Emraan Hashmi""},{""quote"":""Resilience is all about being able to overcome the unexpected."",""author"":""Jamais Cascio""},{""quote"":""A goal is not always meant to be reached, it often serves simply as something to aim at."",""author"":""Bruce Lee""},{""quote"":""Today I will do what others won’t, so tomorrow I can accomplish what others can’t."",""author"":""Jerry Rice""},{""quote"":""Do something today that your future self will thank you for."",""author"":""Unknown""},{""quote"":""We are what we repeatedly do. Excellence then is not an act but a habit."",""author"":""Aristotle""},{""quote"":""No matter how slow you go, you are still lapping everybody on the couch."",""author"":""Unknown""},{""quote"":""Sweat is fat crying."",""author"":""Unknown""},{""quote"":""The difference between the impossible and the possible lies in a person’s determination."",""author"":""Tommy Lasorda""},{""quote"":""If you want something you’ve never had, you must be willing to do something you’ve never done."",""author"":""Thomas Jefferson""},{""quote"":""You’re only one workout away from a good mood."",""author"":""Unknown""},{""quote"":""Nothing will work unless you do."",""author"":""Maya Angelou""},{""quote"":""Life begins at the end of your comfort zone."",""author"":""Unknown""},{""quote"":""The difference between try and triumph is a little ‘umph’."",""author"":""Unknown""},{""quote"":""Don’t count the days, make the days count."",""author"":""Muhammad Ali""},{""quote"":""Making excuses burns zero calories per hour."",""author"":""Unknown""},{""quote"":""When you feel like quitting, think about why you started."",""author"":""Unknown""},{""quote"":""It’s not about having time, it’s about making time."",""author"":""Anonymous""},{""quote"":""Your body can stand up to almost anything. It’s your mind that you have to convince."",""author"":""Anonymous""},{""quote"":""The only bad workout is the one you didn’t do."",""author"":""Anonymous""},{""quote"":""Respect your body. It’s the only one you get."",""author"":""Anonymous""},{""quote"":""Either you run the day, or the day runs you."",""author"":""Jim Rohn""},{""quote"":""Never give up, everyone has bad days. Pick yourself up and keep going."",""author"":""Anonymous""},{""quote"":""You can’t finish what you don’t start."",""author"":""Anonymous""},{""quote"":""Run when you can, walk when you have to, crawl if you must, just never give up."",""author"":""Dean Karnazes""},{""quote"":""Take care of your body, it’s the only place you have to live in."",""author"":""Anonymous""},{""quote"":""Success belongs only to those who are willing to work harder than anyone else."",""author"":""Anonymous""},{""quote"":""Small changes can make a big difference."",""author"":""Anonymous""},{""quote"":""Strive for progress, not perfection."",""author"":""Anonymous""},{""quote"":""Don’t wait. The time will never be just right."",""author"":""Napoleon Hill""},{""quote"":""All great achievements require time."",""author"":""Maya Angelou""},{""quote"":""You killed that goal!"",""author"":""Coco""}];  var i = Math.floor((Math.random() * data.length)) var msg = data[i]['quote'] + 'by ' + data[i]['author']  IfNotifications.sendNotification.setMessage(msg)"
if Door opened (trigger_service: MyQ) then Activate scene (action_service: Lutron Caséta and RA2 Select),var timeOfDay = Meta.currentUserTime.hour()    if (timeOfDay >= 20 || timeOfDay < 6 ) {
if Notification received from a specific app (trigger_service: Android Device) then Add row to spreadsheet (action_service: Google Sheets),"var notification = AndroidDevice.newNotificationFromApp.NotificationTitle var date = AndroidDevice.newNotificationFromApp.ReceivedAt  var n = notification.lastIndexOf(""by"") var track = notification.substring(0, n) var artist = notification.substring(n+3)"
if New top post in subreddit (trigger_service: reddit) then Add track to a playlist (action_service: Spotify),
if You enter an area (trigger_service: Location) then Set a scene in a room (action_service: Philips Hue),var timeOfDay = Meta.currentUserTime.hour() if (timeOfDay >= 18 || timeOfDay < 6 ) {
if New DART rider alert (trigger_service: DART) then Send a notification from the IFTTT app (action_service: Notifications),var Hour = Meta.currentUserTime.hour() var Day = Meta.currentUserTime.day()
if You enter an area (trigger_service: Location) then Dim lights (action_service: Philips Hue),var timeOfDay = Meta.currentUserTime.hour();    if (timeOfDay > 7 && timeOfDay < 19) {    Hue.setBrightnessAllHue.skip()  }
if New tweet by a specific user (trigger_service: Twitter) then Send me an email (action_service: Email),"function filter () {   const coinLabel = ""Alert: 1 hour change +/- 5% or more!"";"
if New tweet by a specific user (trigger_service: Twitter) then Add track to a playlist (action_service: Spotify),
if New tweet by a specific user (trigger_service: Twitter) then Send me an email (action_service: Email),"function filter () {   const coinLabel = ""#bitcoin #btc Price: $"";   const prefix = "" 24hChg: "";   const suffix = ""% 24Vol"";   let start = Twitter.newTweetByUser.Text.indexOf(prefix);   let end = Twitter.newTweetByUser.Text.indexOf(suffix);"
if Motion detected (trigger_service: Arlo) then Call my device (action_service: VoIP Calls),"var hour = Meta.currentUserTime.hour();  if(hour>8&&hour<21){  VoipCalls.callMyDevice.skip(hour.toString());}else{VoipCalls.callMyDevice.setMessage(""motion detected!"");}"
if You enter an area (trigger_service: Location) then Set Temperature (action_service: Heatmiser),var timeOfDay = Meta.currentUserTime.hour() if (timeOfDay <6 || timeOfDay >= 22) {     Heatmiser.setTemp.skip(); }
if Every hour at (trigger_service: Date & Time) then Send a notification from the IFTTT app (action_service: Notifications),"var timeOfDay = Meta.currentUserTime.hour();      if (timeOfDay > 22 || timeOfDay < 9)     {    IfNotifications.sendNotification.skip(""Too late to drink; resume tomorrow"");    }     else     {    IfNotifications.sendNotification;    }"
if New feed item matches (trigger_service: RSS Feed) then Create task (action_service: Todoist),var title = Feed.newFeedItemMatches.EntryTitle;
if New feed item (trigger_service: RSS Feed) then Send a notification from the IFTTT app (action_service: Notifications),"var Texto = Feed.newFeedItem.EntryTitle;  var rss = "" "";  rss= rss.concat(Texto);  var num = 6.0;  var snum = num.toString();  while(num >= 1 && num <= 10 ){    if(snum==""1""||snum==""2""||snum==""3""||snum==""4""||snum==""5""||snum==""6""||snum==""7""||snum==""8""||snum==""9""||snum==""10""){      snum=snum.concat("".0"");    }    if(rss.indexOf(snum) >=0 ){"
if New hot post in subreddit (trigger_service: reddit) then Send a notification from the IFTTT app (action_service: Notifications),var hour = Meta.currentUserTime.hour(); if(hour >= 22 || hour <= 8){   IfNotifications.sendNotification.skip(); }else{   Email.sendMeEmail.skip(); }
if Every hour at (trigger_service: Date & Time) then Start recording (action_service: Arlo),"var hour     = Meta.currentUserTime.hour()  if (hour > 18) {   Arlo.record.skip(""Too Late"") }  if (hour < 5) {   Arlo.record.skip(""Too Early"") }"
if Low battery reported (trigger_service: Arlo) then Send me an email (action_service: Email),"var hour     = Meta.currentUserTime.hour()  if (hour > 18) {   Email.sendMeEmail.skip(""Too Late"") }  if (hour < 5) {   Email.sendMeEmail.skip(""Too Early"") }"
if Every day at (trigger_service: Date & Time) then Update device wallpaper (action_service: Android Device),var pathMin : number = 4; var pathMax : number = 49; var path : number = (Math.random() * (pathMax - pathMin + 1)) | 0; var paddedPath : string = path.toFixed(0); while (paddedPath.length < 3) {   paddedPath = '0' + paddedPath; }  var maxId : number = 9999; var id : number = (Math.random() * (maxId + 1)) | 0;  var requestPath : string = 'http:
if New upvoted post by you (trigger_service: reddit) then Add track to a playlist (action_service: Spotify),
if New tweet by a specific user (trigger_service: Twitter) then Send a notification from the IFTTT app (action_service: Notifications),"var Texto = Twitter.newTweetByUser.Text;  var num = 6.0;  while(num >= 1 && num <= 10 ){    if(Texto.indexOf((""Magnitud ""+ num) ) >=0 ){      num = parseFloat((num + 0.1).toFixed(1));      break;      }else{        if(num >=9){          IfNotifications.sendNotification.skip();          break;        }        num = parseFloat((num + 0.1).toFixed(1));      }    }"
if New status message on page (trigger_service: Facebook Pages) then Post a tweet (action_service: Twitter),"if (FacebookPages.newStatusMessageByPage.Message.length >= 115) {   var subStr = FacebookPages.newStatusMessageByPage.Message.substr(0, 107);   subStr += "" [...] ""   Twitter.postNewTweet.setTweet(subStr + FacebookPages.newStatusMessageByPage.PageUrl); } else {   Twitter.postNewTweet.setTweet(FacebookPages.newStatusMessageByPage.Message + "" "" + FacebookPages.newStatusMessageByPage.PageUrl); }"
if New feed item (trigger_service: RSS Feed) then Send message (action_service: Telegram),"var Texto = Feed.newFeedItem.EntryTitle;  var rss = "" "";  rss= rss.concat(Texto);  var num = 6.0;  var snum = num.toString();  while(num >= 1 && num <= 10 ){    if(snum==""1""||snum==""2""||snum==""3""||snum==""4""||snum==""5""||snum==""6""||snum==""7""||snum==""8""||snum==""9""||snum==""10""){      snum=snum.concat("".0"");    }    if(rss.indexOf(snum) >=0 ){"
if Current condition changes to (trigger_service: Weather Underground) then Change color (action_service: Philips Hue),let currentHour = Meta.currentUserTime.hour(); var day = Meta.currentUserTime.weekday();  if (currentHour < 5 || currentHour >= 9) {   Hue.setColorAllHue.skip()   IfNotifications.sendNotification.skip(); }  else if (day == 0) {
if Current temperature rises above (trigger_service: Weather Underground) then Activate Scene (action_service: Hunter Douglas PowerView),"var hour = Meta.currentUserTime.hour()     if (hour >= 8 && hour < 20) { (""Not nighttime"") }"
if Caavo search (trigger_service: Caavo) then Set thermostat hold for X hours (action_service: ecobee),"if (Caavo.voiceSearch.Text.toLowerCase().indexOf(""set the temperature"") < 0) {   Ecobee.holdHoldhours.skip(); }"
if You enter an area (trigger_service: Location) then Dock robot (action_service: iRobot),var timeOfDay = Meta.currentUserTime.hour();    if (timeOfDay > 0 && timeOfDay < 17) {    Irobot.dockRobot.skip()  }
if Your SkyBell HD‘s button was pressed (trigger_service: SkyBell HD) then Send me an email (action_service: Email),"var Day = Meta.currentUserTime.day() var  Hour   =    Meta.currentUserTime.hour()  if (Day = 6) {   Skybell.record60sOfVideo.skip(""Not a weekday"")   Email.sendMeEmail.skip(""Not a weekday"") }  else if (Day = 7) {   Skybell.record60sOfVideo.skip(""Not a weekday"")   Email.sendMeEmail.skip(""Not a weekday"") }  else if (Hour > 17 || Hour < 9) {   Skybell.record60sOfVideo.skip(""Not a weekday"")   Email.sendMeEmail.skip(""Not a weekday"") }"
if Motion detected (trigger_service: Arlo) then Start recording (action_service: Arlo),"var Day = Meta.currentUserTime.day() var  Hour   =    Meta.currentUserTime.hour()  if (Day = 6) {   Arlo.record.skip(""Not a weekday"") }  if (Day = 7) {   Arlo.record.skip(""Not a weekday"") }  if (Hour > 17 || Hour < 9) {   Arlo.record.skip(""Not working hours"") }"
if New Super Chat message (trigger_service: YouTube) then Change color (action_service: Philips Hue),"if (Youtube.newSuperchat.ColorTier == ""Light blue"")   {Hue.setColorAllHue.setColor(""#0092ff"")} if (Youtube.newSuperchat.ColorTier == ""Blue"")   {Hue.setColorAllHue.setColor(""#4148b2"")}"
if Every hour at (trigger_service: Date & Time) then Close door (action_service: Gogogate),var hour     = Meta.triggerTime.hour()
if You enter an area (trigger_service: Location) then Turn lights on (action_service: LIFX),var hour = Meta.currentUserTime.hour()  if (hour < 20) {   Lifx.turnOn.skip() }
if You enter an area (trigger_service: Location) then Current weather (action_service: Weather Underground),let sunrise = moment(Weather.currentWeather[0].SunriseAt); let sunset = moment(Weather.currentWeather[0].SunsetAt); let currentTime = Meta.currentUserTime; let afterSunrise = currentTime.isAfter(sunrise); let beforeSunset = currentTime.isBefore(sunset);  if (afterSunrise && beforeSunset) {    Hue.turnOnAllHue.skip(`Its still daytime so we're leaving the lights off`); }
if New Ring Detected (trigger_service: Ring) then Turn on lights (action_service: Philips Hue),var timeOfDay = Meta.currentUserTime.hour()    if (timeOfDay <= 22 || timeOfDay > 8 ) {
if You enter an area (trigger_service: Location) then Turn 1-Channel Switch on or off (action_service: eWeLink Smart Home),var timeOfDay = Meta.currentUserTime.hour();    if (timeOfDay > 18 || timeOfDay < 6) {      } else {    Ewelink.switchAction.skip();  }
if You enter an area (trigger_service: Location) then Current weather (action_service: Weather Underground),let sunrise = moment(Weather.currentWeather[0].SunriseAt); let sunset = moment(Weather.currentWeather[0].SunsetAt); let currentTime = Meta.currentUserTime; let afterSunrise = currentTime.isAfter(sunrise); let beforeSunset = currentTime.isBefore(sunset);  if (afterSunrise && beforeSunset) {    Wiz.turnOn.skip(`Its still daytime so we're leaving the lights off`); }
if You enter an area (trigger_service: Location) then Current weather (action_service: Weather Underground),let sunrise = moment(Weather.currentWeather[0].SunriseAt); let sunset = moment(Weather.currentWeather[0].SunsetAt); let currentTime = Meta.currentUserTime; let afterSunrise = currentTime.isAfter(sunrise); let beforeSunset = currentTime.isBefore(sunset);  if (afterSunrise && beforeSunset) {    Yeelight.onOff.skip(`Its still daytime so we're leaving the lights off`); }
if If CO2 Level Is Low (trigger_service: Green Light Signal) then Change color of lights (action_service: LIFX),"var co2Index = GreenLightSignal.co2Level.Co2Index   if (co2Index === ""low"" || co2Index === ""very low"") {​​​​    Lifx.color.setAdvancedOptions('color: #00e600; brightness: 1; transition_duration: 0')  }​​​​ else {​​​​    Lifx.color.setAdvancedOptions('color: #ffffff; brightness: 0; transition_duration: 0')  }​​​​"
if Door opened (trigger_service: MyQ) then Turn on (action_service: WeMo Smart Plug),"var hour     = Meta.currentUserTime.hour() if (hour < 17) {   WemoSwitch.attributeSocketOnDiscrete.skip(""not in hour timing"") }"
if You enter an area (trigger_service: Location) then Turn 1-Channel Switch on or off (action_service: eWeLink Smart Home),var timeOfDay = Meta.currentUserTime.hour();    if (timeOfDay > 16 || timeOfDay < 8) {      } else {    Ewelink.switchAction.skip();  }
if You enter an area (trigger_service: Location) then Turn 1-Channel Plug on or off (action_service: eWeLink Smart Home),var timeOfDay = Meta.currentUserTime.hour();    if (timeOfDay > 18 || timeOfDay < 6) {      } else {    Ewelink.plugAction.skip();  }
if You enter an area (trigger_service: Location) then Turn on (action_service: WeMo Light Switch),var timeOfDay = Meta.currentUserTime.hour()  if (timeOfDay >= 17 || timeOfDay < 7 ) {
if New Motion Detected (trigger_service: Ring) then Turn on (action_service: WeMo Smart Plug),var timeOfDay = Meta.currentUserTime.hour() if (timeOfDay >= 18 || timeOfDay < 6 ) {
if You enter or exit an area (trigger_service: Location) then Toggle on/off (action_service: WeMo Smart Plug),var timeOfDay = Meta.currentUserTime.hour();  if (timeOfDay > 18) {
if Notification received (trigger_service: Android Device) then Set scene (action_service: Yeelight),var heure = Meta.currentUserTime.hour() if (heure < 8) {    if (heure > 0) {   Yeelight.setScene.skip()   } }
if Today's weather report (trigger_service: Weather Underground) then Notify you using your Nanoleaf Light Panels or Canvas (action_service: Nanoleaf Smarter Series),"var temp     = parseInt(Weather.currentWeatherAtTime.HighTempFahrenheit)  var tempround = ((Math.round(temp / 10) * 10))  var colorKey = tempround.toString()    var colors: {[key:string]:string} = {    ""0"":""#0000FF"",    ""10"":""#1900E5"",      ""20"":""#3300CC"",    ""30"":""#4C00B2"",      ""40"":""#660099"",    ""50"":""#7F007F"",      ""60"":""#990066"",    ""70"":""#B2004C"",      ""80"":""#CC0033"",    ""90"":""#E50019"",    ""100"":""#FF0000""      }    if (tempround < 0) {      Nanoleaf.colorNotificationRequest.setValue(""#0000FF"")    }    else if (temp < 100)  {    Nanoleaf.colorNotificationRequest.setValue(colors[colorKey])    }    else {    Nanoleaf.colorNotificationRequest.setValue(""#FF0000"")  }"
if You exit an area (trigger_service: Location) then Set scene (action_service: Yeelight),if (Meta.currentUserTime.hour() >= 18 || Meta.currentUserTime.hour() < 6) {   Yeelight.setScene.skip('Too Late'); }
if New Ring Detected (trigger_service: Ring) then Toggle lights on/off (action_service: Philips Hue),var TimeOfDay = Meta.currentUserTime.hour()  if (TimeOfDay >= 21 || TimeOfDay < 6){
if You enter an area (trigger_service: Location) then Current weather (action_service: Weather Underground),let sunrise = moment(Weather.currentWeather[0].SunriseAt); let sunset = moment(Weather.currentWeather[0].SunsetAt); let currentTime = Meta.currentUserTime; let afterSunrise = currentTime.isAfter(sunrise); let beforeSunset = currentTime.isBefore(sunset);  if (afterSunrise && beforeSunset) {    Kasa.turnOn.skip(`Its still daytime so we're leaving the lights off`); }
if You enter an area (trigger_service: Location) then Current weather (action_service: Weather Underground),let sunrise = moment(Weather.currentWeather[0].SunriseAt); let sunset = moment(Weather.currentWeather[0].SunsetAt); let currentTime = Meta.currentUserTime; let afterSunrise = currentTime.isAfter(sunrise); let beforeSunset = currentTime.isBefore(sunset);  if (afterSunrise && beforeSunset) {    Govee.lightBrightness.skip(`Its still daytime so we're leaving the lights off`); }
if You exit an area (trigger_service: Location) then Set scene (action_service: Yeelight),if (Meta.currentUserTime.hour() < 18 && Meta.currentUserTime.hour() >= 6) {   Yeelight.setScene.skip('Too Early'); }
if You enter an area (trigger_service: Location) then Current weather (action_service: Weather Underground),let sunrise = moment(Weather.currentWeather[0].SunriseAt); let sunset = moment(Weather.currentWeather[0].SunsetAt); let currentTime = Meta.currentUserTime; let afterSunrise = currentTime.isAfter(sunrise); let beforeSunset = currentTime.isBefore(sunset);  if (afterSunrise && beforeSunset) {    Magichue.poweron.skip(`Its still daytime so we're leaving the lights off`); }
if Motion detected (trigger_service: Arlo) then Dim lights (action_service: Philips Hue),var timeOfDay = Meta.currentUserTime.hour();  if (timeOfDay > 7 && timeOfDay < 19) {   Hue.setBrightnessAllHue.skip() }
if Device Connects (trigger_service: Google Wifi) then Turn on lights (action_service: Philips Hue),var sunDown = moment().hour(20).minute(0); var sunUp = moment().hour(5).minute(0); if (Meta.triggerTime.isAfter(sunUp) || Meta.triggerTime.isBefore(sunDown)) {   Hue.turnOnAllHue.skip(); }
if Door opened (trigger_service: MyQ) then Activate scene (action_service: Lutron Caséta and RA2 Select),"var hour = Meta.triggerTime.hour()  if (hour < 22) {    LutronCasetaWireless.setScene.skip(""Not a school night."")  }"
if Door opened (trigger_service: MyQ) then Activate scene (action_service: Lutron Caséta and RA2 Select),var timeOfDay = Meta.currentUserTime.hour()    if (timeOfDay >= 20 || timeOfDay < 6 ) {
if You enter an area (trigger_service: Location) then Set a scene in a room (action_service: Philips Hue),var timeOfDay = Meta.currentUserTime.hour() if (timeOfDay >= 18 || timeOfDay < 6 ) {
if You enter an area (trigger_service: Location) then Dim lights (action_service: Philips Hue),var timeOfDay = Meta.currentUserTime.hour();    if (timeOfDay > 7 && timeOfDay < 19) {    Hue.setBrightnessAllHue.skip()  }
if You enter an area (trigger_service: Location) then Set Temperature (action_service: Heatmiser),var timeOfDay = Meta.currentUserTime.hour() if (timeOfDay <6 || timeOfDay >= 22) {     Heatmiser.setTemp.skip(); }
if Every hour at (trigger_service: Date & Time) then Start recording (action_service: Arlo),"var hour     = Meta.currentUserTime.hour()  if (hour > 18) {   Arlo.record.skip(""Too Late"") }  if (hour < 5) {   Arlo.record.skip(""Too Early"") }"
